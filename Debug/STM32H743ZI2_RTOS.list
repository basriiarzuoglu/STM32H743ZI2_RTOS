
STM32H743ZI2_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c35c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800c5fc  0800c5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c758  0800c758  0001c758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  24000000  0800c760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000066a0  240001ec  0800c94c  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00001204  2400688c  0800c94c  0002688c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029d00  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005026  00000000  00000000  00049f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001f48  00000000  00000000  0004ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001d40  00000000  00000000  00050e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00007837  00000000  00000000  00052bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000240cf  00000000  00000000  0005a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00171ef5  00000000  00000000  0007e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f03c3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008808  00000000  00000000  001f0414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c5e4 	.word	0x0800c5e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800c5e4 	.word	0x0800c5e4

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fbbe 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f868 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f948 	bl	8000580 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002f0:	f000 f8e2 	bl	80004b8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure Tx buffer message */
   TxHeader.Identifier = 0x1;
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <main+0xc4>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
   TxHeader.IdType = FDCAN_STANDARD_ID;
 80002fa:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <main+0xc4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
   TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000300:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <main+0xc4>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
   TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000306:	4b27      	ldr	r3, [pc, #156]	; (80003a4 <main+0xc4>)
 8000308:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800030c:	60da      	str	r2, [r3, #12]
   TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <main+0xc4>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
   TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000314:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <main+0xc4>)
 8000316:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800031a:	615a      	str	r2, [r3, #20]
   TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <main+0xc4>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
   TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <main+0xc4>)
 8000324:	2200      	movs	r2, #0
 8000326:	61da      	str	r2, [r3, #28]
   TxHeader.MessageMarker = 0x0; // Ignore because FDCAN_NO_TX_EVENTS
 8000328:	4b1e      	ldr	r3, [pc, #120]	; (80003a4 <main+0xc4>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]

   /* Configure standard ID reception filter to Rx buffer 0 */
   sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <main+0xc8>)
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIndex = 0;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <main+0xc8>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <main+0xc8>)
 800033e:	2202      	movs	r2, #2
 8000340:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <main+0xc8>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterID1 = 0x0;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <main+0xc8>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterID2 = 0x0;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <main+0xc8>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
   if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000354:	4914      	ldr	r1, [pc, #80]	; (80003a8 <main+0xc8>)
 8000356:	4815      	ldr	r0, [pc, #84]	; (80003ac <main+0xcc>)
 8000358:	f000 fece 	bl	80010f8 <HAL_FDCAN_ConfigFilter>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <main+0x86>
     Error_Handler();
 8000362:	f000 f991 	bl	8000688 <Error_Handler>
 //  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 //    Error_Handler();
   if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	4810      	ldr	r0, [pc, #64]	; (80003ac <main+0xcc>)
 800036c:	f001 f8d4 	bl	8001518 <HAL_FDCAN_ActivateNotification>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <main+0x9a>
     Error_Handler();
 8000376:	f000 f987 	bl	8000688 <Error_Handler>

   /* Start the FDCAN module */
   if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <main+0xcc>)
 800037c:	f000 ff32 	bl	80011e4 <HAL_FDCAN_Start>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <main+0xaa>
 	  Error_Handler();
 8000386:	f000 f97f 	bl	8000688 <Error_Handler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800038a:	f008 fd2d 	bl	8008de8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800038e:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <main+0xd0>)
 8000390:	2100      	movs	r1, #0
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <main+0xd4>)
 8000394:	f008 fd72 	bl	8008e7c <osThreadNew>
 8000398:	4603      	mov	r3, r0
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <main+0xd8>)
 800039c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800039e:	f008 fd47 	bl	8008e30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <main+0xc2>
 80003a4:	240002cc 	.word	0x240002cc
 80003a8:	240002ac 	.word	0x240002ac
 80003ac:	24000208 	.word	0x24000208
 80003b0:	0800c6b4 	.word	0x0800c6b4
 80003b4:	0800062d 	.word	0x0800062d
 80003b8:	240002a8 	.word	0x240002a8

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	; 0x70
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c6:	224c      	movs	r2, #76	; 0x4c
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f00c f840 	bl	800c450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2220      	movs	r2, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f00c f83a 	bl	800c450 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003dc:	2002      	movs	r0, #2
 80003de:	f003 f931 	bl	8003644 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <SystemClock_Config+0xf4>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <SystemClock_Config+0xf4>)
 80003ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <SystemClock_Config+0xf4>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <SystemClock_Config+0xf8>)
 80003fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000400:	4a2c      	ldr	r2, [pc, #176]	; (80004b4 <SystemClock_Config+0xf8>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <SystemClock_Config+0xf8>)
 800040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000414:	bf00      	nop
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <SystemClock_Config+0xf4>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800041e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000422:	d1f8      	bne.n	8000416 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000424:	2322      	movs	r3, #34	; 0x22
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000428:	2301      	movs	r3, #1
 800042a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2340      	movs	r3, #64	; 0x40
 800042e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000430:	2301      	movs	r3, #1
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2300      	movs	r3, #0
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043c:	2304      	movs	r3, #4
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000440:	2309      	movs	r3, #9
 8000442:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000448:	2303      	movs	r3, #3
 800044a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000450:	230c      	movs	r3, #12
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000454:	2302      	movs	r3, #2
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000458:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800045c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	4618      	mov	r0, r3
 8000464:	f003 f938 	bl	80036d8 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800046e:	f000 f90b 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	233f      	movs	r3, #63	; 0x3f
 8000474:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f003 fd2c 	bl	8003ef4 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004a2:	f000 f8f1 	bl	8000688 <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3770      	adds	r7, #112	; 0x70
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58024800 	.word	0x58024800
 80004b4:	58000400 	.word	0x58000400

080004b8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004bc:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004be:	4a2f      	ldr	r2, [pc, #188]	; (800057c <MX_FDCAN1_Init+0xc4>)
 80004c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004e8:	220d      	movs	r2, #13
 80004ea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 174;
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004ee:	22ae      	movs	r2, #174	; 0xae
 80004f0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 25;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004f4:	2219      	movs	r2, #25
 80004f6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 80004fa:	2202      	movs	r2, #2
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 12;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000500:	220c      	movs	r2, #12
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000506:	220c      	movs	r2, #12
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 12;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800050c:	220c      	movs	r2, #12
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000518:	2201      	movs	r2, #1
 800051a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000524:	2201      	movs	r2, #1
 8000526:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800052a:	2204      	movs	r2, #4
 800052c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000536:	2204      	movs	r2, #4
 8000538:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800053c:	2201      	movs	r2, #1
 800053e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000542:	2205      	movs	r2, #5
 8000544:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000548:	2200      	movs	r2, #0
 800054a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800054e:	2201      	movs	r2, #1
 8000550:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000554:	2200      	movs	r2, #0
 8000556:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 800055a:	2200      	movs	r2, #0
 800055c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000560:	2205      	movs	r2, #5
 8000562:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_FDCAN1_Init+0xc0>)
 8000566:	f000 fbe9 	bl	8000d3c <HAL_FDCAN_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000570:	f000 f88a 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	24000208 	.word	0x24000208
 800057c:	4000a000 	.word	0x4000a000

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_GPIO_Init+0x50>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <MX_GPIO_Init+0x50>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_GPIO_Init+0x50>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_GPIO_Init+0x50>)
 80005a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <MX_GPIO_Init+0x50>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_GPIO_Init+0x50>)
 80005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	58024400 	.word	0x58024400

080005d4 <CDC_ReceiveCallback>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(buf, len);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f00b fa71 	bl	800bacc <CDC_Transmit_FS>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	 if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d009      	beq.n	800061c <HAL_FDCAN_RxFifo0Callback+0x28>
	  {
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_FDCAN_RxFifo0Callback+0x30>)
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_FDCAN_RxFifo0Callback+0x34>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fe14 	bl	800123c <HAL_FDCAN_GetRxMessage>
	    	CDC_Transmit_FS(RxData, 8);
 8000614:	2108      	movs	r1, #8
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000618:	f00b fa58 	bl	800bacc <CDC_Transmit_FS>
	  }
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	24000318 	.word	0x24000318
 8000628:	240002f0 	.word	0x240002f0

0800062c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000634:	f00b f982 	bl	800b93c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8000638:	f009 fdd8 	bl	800a1ec <xTaskGetTickCount>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    taskYIELD();
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <StartDefaultTask+0x34>)
 8000642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	f3bf 8f4f 	dsb	sy
 800064c:	f3bf 8f6f 	isb	sy
    vTaskDelayUntil(&xLastWakeTime, 1000);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000658:	4618      	mov	r0, r3
 800065a:	f009 fc2d 	bl	8009eb8 <vTaskDelayUntil>
    taskYIELD();
 800065e:	e7ef      	b.n	8000640 <StartDefaultTask+0x14>
 8000660:	e000ed04 	.word	0xe000ed04

08000664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d101      	bne.n	800067a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000676:	f000 fa31 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010000 	.word	0x40010000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_MspInit+0x38>)
 800069c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <HAL_MspInit+0x38>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_MspInit+0x38>)
 80006ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	210f      	movs	r1, #15
 80006bc:	f06f 0001 	mvn.w	r0, #1
 80006c0:	f000 fb14 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58024400 	.word	0x58024400

080006d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0b8      	sub	sp, #224	; 0xe0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	22bc      	movs	r2, #188	; 0xbc
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00b fead 	bl	800c450 <memset>
  if(hfdcan->Instance==FDCAN1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a2d      	ldr	r2, [pc, #180]	; (80007b0 <HAL_FDCAN_MspInit+0xe0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d153      	bne.n	80007a8 <HAL_FDCAN_MspInit+0xd8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000704:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800070a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4618      	mov	r0, r3
 8000712:	f003 ffa7 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800071c:	f7ff ffb4 	bl	8000688 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000722:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000732:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <HAL_FDCAN_MspInit+0xe4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000776:	2309      	movs	r3, #9
 8000778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000780:	4619      	mov	r1, r3
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <HAL_FDCAN_MspInit+0xe8>)
 8000784:	f001 fbd2 	bl	8001f2c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2013      	movs	r0, #19
 800078e:	f000 faad 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000792:	2013      	movs	r0, #19
 8000794:	f000 fac4 	bl	8000d20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	2015      	movs	r0, #21
 800079e:	f000 faa5 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80007a2:	2015      	movs	r0, #21
 80007a4:	f000 fabc 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	37e0      	adds	r7, #224	; 0xe0
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	4000a000 	.word	0x4000a000
 80007b4:	58024400 	.word	0x58024400
 80007b8:	58020400 	.word	0x58020400

080007bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d842      	bhi.n	8000850 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80007ca:	2200      	movs	r2, #0
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	2019      	movs	r0, #25
 80007d0:	f000 fa8c 	bl	8000cec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007d4:	2019      	movs	r0, #25
 80007d6:	f000 faa3 	bl	8000d20 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <HAL_InitTick+0xac>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_InitTick+0xb0>)
 80007e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007e6:	4a21      	ldr	r2, [pc, #132]	; (800086c <HAL_InitTick+0xb0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <HAL_InitTick+0xb0>)
 80007f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fe:	f107 020c 	add.w	r2, r7, #12
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fee9 	bl	80045e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800080e:	f003 fed1 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 8000812:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <HAL_InitTick+0xb4>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	0c9b      	lsrs	r3, r3, #18
 800081e:	3b01      	subs	r3, #1
 8000820:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0xb8>)
 8000824:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_InitTick+0xbc>)
 8000826:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0xb8>)
 800082a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800082e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_InitTick+0xb8>)
 8000832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000834:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_InitTick+0xb8>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_InitTick+0xb8>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <HAL_InitTick+0xb8>)
 8000844:	f004 ffb8 	bl	80057b8 <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d107      	bne.n	800085e <HAL_InitTick+0xa2>
 800084e:	e001      	b.n	8000854 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e005      	b.n	8000860 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <HAL_InitTick+0xb8>)
 8000856:	f005 f811 	bl	800587c <HAL_TIM_Base_Start_IT>
 800085a:	4603      	mov	r3, r0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3738      	adds	r7, #56	; 0x38
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000008 	.word	0x24000008
 800086c:	58024400 	.word	0x58024400
 8000870:	431bde83 	.word	0x431bde83
 8000874:	24000328 	.word	0x24000328
 8000878:	40010000 	.word	0x40010000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80008ae:	f000 fead 	bl	800160c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	24000208 	.word	0x24000208

080008bc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <FDCAN1_IT1_IRQHandler+0x10>)
 80008c2:	f000 fea3 	bl	800160c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	24000208 	.word	0x24000208

080008d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <TIM1_UP_IRQHandler+0x10>)
 80008d6:	f005 f841 	bl	800595c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	24000328 	.word	0x24000328

080008e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <OTG_FS_IRQHandler+0x10>)
 80008ea:	f001 fe26 	bl	800253a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2400625c 	.word	0x2400625c

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <SystemInit+0xec>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <SystemInit+0xec>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800090c:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <SystemInit+0xf0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 030f 	and.w	r3, r3, #15
 8000914:	2b06      	cmp	r3, #6
 8000916:	d807      	bhi.n	8000928 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <SystemInit+0xf0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 030f 	bic.w	r3, r3, #15
 8000920:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <SystemInit+0xf0>)
 8000922:	f043 0307 	orr.w	r3, r3, #7
 8000926:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <SystemInit+0xf4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <SystemInit+0xf4>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <SystemInit+0xf4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <SystemInit+0xf4>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	492b      	ldr	r1, [pc, #172]	; (80009ec <SystemInit+0xf4>)
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <SystemInit+0xf8>)
 8000942:	4013      	ands	r3, r2
 8000944:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemInit+0xf0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemInit+0xf0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 030f 	bic.w	r3, r3, #15
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <SystemInit+0xf0>)
 800095c:	f043 0307 	orr.w	r3, r3, #7
 8000960:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <SystemInit+0xf4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <SystemInit+0xf4>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemInit+0xf4>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <SystemInit+0xf4>)
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <SystemInit+0xfc>)
 8000978:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <SystemInit+0xf4>)
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <SystemInit+0x100>)
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <SystemInit+0xf4>)
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <SystemInit+0x104>)
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <SystemInit+0xf4>)
 8000988:	2200      	movs	r2, #0
 800098a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <SystemInit+0xf4>)
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <SystemInit+0x104>)
 8000990:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <SystemInit+0xf4>)
 8000994:	2200      	movs	r2, #0
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <SystemInit+0xf4>)
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <SystemInit+0x104>)
 800099c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SystemInit+0xf4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <SystemInit+0xf4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <SystemInit+0xf4>)
 80009aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SystemInit+0xf4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <SystemInit+0x108>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SystemInit+0x10c>)
 80009bc:	4013      	ands	r3, r2
 80009be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009c2:	d202      	bcs.n	80009ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <SystemInit+0x110>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <SystemInit+0x114>)
 80009cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0xec>)
 80009d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	52002000 	.word	0x52002000
 80009ec:	58024400 	.word	0x58024400
 80009f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80009f4:	02020200 	.word	0x02020200
 80009f8:	01ff0000 	.word	0x01ff0000
 80009fc:	01010280 	.word	0x01010280
 8000a00:	5c001000 	.word	0x5c001000
 8000a04:	ffff0000 	.word	0xffff0000
 8000a08:	51008108 	.word	0x51008108
 8000a0c:	52004000 	.word	0x52004000

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff ff70 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f00b fcd3 	bl	800c3e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fc4d 	bl	80002e0 <main>
  bx  lr
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a50:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8000a54:	0800c760 	.word	0x0800c760
  ldr r2, =_sbss
 8000a58:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8000a5c:	2400688c 	.word	0x2400688c

08000a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC3_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f933 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a70:	f003 fbf6 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_Init+0x68>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	0a1b      	lsrs	r3, r3, #8
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	4913      	ldr	r1, [pc, #76]	; (8000ad0 <HAL_Init+0x6c>)
 8000a82:	5ccb      	ldrb	r3, [r1, r3]
 8000a84:	f003 031f 	and.w	r3, r3, #31
 8000a88:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_Init+0x68>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_Init+0x6c>)
 8000a98:	5cd3      	ldrb	r3, [r2, r3]
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_Init+0x70>)
 8000aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_Init+0x74>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff fe84 	bl	80007bc <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e002      	b.n	8000ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000abe:	f7ff fde9 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	0800c6d8 	.word	0x0800c6d8
 8000ad4:	24000004 	.word	0x24000004
 8000ad8:	24000000 	.word	0x24000000

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2400000c 	.word	0x2400000c
 8000b00:	24000374 	.word	0x24000374

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	24000374 	.word	0x24000374

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffde 	bl	8000b04 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2400000c 	.word	0x2400000c

08000b64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetREVID+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	0c1b      	lsrs	r3, r3, #16
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	5c001000 	.word	0x5c001000

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	05fa0000 	.word	0x05fa0000

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff63 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb3 	bl	8000c70 <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff82 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff56 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b098      	sub	sp, #96	; 0x60
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d44:	4a84      	ldr	r2, [pc, #528]	; (8000f58 <HAL_FDCAN_Init+0x21c>)
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	224c      	movs	r2, #76	; 0x4c
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f00b fb70 	bl	800c434 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e1c6      	b.n	80010ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7e      	ldr	r2, [pc, #504]	; (8000f5c <HAL_FDCAN_Init+0x220>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d106      	bne.n	8000d76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d106      	bne.n	8000d90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fca0 	bl	80006d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0210 	bic.w	r2, r2, #16
 8000d9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da0:	f7ff feb0 	bl	8000b04 <HAL_GetTick>
 8000da4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000da6:	e014      	b.n	8000dd2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000da8:	f7ff feac 	bl	8000b04 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d90d      	bls.n	8000dd2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dbc:	f043 0201 	orr.w	r2, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e18c      	b.n	80010ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d0e3      	beq.n	8000da8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0201 	orr.w	r2, r2, #1
 8000dee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df0:	f7ff fe88 	bl	8000b04 <HAL_GetTick>
 8000df4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000df6:	e014      	b.n	8000e22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000df8:	f7ff fe84 	bl	8000b04 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90d      	bls.n	8000e22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e164      	b.n	80010ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0e3      	beq.n	8000df8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0202 	orr.w	r2, r2, #2
 8000e3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c1b      	ldrb	r3, [r3, #16]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d108      	bne.n	8000e5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	e007      	b.n	8000e6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7c5b      	ldrb	r3, [r3, #17]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	699a      	ldr	r2, [r3, #24]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	e007      	b.n	8000e94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7c9b      	ldrb	r3, [r3, #18]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	699a      	ldr	r2, [r3, #24]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	e007      	b.n	8000ebe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ebc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000ee2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0210 	bic.w	r2, r2, #16
 8000ef2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d108      	bne.n	8000f0e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	699a      	ldr	r2, [r3, #24]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0204 	orr.w	r2, r2, #4
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	e030      	b.n	8000f70 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d02c      	beq.n	8000f70 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d020      	beq.n	8000f60 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f2c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0210 	orr.w	r2, r2, #16
 8000f3c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d114      	bne.n	8000f70 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	699a      	ldr	r2, [r3, #24]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0220 	orr.w	r2, r2, #32
 8000f54:	619a      	str	r2, [r3, #24]
 8000f56:	e00b      	b.n	8000f70 <HAL_FDCAN_Init+0x234>
 8000f58:	0800c608 	.word	0x0800c608
 8000f5c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f80:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f88:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f98:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f9a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fa4:	d115      	bne.n	8000fd2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fb4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fbe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fd0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00a      	beq.n	8000ff0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d011      	beq.n	8001022 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001006:	f023 0107 	bic.w	r1, r3, #7
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	443b      	add	r3, r7
 8001014:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	2b00      	cmp	r3, #0
 8001028:	d011      	beq.n	800104e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001032:	f023 0107 	bic.w	r1, r3, #7
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	3360      	adds	r3, #96	; 0x60
 800103e:	443b      	add	r3, r7
 8001040:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	2b00      	cmp	r3, #0
 8001054:	d012      	beq.n	800107c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800105e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3360      	adds	r3, #96	; 0x60
 800106a:	443b      	add	r3, r7
 800106c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001070:	011a      	lsls	r2, r3, #4
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001080:	2b00      	cmp	r3, #0
 8001082:	d012      	beq.n	80010aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800108c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3360      	adds	r3, #96	; 0x60
 8001098:	443b      	add	r3, r7
 800109a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800109e:	021a      	lsls	r2, r3, #8
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_FDCAN_Init+0x3b8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d107      	bne.n	80010c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f022 0203 	bic.w	r2, r2, #3
 80010c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd9f 	bl	8001c20 <FDCAN_CalcultateRamBlockAddresses>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80010e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3760      	adds	r7, #96	; 0x60
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	4000a000 	.word	0x4000a000

080010f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001108:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d002      	beq.n	8001116 <HAL_FDCAN_ConfigFilter+0x1e>
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d157      	bne.n	80011c6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d12b      	bne.n	8001176 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d10d      	bne.n	8001142 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001132:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001138:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800113a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00e      	b.n	8001160 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800114e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001156:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e025      	b.n	80011c2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	075a      	lsls	r2, r3, #29
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d103      	bne.n	8001194 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e006      	b.n	80011a2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	079a      	lsls	r2, r3, #30
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3304      	adds	r3, #4
 80011ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e008      	b.n	80011d8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011cc:	f043 0202 	orr.w	r2, r3, #2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
  }
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d111      	bne.n	800121c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2202      	movs	r2, #2
 80011fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	e008      	b.n	800122e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001222:	f043 0204 	orr.w	r2, r3, #4
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
  }
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800123c:	b480      	push	{r7}
 800123e:	b08b      	sub	sp, #44	; 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001254:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001256:	7efb      	ldrb	r3, [r7, #27]
 8001258:	2b02      	cmp	r3, #2
 800125a:	f040 814b 	bne.w	80014f4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b40      	cmp	r3, #64	; 0x40
 8001262:	d14d      	bne.n	8001300 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800126c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d109      	bne.n	8001288 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800127a:	f043 0220 	orr.w	r2, r3, #32
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e13e      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800129e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e12c      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012b4:	0e1b      	lsrs	r3, r3, #24
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10b      	bne.n	80012d6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80012c6:	0fdb      	lsrs	r3, r3, #31
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012d0:	d101      	bne.n	80012d6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	69f9      	ldr	r1, [r7, #28]
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	e069      	b.n	80013d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b41      	cmp	r3, #65	; 0x41
 8001304:	d14d      	bne.n	80013a2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800130e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800131c:	f043 0220 	orr.w	r2, r3, #32
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0ed      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0db      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001356:	0e1b      	lsrs	r3, r3, #24
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10b      	bne.n	8001378 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001368:	0fdb      	lsrs	r3, r3, #31
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001372:	d101      	bne.n	8001378 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4413      	add	r3, r2
 800138a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	69f9      	ldr	r1, [r7, #28]
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	e018      	b.n	80013d4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d309      	bcc.n	80013c0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b2:	f043 0220 	orr.w	r2, r3, #32
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0a2      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e005      	b.n	8001404 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3304      	adds	r3, #4
 8001420:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29a      	uxth	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0fda      	lsrs	r2, r3, #31
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	3304      	adds	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	e00a      	b.n	800148e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	441a      	add	r2, r3
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	440b      	add	r3, r1
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	3301      	adds	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	461a      	mov	r2, r3
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	4293      	cmp	r3, r2
 800149e:	d3eb      	bcc.n	8001478 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b40      	cmp	r3, #64	; 0x40
 80014a4:	d105      	bne.n	80014b2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80014b0:	e01e      	b.n	80014f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b41      	cmp	r3, #65	; 0x41
 80014b6:	d105      	bne.n	80014c4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80014c2:	e015      	b.n	80014f0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b1f      	cmp	r3, #31
 80014c8:	d808      	bhi.n	80014dc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80014da:	e009      	b.n	80014f0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f003 021f 	and.w	r2, r3, #31
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e008      	b.n	8001506 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014fa:	f043 0208 	orr.w	r2, r3, #8
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	0800c6e8 	.word	0x0800c6e8

08001518 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800152a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d002      	beq.n	8001538 <HAL_FDCAN_ActivateNotification+0x20>
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d155      	bne.n	80015e4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	65da      	str	r2, [r3, #92]	; 0x5c
 8001556:	e014      	b.n	8001582 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4013      	ands	r3, r2
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d108      	bne.n	800157a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0202 	orr.w	r2, r2, #2
 8001576:	65da      	str	r2, [r3, #92]	; 0x5c
 8001578:	e003      	b.n	8001582 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2203      	movs	r2, #3
 8001580:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	430a      	orrs	r2, r1
 800159c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_FDCAN_ActivateNotification+0xec>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6553      	str	r3, [r2, #84]	; 0x54
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_FDCAN_ActivateNotification+0xf0>)
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	0f9b      	lsrs	r3, r3, #30
 80015da:	490b      	ldr	r1, [pc, #44]	; (8001608 <HAL_FDCAN_ActivateNotification+0xf0>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e008      	b.n	80015f6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
  }
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	3fcfffff 	.word	0x3fcfffff
 8001608:	4000a800 	.word	0x4000a800

0800160c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b092      	sub	sp, #72	; 0x48
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001614:	4b90      	ldr	r3, [pc, #576]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	079b      	lsls	r3, r3, #30
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800161c:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	079b      	lsls	r3, r3, #30
 8001622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001624:	4013      	ands	r3, r2
 8001626:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800163c:	4013      	ands	r3, r2
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001654:	4013      	ands	r3, r2
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800166c:	4013      	ands	r3, r2
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001684:	4013      	ands	r3, r2
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800169c:	4013      	ands	r3, r2
 800169e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d011      	beq.n	80016d2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50
 80016c6:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fa5a 	bl	8001b86 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01e      	beq.n	800171e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d017      	beq.n	800171e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	4013      	ands	r3, r2
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	651a      	str	r2, [r3, #80]	; 0x50
 8001710:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fa0b 	bl	8001b34 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_FDCAN_IRQHandler+0x250>)
 800172c:	400b      	ands	r3, r1
 800172e:	6513      	str	r3, [r2, #80]	; 0x50
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001734:	0f9b      	lsrs	r3, r3, #30
 8001736:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f9c4 	bl	8001ac8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00d      	beq.n	8001762 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800174c:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_FDCAN_IRQHandler+0x250>)
 800174e:	400b      	ands	r3, r1
 8001750:	6513      	str	r3, [r2, #80]	; 0x50
 8001752:	4a41      	ldr	r2, [pc, #260]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001756:	0f9b      	lsrs	r3, r3, #30
 8001758:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800175a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9be 	bl	8001ade <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_FDCAN_IRQHandler+0x250>)
 8001770:	400b      	ands	r3, r1
 8001772:	6513      	str	r3, [r2, #80]	; 0x50
 8001774:	4a38      	ldr	r2, [pc, #224]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001778:	0f9b      	lsrs	r3, r3, #30
 800177a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800177c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe ff38 	bl	80005f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_FDCAN_IRQHandler+0x250>)
 8001792:	400b      	ands	r3, r1
 8001794:	6513      	str	r3, [r2, #80]	; 0x50
 8001796:	4a30      	ldr	r2, [pc, #192]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179a:	0f9b      	lsrs	r3, r3, #30
 800179c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800179e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f9a7 	bl	8001af4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d011      	beq.n	80017d8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00a      	beq.n	80017d8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ca:	651a      	str	r2, [r3, #80]	; 0x50
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f999 	bl	8001b0a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01e      	beq.n	8001824 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d017      	beq.n	8001824 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001808:	4013      	ands	r3, r2
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	651a      	str	r2, [r3, #80]	; 0x50
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800181c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f97d 	bl	8001b1e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00f      	beq.n	8001860 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001848:	651a      	str	r2, [r3, #80]	; 0x50
 800184a:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_FDCAN_IRQHandler+0x24c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f97a 	bl	8001b4a <HAL_FDCAN_RxBufferNewMessageCallback>
 8001856:	e003      	b.n	8001860 <HAL_FDCAN_IRQHandler+0x254>
 8001858:	4000a800 	.word	0x4000a800
 800185c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d011      	beq.n	8001892 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00a      	beq.n	8001892 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001884:	651a      	str	r2, [r3, #80]	; 0x50
 8001886:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f966 	bl	8001b5e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d011      	beq.n	80018c4 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018b6:	651a      	str	r2, [r3, #80]	; 0x50
 80018b8:	4b80      	ldr	r3, [pc, #512]	; (8001abc <HAL_FDCAN_IRQHandler+0x4b0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f957 	bl	8001b72 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00f      	beq.n	8001900 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_FDCAN_IRQHandler+0x4b0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00d      	beq.n	8001922 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800190c:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <HAL_FDCAN_IRQHandler+0x4b4>)
 800190e:	400b      	ands	r3, r1
 8001910:	6513      	str	r3, [r2, #80]	; 0x50
 8001912:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	0f9b      	lsrs	r3, r3, #30
 8001918:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800191a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f946 	bl	8001bae <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	2b00      	cmp	r3, #0
 8001926:	d011      	beq.n	800194c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001930:	400b      	ands	r3, r1
 8001932:	6513      	str	r3, [r2, #80]	; 0x50
 8001934:	4a61      	ldr	r2, [pc, #388]	; (8001abc <HAL_FDCAN_IRQHandler+0x4b0>)
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	0f9b      	lsrs	r3, r3, #30
 800193a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5c      	ldr	r2, [pc, #368]	; (8001ac4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 80a6 	bne.w	8001aa4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 809e 	beq.w	8001aa4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4013      	ands	r3, r2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800198a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	4013      	ands	r3, r2
 8001996:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80019a2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80019ba:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80019d2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80019ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8e7 	bl	8001bc4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	6a3a      	ldr	r2, [r7, #32]
 8001a02:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8e7 	bl	8001bda <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01b      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a3e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	6939      	ldr	r1, [r7, #16]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8cf 	bl	8001bf0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001a60:	69f9      	ldr	r1, [r7, #28]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8d0 	bl	8001c08 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f873 	bl	8001b9a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3748      	adds	r7, #72	; 0x48
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	4000a800 	.word	0x4000a800
 8001ac0:	3fcfffff 	.word	0x3fcfffff
 8001ac4:	4000a000 	.word	0x4000a000

08001ac8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c36:	4ba7      	ldr	r3, [pc, #668]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	0091      	lsls	r1, r2, #2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c50:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	0091      	lsls	r1, r2, #2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c90:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	0091      	lsls	r1, r2, #2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d00:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	0091      	lsls	r1, r2, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d48:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	0091      	lsls	r1, r2, #2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	0091      	lsls	r1, r2, #2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d8e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	041a      	lsls	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	0091      	lsls	r1, r2, #2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dd0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	061a      	lsls	r2, r3, #24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001e06:	4413      	add	r3, r2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e3a:	fb01 f303 	mul.w	r3, r1, r3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	441a      	add	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	441a      	add	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	441a      	add	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	4a04      	ldr	r2, [pc, #16]	; (8001edc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d915      	bls.n	8001efc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001ed0:	e006      	b.n	8001ee0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001ed2:	bf00      	nop
 8001ed4:	ffff0003 	.word	0xffff0003
 8001ed8:	10002b00 	.word	0x10002b00
 8001edc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e010      	b.n	8001f1e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e005      	b.n	8001f10 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d3f3      	bcc.n	8001f04 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_GPIO_Init+0x234>)
 8001f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f3e:	e194      	b.n	800226a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8186 	beq.w	8002264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d00b      	beq.n	8001f78 <HAL_GPIO_Init+0x4c>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d130      	bne.n	8001fda <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f003 0201 	and.w	r2, r3, #1
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0xee>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b12      	cmp	r3, #18
 8002018:	d123      	bne.n	8002062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	08da      	lsrs	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3208      	adds	r2, #8
 800205c:	69b9      	ldr	r1, [r7, #24]
 800205e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0203 	and.w	r2, r3, #3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80e0 	beq.w	8002264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a4:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x238>)
 80020a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020aa:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <HAL_GPIO_Init+0x238>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_GPIO_Init+0x238>)
 80020b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_GPIO_Init+0x23c>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a20      	ldr	r2, [pc, #128]	; (800216c <HAL_GPIO_Init+0x240>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d052      	beq.n	8002194 <HAL_GPIO_Init+0x268>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_GPIO_Init+0x244>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d031      	beq.n	800215a <HAL_GPIO_Init+0x22e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_GPIO_Init+0x248>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <HAL_GPIO_Init+0x22a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_GPIO_Init+0x24c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d025      	beq.n	8002152 <HAL_GPIO_Init+0x226>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_GPIO_Init+0x250>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <HAL_GPIO_Init+0x222>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_GPIO_Init+0x254>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x21e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x258>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_GPIO_Init+0x25c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_GPIO_Init+0x260>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_GPIO_Init+0x264>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x20e>
 8002136:	2309      	movs	r3, #9
 8002138:	e02d      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800213a:	230a      	movs	r3, #10
 800213c:	e02b      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800213e:	2308      	movs	r3, #8
 8002140:	e029      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002142:	2307      	movs	r3, #7
 8002144:	e027      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002146:	2306      	movs	r3, #6
 8002148:	e025      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800214a:	2305      	movs	r3, #5
 800214c:	e023      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800214e:	2304      	movs	r3, #4
 8002150:	e021      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002152:	2303      	movs	r3, #3
 8002154:	e01f      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 8002156:	2302      	movs	r3, #2
 8002158:	e01d      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800215a:	2301      	movs	r3, #1
 800215c:	e01b      	b.n	8002196 <HAL_GPIO_Init+0x26a>
 800215e:	bf00      	nop
 8002160:	58000080 	.word	0x58000080
 8002164:	58024400 	.word	0x58024400
 8002168:	58000400 	.word	0x58000400
 800216c:	58020000 	.word	0x58020000
 8002170:	58020400 	.word	0x58020400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020c00 	.word	0x58020c00
 800217c:	58021000 	.word	0x58021000
 8002180:	58021400 	.word	0x58021400
 8002184:	58021800 	.word	0x58021800
 8002188:	58021c00 	.word	0x58021c00
 800218c:	58022000 	.word	0x58022000
 8002190:	58022400 	.word	0x58022400
 8002194:	2300      	movs	r3, #0
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a6:	4938      	ldr	r1, [pc, #224]	; (8002288 <HAL_GPIO_Init+0x35c>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800222e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f ae63 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	3724      	adds	r7, #36	; 0x24
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	58000400 	.word	0x58000400

0800228c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	b08f      	sub	sp, #60	; 0x3c
 8002290:	af0a      	add	r7, sp, #40	; 0x28
 8002292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e116      	b.n	80024cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f009 fd4f 	bl	800bd5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fe5e 	bl	8005f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	687e      	ldr	r6, [r7, #4]
 80022ea:	466d      	mov	r5, sp
 80022ec:	f106 0410 	add.w	r4, r6, #16
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002300:	1d33      	adds	r3, r6, #4
 8002302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f003 fd29 	bl	8005d5c <USB_CoreInit>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0d7      	b.n	80024cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fe4c 	bl	8005fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e04a      	b.n	80023c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	333d      	adds	r3, #61	; 0x3d
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	333c      	adds	r3, #60	; 0x3c
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	b298      	uxth	r0, r3
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3342      	adds	r3, #66	; 0x42
 800236a:	4602      	mov	r2, r0
 800236c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	333f      	adds	r3, #63	; 0x3f
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3344      	adds	r3, #68	; 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3348      	adds	r3, #72	; 0x48
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3350      	adds	r3, #80	; 0x50
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3301      	adds	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3af      	bcc.n	800232e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e044      	b.n	800245e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3b5      	bcc.n	80023d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	687e      	ldr	r6, [r7, #4]
 8002470:	466d      	mov	r5, sp
 8002472:	f106 0410 	add.w	r4, r6, #16
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002482:	e885 0003 	stmia.w	r5, {r0, r1}
 8002486:	1d33      	adds	r3, r6, #4
 8002488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f003 fdc2 	bl	8006014 <USB_DevInit>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e014      	b.n	80024cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 f892 	bl	80035e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fe42 	bl	800714e <USB_DevDisconnect>

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_Start+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e020      	b.n	8002532 <HAL_PCD_Start+0x5e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d109      	bne.n	8002514 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 fd2f 	bl	8005f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f004 fdf2 	bl	800710c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800253a:	b590      	push	{r4, r7, lr}
 800253c:	b08d      	sub	sp, #52	; 0x34
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f004 feb0 	bl	80072b6 <USB_GetMode>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	f040 83ca 	bne.w	8002cf2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f004 fe14 	bl	8007190 <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 83c0 	beq.w	8002cf0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f004 fe0b 	bl	8007190 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f002 0202 	and.w	r2, r2, #2
 8002592:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fdf9 	bl	8007190 <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d161      	bne.n	800266c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d124      	bne.n	800262e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d035      	beq.n	800265c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	6a38      	ldr	r0, [r7, #32]
 8002604:	f004 fc30 	bl	8006e68 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002614:	441a      	add	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002626:	441a      	add	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	619a      	str	r2, [r3, #24]
 800262c:	e016      	b.n	800265c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	0c5b      	lsrs	r3, r3, #17
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	2b06      	cmp	r3, #6
 8002638:	d110      	bne.n	800265c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002640:	2208      	movs	r2, #8
 8002642:	4619      	mov	r1, r3
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f004 fc0f 	bl	8006e68 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002656:	441a      	add	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0210 	orr.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f004 fd8d 	bl	8007190 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002680:	d16e      	bne.n	8002760 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fd93 	bl	80071b6 <USB_ReadDevAllOutEpInterrupt>
 8002690:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002692:	e062      	b.n	800275a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d057      	beq.n	800274e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fdb8 	bl	800721e <USB_ReadDevOutEPInterrupt>
 80026ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c6:	461a      	mov	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fdde 	bl	8003290 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	461a      	mov	r2, r3
 80026ec:	2308      	movs	r3, #8
 80026ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fed8 	bl	80034a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	2310      	movs	r3, #16
 8002712:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	461a      	mov	r2, r3
 800272c:	2320      	movs	r3, #32
 800272e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d199      	bne.n	8002694 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fd13 	bl	8007190 <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002770:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002774:	f040 80c0 	bne.w	80028f8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f004 fd34 	bl	80071ea <USB_ReadDevAllInEpInterrupt>
 8002782:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002788:	e0b2      	b.n	80028f0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a7 	beq.w	80028e4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 fd5a 	bl	800725a <USB_ReadDevInEPInterrupt>
 80027a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d057      	beq.n	8002862 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	2201      	movs	r2, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69f9      	ldr	r1, [r7, #28]
 80027ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d2:	4013      	ands	r3, r2
 80027d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e2:	461a      	mov	r2, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d132      	bne.n	8002856 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3348      	adds	r3, #72	; 0x48
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	3344      	adds	r3, #68	; 0x44
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4419      	add	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4403      	add	r3, r0
 8002824:	3348      	adds	r3, #72	; 0x48
 8002826:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d113      	bne.n	8002856 <HAL_PCD_IRQHandler+0x31c>
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3350      	adds	r3, #80	; 0x50
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284e:	461a      	mov	r2, r3
 8002850:	2101      	movs	r1, #1
 8002852:	f004 fd63 	bl	800731c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f009 fb2c 	bl	800beba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002878:	461a      	mov	r2, r3
 800287a:	2308      	movs	r3, #8
 800287c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	461a      	mov	r2, r3
 8002896:	2310      	movs	r3, #16
 8002898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028cc:	461a      	mov	r2, r3
 80028ce:	2302      	movs	r3, #2
 80028d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fc48 	bl	8003174 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f af49 	bne.w	800278a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f004 fc47 	bl	8007190 <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800290c:	d122      	bne.n	8002954 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002934:	2100      	movs	r1, #0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fe78 	bl	800362c <HAL_PCDEx_LPM_Callback>
 800293c:	e002      	b.n	8002944 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f009 fb32 	bl	800bfa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f004 fc19 	bl	8007190 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002968:	d112      	bne.n	8002990 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f009 faee 	bl	800bf5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 fbfb 	bl	8007190 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a4:	d121      	bne.n	80029ea <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80029b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d111      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029da:	2101      	movs	r1, #1
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fe25 	bl	800362c <HAL_PCDEx_LPM_Callback>
 80029e2:	e002      	b.n	80029ea <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f009 fab9 	bl	800bf5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 fbce 	bl	8007190 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fe:	f040 80c7 	bne.w	8002b90 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fc57 	bl	80062d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	e056      	b.n	8002ad6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a34:	461a      	mov	r2, r3
 8002a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a3a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4c:	0151      	lsls	r1, r2, #5
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	440a      	add	r2, r1
 8002a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a5a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	0151      	lsls	r1, r2, #5
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	440a      	add	r2, r1
 8002a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	0151      	lsls	r1, r2, #5
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ace:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d3a3      	bcc.n	8002a28 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002af2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0c:	f043 030b 	orr.w	r3, r3, #11
 8002b10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b22:	f043 030b 	orr.w	r3, r3, #11
 8002b26:	6453      	str	r3, [r2, #68]	; 0x44
 8002b28:	e015      	b.n	8002b56 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f242 032b 	movw	r3, #8235	; 0x202b
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b50:	f043 030b 	orr.w	r3, r3, #11
 8002b54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f004 fbce 	bl	800731c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fafb 	bl	8007190 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d124      	bne.n	8002bf0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fb92 	bl	80072d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fbec 	bl	8006392 <USB_GetDevSpeed>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681c      	ldr	r4, [r3, #0]
 8002bc6:	f001 fcc5 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8002bca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f003 f92f 	bl	8005e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f009 f995 	bl	800bf0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 facb 	bl	8007190 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d10a      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f009 f972 	bl	800beee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 0208 	and.w	r2, r2, #8
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fab6 	bl	8007190 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d10f      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f009 f9d4 	bl	800bfe8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 fa9b 	bl	8007190 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c64:	d10f      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f009 f9a7 	bl	800bfc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fa80 	bl	8007190 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f009 f9b5 	bl	800c00c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fa6a 	bl	8007190 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d115      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f009 f9a5 	bl	800c028 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	e000      	b.n	8002cf2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002cf0:	bf00      	nop
    }
  }
}
 8002cf2:	3734      	adds	r7, #52	; 0x34
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}

08002cf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_PCD_SetAddress+0x1a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e013      	b.n	8002d3a <HAL_PCD_SetAddress+0x42>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f9c8 	bl	80070c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	70fb      	strb	r3, [r7, #3]
 8002d54:	460b      	mov	r3, r1
 8002d56:	803b      	strh	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da0f      	bge.n	8002d88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3338      	adds	r3, #56	; 0x38
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	705a      	strb	r2, [r3, #1]
 8002d86:	e00f      	b.n	8002da8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3304      	adds	r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002db4:	883a      	ldrh	r2, [r7, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	78ba      	ldrb	r2, [r7, #2]
 8002dbe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dd2:	78bb      	ldrb	r3, [r7, #2]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d102      	bne.n	8002dde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_EP_Open+0xaa>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e00e      	b.n	8002e0a <HAL_PCD_EP_Open+0xc8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 faee 	bl	80063dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e08:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	da0f      	bge.n	8002e46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	f003 020f 	and.w	r2, r3, #15
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3338      	adds	r3, #56	; 0x38
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	705a      	strb	r2, [r3, #1]
 8002e44:	e00f      	b.n	8002e66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_PCD_EP_Close+0x6e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e00e      	b.n	8002e9e <HAL_PCD_EP_Close+0x8c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fb2c 	bl	80064ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	f003 fe0f 	bl	8006b3c <USB_EP0StartXfer>
 8002f1e:	e008      	b.n	8002f32 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	f003 fbb9 	bl	80066a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3338      	adds	r3, #56	; 0x38
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	f003 fdad 	bl	8006b3c <USB_EP0StartXfer>
 8002fe2:	e008      	b.n	8002ff6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	f003 fb57 	bl	80066a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d901      	bls.n	800301e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e050      	b.n	80030c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0f      	bge.n	8003046 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3338      	adds	r3, #56	; 0x38
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	705a      	strb	r2, [r3, #1]
 8003044:	e00d      	b.n	8003062 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_PCD_EP_SetStall+0x82>
 800307e:	2302      	movs	r3, #2
 8003080:	e01e      	b.n	80030c0 <HAL_PCD_EP_SetStall+0xc0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	f003 ff41 	bl	8006f18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	b2d9      	uxtb	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030b0:	461a      	mov	r2, r3
 80030b2:	f004 f933 	bl	800731c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d901      	bls.n	80030e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e042      	b.n	800316c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0f      	bge.n	800310e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	3338      	adds	r3, #56	; 0x38
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	705a      	strb	r2, [r3, #1]
 800310c:	e00f      	b.n	800312e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_PCD_EP_ClrStall+0x86>
 800314a:	2302      	movs	r3, #2
 800314c:	e00e      	b.n	800316c <HAL_PCD_EP_ClrStall+0xa4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 ff49 	bl	8006ff4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3338      	adds	r3, #56	; 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d901      	bls.n	80031ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e06c      	b.n	8003286 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d902      	bls.n	80031c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3303      	adds	r3, #3
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031d0:	e02b      	b.n	800322a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d902      	bls.n	80031ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3303      	adds	r3, #3
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68d9      	ldr	r1, [r3, #12]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003206:	b2db      	uxtb	r3, r3
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4603      	mov	r3, r0
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f003 fded 	bl	8006dec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	441a      	add	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	b29b      	uxth	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	429a      	cmp	r2, r3
 800323e:	d809      	bhi.n	8003254 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003248:	429a      	cmp	r2, r3
 800324a:	d203      	bcs.n	8003254 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1be      	bne.n	80031d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	429a      	cmp	r2, r3
 800325e:	d811      	bhi.n	8003284 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2201      	movs	r2, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	43db      	mvns	r3, r3
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4013      	ands	r3, r2
 8003282:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	3304      	adds	r3, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	f040 80a0 	bne.w	8003408 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f240 80dd 	bls.w	8003496 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80d7 	beq.w	8003496 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	461a      	mov	r2, r3
 80032f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fa:	6093      	str	r3, [r2, #8]
 80032fc:	e0cb      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	2320      	movs	r3, #32
 8003318:	6093      	str	r3, [r2, #8]
 800331a:	e0bc      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 80b7 	bne.w	8003496 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d90f      	bls.n	8003350 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334c:	6093      	str	r3, [r2, #8]
 800334e:	e0a2      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003362:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	440b      	add	r3, r1
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003376:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800338a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4419      	add	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4403      	add	r3, r0
 80033c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d114      	bne.n	80033fa <PCD_EP_OutXfrComplete_int+0x16a>
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f2:	461a      	mov	r2, r3
 80033f4:	2101      	movs	r1, #1
 80033f6:	f003 ff91 	bl	800731c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f008 fd3f 	bl	800be84 <HAL_PCD_DataOutStageCallback>
 8003406:	e046      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d124      	bne.n	800345a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342c:	6093      	str	r3, [r2, #8]
 800342e:	e032      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	461a      	mov	r2, r3
 8003448:	2320      	movs	r3, #32
 800344a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f008 fd16 	bl	800be84 <HAL_PCD_DataOutStageCallback>
 8003458:	e01d      	b.n	8003496 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d114      	bne.n	800348a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003482:	461a      	mov	r2, r3
 8003484:	2100      	movs	r1, #0
 8003486:	f003 ff49 	bl	800731c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f008 fcf7 	bl	800be84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	4f54300a 	.word	0x4f54300a
 80034a4:	4f54310a 	.word	0x4f54310a

080034a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	333c      	adds	r3, #60	; 0x3c
 80034c0:	3304      	adds	r3, #4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a15      	ldr	r2, [pc, #84]	; (8003530 <PCD_EP_OutSetupPacket_int+0x88>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d90e      	bls.n	80034fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f008 fcaf 	bl	800be60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <PCD_EP_OutSetupPacket_int+0x88>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d90c      	bls.n	8003524 <PCD_EP_OutSetupPacket_int+0x7c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d108      	bne.n	8003524 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800351c:	461a      	mov	r2, r3
 800351e:	2101      	movs	r1, #1
 8003520:	f003 fefc 	bl	800731c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	4f54300a 	.word	0x4f54300a

08003534 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
 8003540:	4613      	mov	r3, r2
 8003542:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003552:	883b      	ldrh	r3, [r7, #0]
 8003554:	0419      	lsls	r1, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	430a      	orrs	r2, r1
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
 8003560:	e028      	b.n	80035b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4413      	add	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e00d      	b.n	8003592 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3340      	adds	r3, #64	; 0x40
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4413      	add	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	3301      	adds	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	3b01      	subs	r3, #1
 8003598:	429a      	cmp	r2, r3
 800359a:	d3ec      	bcc.n	8003576 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800359c:	883b      	ldrh	r3, [r7, #0]
 800359e:	0418      	lsls	r0, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4302      	orrs	r2, r0
 80035ac:	3340      	adds	r3, #64	; 0x40
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_PCDEx_ActivateLPM+0x44>)
 8003614:	4313      	orrs	r3, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	10000003 	.word	0x10000003

0800362c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00a      	beq.n	800366e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01f      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e01d      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0207 	bic.w	r2, r3, #7
 8003676:	490f      	ldr	r1, [pc, #60]	; (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800367e:	f7fd fa41 	bl	8000b04 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003684:	e009      	b.n	800369a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003686:	f7fd fa3d 	bl	8000b04 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003694:	d901      	bls.n	800369a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a6:	d1ee      	bne.n	8003686 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	58024800 	.word	0x58024800

080036b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	58024800 	.word	0x58024800

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e3fd      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8087 	beq.w	8003806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f8:	4b99      	ldr	r3, [pc, #612]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003702:	4b97      	ldr	r3, [pc, #604]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	2b10      	cmp	r3, #16
 800370c:	d007      	beq.n	800371e <HAL_RCC_OscConfig+0x46>
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	2b18      	cmp	r3, #24
 8003712:	d110      	bne.n	8003736 <HAL_RCC_OscConfig+0x5e>
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d10b      	bne.n	8003736 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371e:	4b90      	ldr	r3, [pc, #576]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d06c      	beq.n	8003804 <HAL_RCC_OscConfig+0x12c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d168      	bne.n	8003804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e3d7      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x76>
 8003740:	4b87      	ldr	r3, [pc, #540]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a86      	ldr	r2, [pc, #536]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e02e      	b.n	80037ac <HAL_RCC_OscConfig+0xd4>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x98>
 8003756:	4b82      	ldr	r3, [pc, #520]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a81      	ldr	r2, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800375c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b7f      	ldr	r3, [pc, #508]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7e      	ldr	r2, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xd4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0xbc>
 800377a:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a78      	ldr	r2, [pc, #480]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a75      	ldr	r2, [pc, #468]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xd4>
 8003794:	4b72      	ldr	r3, [pc, #456]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a71      	ldr	r2, [pc, #452]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6e      	ldr	r2, [pc, #440]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd f9a6 	bl	8000b04 <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fd f9a2 	bl	8000b04 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e38b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ce:	4b64      	ldr	r3, [pc, #400]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xe4>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd f992 	bl	8000b04 <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fd f98e 	bl	8000b04 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e377      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037f6:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x10c>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80ae 	beq.w	8003970 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003814:	4b52      	ldr	r3, [pc, #328]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800381c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_RCC_OscConfig+0x162>
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	2b18      	cmp	r3, #24
 800382e:	d13a      	bne.n	80038a6 <HAL_RCC_OscConfig+0x1ce>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d135      	bne.n	80038a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x17a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e349      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	f7fd f987 	bl	8000b64 <HAL_GetREVID>
 8003856:	4603      	mov	r3, r0
 8003858:	f241 0203 	movw	r2, #4099	; 0x1003
 800385c:	4293      	cmp	r3, r2
 800385e:	d817      	bhi.n	8003890 <HAL_RCC_OscConfig+0x1b8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d108      	bne.n	800387a <HAL_RCC_OscConfig+0x1a2>
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003870:	4a3b      	ldr	r2, [pc, #236]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003878:	e07a      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	031b      	lsls	r3, r3, #12
 8003888:	4935      	ldr	r1, [pc, #212]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800388e:	e06f      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	4930      	ldr	r1, [pc, #192]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	e064      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d045      	beq.n	800393a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038ae:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0219 	bic.w	r2, r3, #25
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4929      	ldr	r1, [pc, #164]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd f920 	bl	8000b04 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c8:	f7fd f91c 	bl	8000b04 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e305      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	f7fd f93d 	bl	8000b64 <HAL_GetREVID>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d817      	bhi.n	8003924 <HAL_RCC_OscConfig+0x24c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d108      	bne.n	800390e <HAL_RCC_OscConfig+0x236>
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800390a:	6053      	str	r3, [r2, #4]
 800390c:	e030      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	031b      	lsls	r3, r3, #12
 800391c:	4910      	ldr	r1, [pc, #64]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
 8003922:	e025      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	490b      	ldr	r1, [pc, #44]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e01a      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <HAL_RCC_OscConfig+0x288>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd f8dd 	bl	8000b04 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394e:	f7fd f8d9 	bl	8000b04 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d903      	bls.n	8003964 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e2c2      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
 8003960:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003964:	4b94      	ldr	r3, [pc, #592]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a9 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397e:	4b8e      	ldr	r3, [pc, #568]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003986:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003988:	4b8b      	ldr	r3, [pc, #556]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d007      	beq.n	80039a4 <HAL_RCC_OscConfig+0x2cc>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b18      	cmp	r3, #24
 8003998:	d13a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x338>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d135      	bne.n	8003a10 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a4:	4b84      	ldr	r3, [pc, #528]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_OscConfig+0x2e4>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e294      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039bc:	f7fd f8d2 	bl	8000b64 <HAL_GetREVID>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d817      	bhi.n	80039fa <HAL_RCC_OscConfig+0x322>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d108      	bne.n	80039e4 <HAL_RCC_OscConfig+0x30c>
 80039d2:	4b79      	ldr	r3, [pc, #484]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039da:	4a77      	ldr	r2, [pc, #476]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039e2:	e075      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039e4:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	069b      	lsls	r3, r3, #26
 80039f2:	4971      	ldr	r1, [pc, #452]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039f8:	e06a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039fa:	4b6f      	ldr	r3, [pc, #444]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	496b      	ldr	r1, [pc, #428]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a0e:	e05f      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d042      	beq.n	8003a9e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a18:	4b67      	ldr	r3, [pc, #412]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a66      	ldr	r2, [pc, #408]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fd f86e 	bl	8000b04 <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a2c:	f7fd f86a 	bl	8000b04 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e253      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a4a:	f7fd f88b 	bl	8000b64 <HAL_GetREVID>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d817      	bhi.n	8003a88 <HAL_RCC_OscConfig+0x3b0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d108      	bne.n	8003a72 <HAL_RCC_OscConfig+0x39a>
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a68:	4a53      	ldr	r2, [pc, #332]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a6e:	6053      	str	r3, [r2, #4]
 8003a70:	e02e      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
 8003a72:	4b51      	ldr	r3, [pc, #324]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
 8003a86:	e023      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	4948      	ldr	r1, [pc, #288]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
 8003a9c:	e018      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a9e:	4b46      	ldr	r3, [pc, #280]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd f82b 	bl	8000b04 <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ab2:	f7fd f827 	bl	8000b04 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e210      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d036      	beq.n	8003b4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae4:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	4a33      	ldr	r2, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd f808 	bl	8000b04 <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fd f804 	bl	8000b04 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1ed      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x420>
 8003b16:	e018      	b.n	8003b4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	4a26      	ldr	r2, [pc, #152]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fc ffee 	bl	8000b04 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fc ffea 	bl	8000b04 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1d3      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d038      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d019      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b6a:	f7fc ffcb 	bl	8000b04 <HAL_GetTick>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b72:	f7fc ffc7 	bl	8000b04 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e1b0      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x49a>
 8003b90:	e01a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <HAL_RCC_OscConfig+0x4e0>)
 8003b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b9e:	f7fc ffb1 	bl	8000b04 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ba6:	f7fc ffad 	bl	8000b04 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d903      	bls.n	8003bbc <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e196      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
 8003bb8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bbc:	4b99      	ldr	r3, [pc, #612]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ee      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8081 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bd6:	4b94      	ldr	r3, [pc, #592]	; (8003e28 <HAL_RCC_OscConfig+0x750>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a93      	ldr	r2, [pc, #588]	; (8003e28 <HAL_RCC_OscConfig+0x750>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be2:	f7fc ff8f 	bl	8000b04 <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fc ff8b 	bl	8000b04 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b64      	cmp	r3, #100	; 0x64
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e174      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfc:	4b8a      	ldr	r3, [pc, #552]	; (8003e28 <HAL_RCC_OscConfig+0x750>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x546>
 8003c10:	4b84      	ldr	r3, [pc, #528]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a83      	ldr	r2, [pc, #524]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1c:	e02d      	b.n	8003c7a <HAL_RCC_OscConfig+0x5a2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x568>
 8003c26:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	4b7c      	ldr	r3, [pc, #496]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a7b      	ldr	r2, [pc, #492]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3e:	e01c      	b.n	8003c7a <HAL_RCC_OscConfig+0x5a2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_OscConfig+0x58a>
 8003c48:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c60:	e00b      	b.n	8003c7a <HAL_RCC_OscConfig+0x5a2>
 8003c62:	4b70      	ldr	r3, [pc, #448]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a6f      	ldr	r2, [pc, #444]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a6c      	ldr	r2, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fc ff3f 	bl	8000b04 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fc ff3b 	bl	8000b04 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e122      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca0:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ee      	beq.n	8003c8a <HAL_RCC_OscConfig+0x5b2>
 8003cac:	e014      	b.n	8003cd8 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fc ff29 	bl	8000b04 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fc ff25 	bl	8000b04 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e10c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ccc:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ee      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8101 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ce2:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cea:	2b18      	cmp	r3, #24
 8003cec:	f000 80bc 	beq.w	8003e68 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	f040 809d 	bne.w	8003e34 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fc fefd 	bl	8000b04 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fc fef9 	bl	8000b04 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0e2      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d30:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <HAL_RCC_OscConfig+0x754>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	4938      	ldr	r1, [pc, #224]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	628b      	str	r3, [r1, #40]	; 0x28
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	3b01      	subs	r3, #1
 8003d56:	025b      	lsls	r3, r3, #9
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	3b01      	subs	r3, #1
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d76:	492b      	ldr	r1, [pc, #172]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8c:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <HAL_RCC_OscConfig+0x758>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d94:	00d2      	lsls	r2, r2, #3
 8003d96:	4923      	ldr	r1, [pc, #140]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f023 020c 	bic.w	r2, r3, #12
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	491e      	ldr	r1, [pc, #120]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f023 0202 	bic.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	491a      	ldr	r1, [pc, #104]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dc0:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dcc:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fc fe82 	bl	8000b04 <HAL_GetTick>
 8003e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fc fe7e 	bl	8000b04 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e067      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e16:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_RCC_OscConfig+0x74c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x72c>
 8003e22:	e05f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x80c>
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58024800 	.word	0x58024800
 8003e2c:	fffffc0c 	.word	0xfffffc0c
 8003e30:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_RCC_OscConfig+0x818>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_RCC_OscConfig+0x818>)
 8003e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fc fe60 	bl	8000b04 <HAL_GetTick>
 8003e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fc fe5c 	bl	8000b04 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e045      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5a:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_OscConfig+0x818>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x770>
 8003e66:	e03d      	b.n	8003ee4 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_RCC_OscConfig+0x818>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_OscConfig+0x818>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d031      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f003 0203 	and.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d12a      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d122      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11a      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0a5b      	lsrs	r3, r3, #9
 8003eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d111      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d108      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3730      	adds	r7, #48	; 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400

08003ef4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e19c      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f08:	4b8a      	ldr	r3, [pc, #552]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d910      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 020f 	bic.w	r2, r3, #15
 8003f1e:	4985      	ldr	r1, [pc, #532]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b83      	ldr	r3, [pc, #524]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e184      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	4b7b      	ldr	r3, [pc, #492]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d908      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f54:	4b78      	ldr	r3, [pc, #480]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4975      	ldr	r1, [pc, #468]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	4b70      	ldr	r3, [pc, #448]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d908      	bls.n	8003f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f82:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	496a      	ldr	r1, [pc, #424]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d908      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	495e      	ldr	r1, [pc, #376]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d908      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fde:	4b56      	ldr	r3, [pc, #344]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4953      	ldr	r1, [pc, #332]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	429a      	cmp	r2, r3
 800400a:	d908      	bls.n	800401e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b4a      	ldr	r3, [pc, #296]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f023 020f 	bic.w	r2, r3, #15
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4947      	ldr	r1, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 800401a:	4313      	orrs	r3, r2
 800401c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d055      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800402a:	4b43      	ldr	r3, [pc, #268]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4940      	ldr	r1, [pc, #256]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004038:	4313      	orrs	r3, r2
 800403a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004044:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d121      	bne.n	8004094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0f6      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0ea      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d107      	bne.n	8004084 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0de      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0d6      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f023 0207 	bic.w	r2, r3, #7
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4925      	ldr	r1, [pc, #148]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fc fd2d 	bl	8000b04 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7fc fd29 	bl	8000b04 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0be      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c4:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d1eb      	bne.n	80040ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d208      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x244>)
 8004100:	4313      	orrs	r3, r2
 8004102:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d214      	bcs.n	800413c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 020f 	bic.w	r2, r3, #15
 800411a:	4906      	ldr	r1, [pc, #24]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <HAL_RCC_ClockConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e086      	b.n	8004242 <HAL_RCC_ClockConfig+0x34e>
 8004134:	52002000 	.word	0x52002000
 8004138:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004154:	429a      	cmp	r2, r3
 8004156:	d208      	bcs.n	800416a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004158:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	4939      	ldr	r1, [pc, #228]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 8004166:	4313      	orrs	r3, r2
 8004168:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004182:	429a      	cmp	r2, r3
 8004184:	d208      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004186:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	492e      	ldr	r1, [pc, #184]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 8004194:	4313      	orrs	r3, r2
 8004196:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d208      	bcs.n	80041c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	4922      	ldr	r1, [pc, #136]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041de:	429a      	cmp	r2, r3
 80041e0:	d208      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4917      	ldr	r1, [pc, #92]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041f4:	f000 f834 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	4912      	ldr	r1, [pc, #72]	; (8004250 <HAL_RCC_ClockConfig+0x35c>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_RCC_ClockConfig+0x358>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <HAL_RCC_ClockConfig+0x35c>)
 800421c:	5cd3      	ldrb	r3, [r2, r3]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x360>)
 800422a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <HAL_RCC_ClockConfig+0x364>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x368>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc fac0 	bl	80007bc <HAL_InitTick>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
 8004250:	0800c6d8 	.word	0x0800c6d8
 8004254:	24000004 	.word	0x24000004
 8004258:	24000000 	.word	0x24000000
 800425c:	24000008 	.word	0x24000008

08004260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004266:	4bb3      	ldr	r3, [pc, #716]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	2b18      	cmp	r3, #24
 8004270:	f200 8155 	bhi.w	800451e <HAL_RCC_GetSysClockFreq+0x2be>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042e1 	.word	0x080042e1
 8004280:	0800451f 	.word	0x0800451f
 8004284:	0800451f 	.word	0x0800451f
 8004288:	0800451f 	.word	0x0800451f
 800428c:	0800451f 	.word	0x0800451f
 8004290:	0800451f 	.word	0x0800451f
 8004294:	0800451f 	.word	0x0800451f
 8004298:	0800451f 	.word	0x0800451f
 800429c:	08004307 	.word	0x08004307
 80042a0:	0800451f 	.word	0x0800451f
 80042a4:	0800451f 	.word	0x0800451f
 80042a8:	0800451f 	.word	0x0800451f
 80042ac:	0800451f 	.word	0x0800451f
 80042b0:	0800451f 	.word	0x0800451f
 80042b4:	0800451f 	.word	0x0800451f
 80042b8:	0800451f 	.word	0x0800451f
 80042bc:	0800430d 	.word	0x0800430d
 80042c0:	0800451f 	.word	0x0800451f
 80042c4:	0800451f 	.word	0x0800451f
 80042c8:	0800451f 	.word	0x0800451f
 80042cc:	0800451f 	.word	0x0800451f
 80042d0:	0800451f 	.word	0x0800451f
 80042d4:	0800451f 	.word	0x0800451f
 80042d8:	0800451f 	.word	0x0800451f
 80042dc:	08004313 	.word	0x08004313
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e0:	4b94      	ldr	r3, [pc, #592]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042ec:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	4a90      	ldr	r2, [pc, #576]	; (8004538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042fe:	e111      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004300:	4b8d      	ldr	r3, [pc, #564]	; (8004538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004302:	61bb      	str	r3, [r7, #24]
    break;
 8004304:	e10e      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004306:	4b8d      	ldr	r3, [pc, #564]	; (800453c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004308:	61bb      	str	r3, [r7, #24]
    break;
 800430a:	e10b      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800430c:	4b8c      	ldr	r3, [pc, #560]	; (8004540 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800430e:	61bb      	str	r3, [r7, #24]
    break;
 8004310:	e108      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004312:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800431c:	4b85      	ldr	r3, [pc, #532]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004326:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004328:	4b82      	ldr	r3, [pc, #520]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004332:	4b80      	ldr	r3, [pc, #512]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	08db      	lsrs	r3, r3, #3
 8004338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80e1 	beq.w	8004518 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	f000 8083 	beq.w	8004464 <HAL_RCC_GetSysClockFreq+0x204>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b02      	cmp	r3, #2
 8004362:	f200 80a1 	bhi.w	80044a8 <HAL_RCC_GetSysClockFreq+0x248>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x114>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d056      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004372:	e099      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004374:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02d      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004380:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	08db      	lsrs	r3, r3, #3
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	4a6b      	ldr	r2, [pc, #428]	; (8004538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	ee07 3a90 	vmov	s15, r3
 8004398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80043be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043da:	e087      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004548 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b51      	ldr	r3, [pc, #324]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004402:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441e:	e065      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800454c <HAL_RCC_GetSysClockFreq+0x2ec>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a02 	vldr	s12, [r7, #8]
 8004446:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004462:	e043      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004550 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a02 	vldr	s12, [r7, #8]
 800448a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a6:	e021      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800454c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	0a5b      	lsrs	r3, r3, #9
 80044f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f6:	3301      	adds	r3, #1
 80044f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004504:	edd7 6a07 	vldr	s13, [r7, #28]
 8004508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004510:	ee17 3a90 	vmov	r3, s15
 8004514:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004516:	e005      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
    break;
 800451c:	e002      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004520:	61bb      	str	r3, [r7, #24]
    break;
 8004522:	bf00      	nop
  }

  return sysclockfreq;
 8004524:	69bb      	ldr	r3, [r7, #24]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	58024400 	.word	0x58024400
 8004538:	03d09000 	.word	0x03d09000
 800453c:	003d0900 	.word	0x003d0900
 8004540:	017d7840 	.word	0x017d7840
 8004544:	46000000 	.word	0x46000000
 8004548:	4c742400 	.word	0x4c742400
 800454c:	4a742400 	.word	0x4a742400
 8004550:	4bbebc20 	.word	0x4bbebc20

08004554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800455a:	f7ff fe81 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800455e:	4602      	mov	r2, r0
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	490f      	ldr	r1, [pc, #60]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800456c:	5ccb      	ldrb	r3, [r1, r3]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	fa22 f303 	lsr.w	r3, r2, r3
 8004576:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <HAL_RCC_GetHCLKFreq+0x58>)
 8004590:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCC_GetHCLKFreq+0x58>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400
 80045a8:	0800c6d8 	.word	0x0800c6d8
 80045ac:	24000004 	.word	0x24000004
 80045b0:	24000000 	.word	0x24000000

080045b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045b8:	f7ff ffcc 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4904      	ldr	r1, [pc, #16]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58024400 	.word	0x58024400
 80045dc:	0800c6d8 	.word	0x0800c6d8

080045e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	223f      	movs	r2, #63	; 0x3f
 80045ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f003 0207 	and.w	r2, r3, #7
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_GetClockConfig+0x7c>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_GetClockConfig+0x80>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	58024400 	.word	0x58024400
 8004660:	52002000 	.word	0x52002000

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800466c:	2300      	movs	r3, #0
 800466e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004670:	2300      	movs	r3, #0
 8004672:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d03f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004688:	d02a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800468a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800468e:	d824      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004694:	d018      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469a:	d81e      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d007      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046a6:	e018      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a8:	4ba3      	ldr	r3, [pc, #652]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	4aa2      	ldr	r2, [pc, #648]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046b4:	e015      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 ff17 	bl	80054f0 <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ffc0 	bl	8005654 <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
      break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046e8:	4b93      	ldr	r3, [pc, #588]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f4:	4990      	ldr	r1, [pc, #576]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	650b      	str	r3, [r1, #80]	; 0x50
 80046fa:	e001      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d03d      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	2b04      	cmp	r3, #4
 8004712:	d826      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004731 	.word	0x08004731
 8004720:	0800473f 	.word	0x0800473f
 8004724:	08004751 	.word	0x08004751
 8004728:	08004769 	.word	0x08004769
 800472c:	08004769 	.word	0x08004769
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004730:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a80      	ldr	r2, [pc, #512]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800473a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fed3 	bl	80054f0 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800474e:	e00c      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3324      	adds	r3, #36	; 0x24
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ff7c 	bl	8005654 <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]
      break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004770:	4b71      	ldr	r3, [pc, #452]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	f023 0207 	bic.w	r2, r3, #7
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	496e      	ldr	r1, [pc, #440]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	650b      	str	r3, [r1, #80]	; 0x50
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	2b00      	cmp	r3, #0
 8004792:	d042      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479c:	d02b      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a2:	d825      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047a4:	2bc0      	cmp	r3, #192	; 0xc0
 80047a6:	d028      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a8:	2bc0      	cmp	r3, #192	; 0xc0
 80047aa:	d821      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d016      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d81d      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d007      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80047bc:	e018      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047be:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4a5d      	ldr	r2, [pc, #372]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047ca:	e017      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fe8c 	bl	80054f0 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047dc:	e00e      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 ff35 	bl	8005654 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047ee:	e005      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80047fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004802:	4b4d      	ldr	r3, [pc, #308]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004806:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	494a      	ldr	r1, [pc, #296]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	650b      	str	r3, [r1, #80]	; 0x50
 8004814:	e001      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	7dfb      	ldrb	r3, [r7, #23]
 8004818:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d049      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800482c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004830:	d030      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004836:	d82a      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004838:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800483c:	d02c      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800483e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004842:	d824      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d018      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484e:	d81e      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004858:	d007      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800485a:	e018      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a35      	ldr	r2, [pc, #212]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004868:	e017      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe3d 	bl	80054f0 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800487a:	e00e      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3324      	adds	r3, #36	; 0x24
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fee6 	bl	8005654 <RCCEx_PLL3_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800488c:	e005      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      break;
 8004892:	e002      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ae:	4922      	ldr	r1, [pc, #136]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	658b      	str	r3, [r1, #88]	; 0x58
 80048b4:	e001      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d0:	d030      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80048d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d6:	d82a      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048dc:	d02e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80048de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048e2:	d824      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e8:	d018      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80048ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ee:	d81e      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f8:	d007      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80048fa:	e018      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004908:	e019      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fded 	bl	80054f0 <RCCEx_PLL2_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800491a:	e010      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3324      	adds	r3, #36	; 0x24
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe96 	bl	8005654 <RCCEx_PLL3_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800492c:	e007      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      break;
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004938:	58024400 	.word	0x58024400
      break;
 800493c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004944:	4b99      	ldr	r3, [pc, #612]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004952:	4996      	ldr	r1, [pc, #600]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004954:	4313      	orrs	r3, r2
 8004956:	658b      	str	r3, [r1, #88]	; 0x58
 8004958:	e001      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d032      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496e:	2b30      	cmp	r3, #48	; 0x30
 8004970:	d01c      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004972:	2b30      	cmp	r3, #48	; 0x30
 8004974:	d817      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004976:	2b20      	cmp	r3, #32
 8004978:	d00c      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800497a:	2b20      	cmp	r3, #32
 800497c:	d813      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004982:	2b10      	cmp	r3, #16
 8004984:	d10f      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004986:	4b89      	ldr	r3, [pc, #548]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	4a88      	ldr	r2, [pc, #544]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004992:	e00e      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fda8 	bl	80054f0 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049a4:	e005      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80049b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049b8:	4b7c      	ldr	r3, [pc, #496]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	4979      	ldr	r1, [pc, #484]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049ca:	e001      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d047      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e4:	d030      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ea:	d82a      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f0:	d02c      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80049f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f6:	d824      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fc:	d018      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	d81e      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004a0e:	e018      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b66      	ldr	r3, [pc, #408]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a65      	ldr	r2, [pc, #404]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e017      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fd63 	bl	80054f0 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a2e:	e00e      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3324      	adds	r3, #36	; 0x24
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe0c 	bl	8005654 <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a54:	4b55      	ldr	r3, [pc, #340]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	4952      	ldr	r1, [pc, #328]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	650b      	str	r3, [r1, #80]	; 0x50
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d049      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a80:	d02e      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a86:	d828      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a8c:	d02a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a92:	d822      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a98:	d026      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a9e:	d81c      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa4:	d010      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aaa:	d816      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01d      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d111      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2101      	movs	r1, #1
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd17 	bl	80054f0 <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ac6:	e012      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3324      	adds	r3, #36	; 0x24
 8004acc:	2101      	movs	r1, #1
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fdc0 	bl	8005654 <RCCEx_PLL3_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ad8:	e009      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ade:	e006      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ae0:	bf00      	nop
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004af4:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b00:	492a      	ldr	r1, [pc, #168]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	650b      	str	r3, [r1, #80]	; 0x50
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d04d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b22:	d02e      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b28:	d828      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d02a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d822      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b3a:	d026      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004b3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b40:	d81c      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b46:	d010      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b4c:	d816      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01d      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fcc6 	bl	80054f0 <RCCEx_PLL2_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b68:	e012      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3324      	adds	r3, #36	; 0x24
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fd6f 	bl	8005654 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b7a:	e009      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b82:	bf00      	nop
 8004b84:	e004      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ba4:	4901      	ldr	r1, [pc, #4]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8004baa:	e003      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02f      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc8:	d00e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bce:	d814      	bhi.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd8:	d10f      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bda:	4baf      	ldr	r3, [pc, #700]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	4aae      	ldr	r2, [pc, #696]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004be6:	e00c      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	2101      	movs	r1, #1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fc7e 	bl	80054f0 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bf8:	e003      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c08:	4ba3      	ldr	r3, [pc, #652]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	49a0      	ldr	r1, [pc, #640]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	650b      	str	r3, [r1, #80]	; 0x50
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d032      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d81b      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c4d 	.word	0x08004c4d
 8004c44:	08004c5b 	.word	0x08004c5b
 8004c48:	08004c73 	.word	0x08004c73
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4b92      	ldr	r3, [pc, #584]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4a91      	ldr	r2, [pc, #580]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c58:	e00c      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2102      	movs	r1, #2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fc45 	bl	80054f0 <RCCEx_PLL2_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c6a:	e003      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c7a:	4b87      	ldr	r3, [pc, #540]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	f023 0203 	bic.w	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	4984      	ldr	r1, [pc, #528]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c8c:	e001      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8086 	beq.w	8004dac <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a7d      	ldr	r2, [pc, #500]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cac:	f7fb ff2a 	bl	8000b04 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb2:	e009      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb4:	f7fb ff26 	bl	8000b04 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	75fb      	strb	r3, [r7, #23]
        break;
 8004cc6:	e005      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cc8:	4b74      	ldr	r3, [pc, #464]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ef      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d166      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004cda:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ce4:	4053      	eors	r3, r2
 8004ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d013      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cee:	4b6a      	ldr	r3, [pc, #424]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf8:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a66      	ldr	r2, [pc, #408]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d04:	4b64      	ldr	r3, [pc, #400]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a63      	ldr	r2, [pc, #396]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d10:	4a61      	ldr	r2, [pc, #388]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d115      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fb feef 	bl	8000b04 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d28:	e00b      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fb feeb 	bl	8000b04 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d902      	bls.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	75fb      	strb	r3, [r7, #23]
            break;
 8004d40:	e005      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d42:	4b55      	ldr	r3, [pc, #340]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ed      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d126      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d62:	d10d      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004d64:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d72:	0919      	lsrs	r1, r3, #4
 8004d74:	4b4a      	ldr	r3, [pc, #296]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	4947      	ldr	r1, [pc, #284]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]
 8004d7e:	e005      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004d80:	4b45      	ldr	r3, [pc, #276]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	4a44      	ldr	r2, [pc, #272]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d8a:	6113      	str	r3, [r2, #16]
 8004d8c:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9a:	493f      	ldr	r1, [pc, #252]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	670b      	str	r3, [r1, #112]	; 0x70
 8004da0:	e004      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	75bb      	strb	r3, [r7, #22]
 8004da6:	e001      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8085 	beq.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dbe:	2b28      	cmp	r3, #40	; 0x28
 8004dc0:	d866      	bhi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004dc2:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004ea5 	.word	0x08004ea5
 8004dcc:	08004e91 	.word	0x08004e91
 8004dd0:	08004e91 	.word	0x08004e91
 8004dd4:	08004e91 	.word	0x08004e91
 8004dd8:	08004e91 	.word	0x08004e91
 8004ddc:	08004e91 	.word	0x08004e91
 8004de0:	08004e91 	.word	0x08004e91
 8004de4:	08004e91 	.word	0x08004e91
 8004de8:	08004e6d 	.word	0x08004e6d
 8004dec:	08004e91 	.word	0x08004e91
 8004df0:	08004e91 	.word	0x08004e91
 8004df4:	08004e91 	.word	0x08004e91
 8004df8:	08004e91 	.word	0x08004e91
 8004dfc:	08004e91 	.word	0x08004e91
 8004e00:	08004e91 	.word	0x08004e91
 8004e04:	08004e91 	.word	0x08004e91
 8004e08:	08004e7f 	.word	0x08004e7f
 8004e0c:	08004e91 	.word	0x08004e91
 8004e10:	08004e91 	.word	0x08004e91
 8004e14:	08004e91 	.word	0x08004e91
 8004e18:	08004e91 	.word	0x08004e91
 8004e1c:	08004e91 	.word	0x08004e91
 8004e20:	08004e91 	.word	0x08004e91
 8004e24:	08004e91 	.word	0x08004e91
 8004e28:	08004ea5 	.word	0x08004ea5
 8004e2c:	08004e91 	.word	0x08004e91
 8004e30:	08004e91 	.word	0x08004e91
 8004e34:	08004e91 	.word	0x08004e91
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004e91 	.word	0x08004e91
 8004e44:	08004e91 	.word	0x08004e91
 8004e48:	08004ea5 	.word	0x08004ea5
 8004e4c:	08004e91 	.word	0x08004e91
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e91 	.word	0x08004e91
 8004e58:	08004e91 	.word	0x08004e91
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004e91 	.word	0x08004e91
 8004e64:	08004e91 	.word	0x08004e91
 8004e68:	08004ea5 	.word	0x08004ea5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fb3c 	bl	80054f0 <RCCEx_PLL2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e7c:	e013      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3324      	adds	r3, #36	; 0x24
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fbe5 	bl	8005654 <RCCEx_PLL3_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
      break;
 8004e94:	e007      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	58024800 	.word	0x58024800
 8004ea0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004eac:	4b96      	ldr	r3, [pc, #600]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb8:	4993      	ldr	r1, [pc, #588]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d038      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed4:	2b05      	cmp	r3, #5
 8004ed6:	d821      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f23 	.word	0x08004f23
 8004ee4:	08004ef9 	.word	0x08004ef9
 8004ee8:	08004f0b 	.word	0x08004f0b
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f23 	.word	0x08004f23
 8004ef4:	08004f23 	.word	0x08004f23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 faf6 	bl	80054f0 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f08:	e00c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3324      	adds	r3, #36	; 0x24
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fb9f 	bl	8005654 <RCCEx_PLL3_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004f1a:	e003      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f2a:	4b77      	ldr	r3, [pc, #476]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	f023 0207 	bic.w	r2, r3, #7
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	4974      	ldr	r1, [pc, #464]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f3c:	e001      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d03a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	d821      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004fa3 	.word	0x08004fa3
 8004f64:	08004f79 	.word	0x08004f79
 8004f68:	08004f8b 	.word	0x08004f8b
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fab6 	bl	80054f0 <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f88:	e00c      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3324      	adds	r3, #36	; 0x24
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb5f 	bl	8005654 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f9a:	e003      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004faa:	4b57      	ldr	r3, [pc, #348]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f023 0207 	bic.w	r2, r3, #7
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4953      	ldr	r1, [pc, #332]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d04b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fda:	d02e      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe0:	d828      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d02a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d822      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ff2:	d026      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004ff4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ff8:	d81c      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffe:	d010      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005004:	d816      	bhi.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01d      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800500a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500e:	d111      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fa6a 	bl	80054f0 <RCCEx_PLL2_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005020:	e012      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3324      	adds	r3, #36	; 0x24
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fb13 	bl	8005654 <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	75fb      	strb	r3, [r7, #23]
      break;
 8005038:	e006      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800503a:	bf00      	nop
 800503c:	e004      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800504e:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505c:	492a      	ldr	r1, [pc, #168]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	654b      	str	r3, [r1, #84]	; 0x54
 8005062:	e001      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d04d      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800507a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800507e:	d02e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005080:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005084:	d828      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	d02a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800508c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005090:	d822      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005096:	d026      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509c:	d81c      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d010      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d816      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01d      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d111      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2100      	movs	r1, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fa18 	bl	80054f0 <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050c4:	e012      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fac1 	bl	8005654 <RCCEx_PLL3_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050d6:	e009      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
      break;
 80050dc:	e006      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050de:	bf00      	nop
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80050ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005100:	4901      	ldr	r1, [pc, #4]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	658b      	str	r3, [r1, #88]	; 0x58
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04b      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005122:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005126:	d02e      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005128:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800512c:	d828      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800512e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005132:	d02a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d822      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800513a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800513e:	d026      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005140:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005144:	d81c      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800514a:	d010      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005150:	d816      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01d      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d111      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3304      	adds	r3, #4
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f9c4 	bl	80054f0 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800516c:	e012      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3324      	adds	r3, #36	; 0x24
 8005172:	2102      	movs	r1, #2
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fa6d 	bl	8005654 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800517e:	e009      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	e006      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800519a:	4b9d      	ldr	r3, [pc, #628]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a8:	4999      	ldr	r1, [pc, #612]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	658b      	str	r3, [r1, #88]	; 0x58
 80051ae:	e001      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d10a      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	2102      	movs	r1, #2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa3e 	bl	8005654 <RCCEx_PLL3_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051e2:	4b8b      	ldr	r3, [pc, #556]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	4987      	ldr	r1, [pc, #540]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520c:	d10a      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3324      	adds	r3, #36	; 0x24
 8005212:	2102      	movs	r1, #2
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fa1d 	bl	8005654 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005224:	4b7a      	ldr	r3, [pc, #488]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005232:	4977      	ldr	r1, [pc, #476]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005234:	4313      	orrs	r3, r2
 8005236:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d034      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800524a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524e:	d01d      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005254:	d817      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800525a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525e:	d009      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005260:	e011      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f941 	bl	80054f0 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005272:	e00c      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3324      	adds	r3, #36	; 0x24
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f9ea 	bl	8005654 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	e000      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800528c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005294:	4b5e      	ldr	r3, [pc, #376]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052a2:	495b      	ldr	r1, [pc, #364]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	658b      	str	r3, [r1, #88]	; 0x58
 80052a8:	e001      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d033      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052c4:	d01c      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80052c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052ca:	d816      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80052cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d0:	d003      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80052d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052d6:	d007      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80052d8:	e00f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80052e6:	e00c      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3324      	adds	r3, #36	; 0x24
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f9b0 	bl	8005654 <RCCEx_PLL3_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005308:	4b41      	ldr	r3, [pc, #260]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	493e      	ldr	r1, [pc, #248]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005318:	4313      	orrs	r3, r2
 800531a:	654b      	str	r3, [r1, #84]	; 0x54
 800531c:	e001      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d029      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d007      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800533c:	e00f      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800533e:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800534a:	e00b      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	2102      	movs	r1, #2
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f8cc 	bl	80054f0 <RCCEx_PLL2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800535c:	e002      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	4926      	ldr	r1, [pc, #152]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005378:	4313      	orrs	r3, r2
 800537a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800537c:	e001      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3324      	adds	r3, #36	; 0x24
 8005392:	2102      	movs	r1, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f95d 	bl	8005654 <RCCEx_PLL3_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d033      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b8:	d017      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80053ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053be:	d811      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80053c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c4:	d013      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80053c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ca:	d80b      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d4:	d106      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80053e2:	e007      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
      break;
 80053e8:	e004      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80053f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10c      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005406:	4902      	ldr	r1, [pc, #8]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005408:	4313      	orrs	r3, r2
 800540a:	654b      	str	r3, [r1, #84]	; 0x54
 800540c:	e004      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800540e:	bf00      	nop
 8005410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005424:	4b31      	ldr	r3, [pc, #196]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	492e      	ldr	r1, [pc, #184]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005432:	4313      	orrs	r3, r2
 8005434:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005442:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005450:	4926      	ldr	r1, [pc, #152]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005466:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546e:	491f      	ldr	r1, [pc, #124]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005470:	4313      	orrs	r3, r2
 8005472:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800548a:	6113      	str	r3, [r2, #16]
 800548c:	4b17      	ldr	r3, [pc, #92]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005496:	4915      	ldr	r1, [pc, #84]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005498:	4313      	orrs	r3, r2
 800549a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	da08      	bge.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b0:	490e      	ldr	r1, [pc, #56]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	4906      	ldr	r1, [pc, #24]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80054d6:	7dbb      	ldrb	r3, [r7, #22]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400

080054f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054fe:	4b53      	ldr	r3, [pc, #332]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d101      	bne.n	800550e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e099      	b.n	8005642 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800550e:	4b4f      	ldr	r3, [pc, #316]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4e      	ldr	r2, [pc, #312]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551a:	f7fb faf3 	bl	8000b04 <HAL_GetTick>
 800551e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005520:	e008      	b.n	8005534 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005522:	f7fb faef 	bl	8000b04 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e086      	b.n	8005642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005534:	4b45      	ldr	r3, [pc, #276]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005540:	4b42      	ldr	r3, [pc, #264]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	493f      	ldr	r1, [pc, #252]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	628b      	str	r3, [r1, #40]	; 0x28
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	3b01      	subs	r3, #1
 8005564:	025b      	lsls	r3, r3, #9
 8005566:	b29b      	uxth	r3, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	3b01      	subs	r3, #1
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005584:	4931      	ldr	r1, [pc, #196]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	492d      	ldr	r1, [pc, #180]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f023 0220 	bic.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4928      	ldr	r1, [pc, #160]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ae:	4b27      	ldr	r3, [pc, #156]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <RCCEx_PLL2_Config+0x160>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	69d2      	ldr	r2, [r2, #28]
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	4920      	ldr	r1, [pc, #128]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055d4:	f043 0310 	orr.w	r3, r3, #16
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055ec:	e00f      	b.n	800560e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d106      	bne.n	8005602 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a14      	ldr	r2, [pc, #80]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005600:	e005      	b.n	800560e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	4a11      	ldr	r2, [pc, #68]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800560c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561a:	f7fb fa73 	bl	8000b04 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005620:	e008      	b.n	8005634 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005622:	f7fb fa6f 	bl	8000b04 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <RCCEx_PLL2_Config+0x15c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	58024400 	.word	0x58024400
 8005650:	ffff0007 	.word	0xffff0007

08005654 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005662:	4b53      	ldr	r3, [pc, #332]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b03      	cmp	r3, #3
 800566c:	d101      	bne.n	8005672 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e099      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005672:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4e      	ldr	r2, [pc, #312]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567e:	f7fb fa41 	bl	8000b04 <HAL_GetTick>
 8005682:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005684:	e008      	b.n	8005698 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005686:	f7fb fa3d 	bl	8000b04 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e086      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056a4:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	051b      	lsls	r3, r3, #20
 80056b2:	493f      	ldr	r1, [pc, #252]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	628b      	str	r3, [r1, #40]	; 0x28
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	025b      	lsls	r3, r3, #9
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056e8:	4931      	ldr	r1, [pc, #196]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	492d      	ldr	r1, [pc, #180]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	4928      	ldr	r1, [pc, #160]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005712:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <RCCEx_PLL3_Config+0x160>)
 8005724:	4013      	ands	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	69d2      	ldr	r2, [r2, #28]
 800572a:	00d2      	lsls	r2, r2, #3
 800572c:	4920      	ldr	r1, [pc, #128]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005732:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005744:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800574a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800574e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005750:	e00f      	b.n	8005772 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d106      	bne.n	8005766 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800575e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005764:	e005      	b.n	8005772 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800576c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0e      	ldr	r2, [pc, #56]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577e:	f7fb f9c1 	bl	8000b04 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005784:	e008      	b.n	8005798 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005786:	f7fb f9bd 	bl	8000b04 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e006      	b.n	80057a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <RCCEx_PLL3_Config+0x15c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	ffff0007 	.word	0xffff0007

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e049      	b.n	800585e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f841 	bl	8005866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f9f8 	bl	8005bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e04f      	b.n	8005934 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a23      	ldr	r2, [pc, #140]	; (8005940 <HAL_TIM_Base_Start_IT+0xc4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01d      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d018      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <HAL_TIM_Base_Start_IT+0xc8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <HAL_TIM_Base_Start_IT+0xcc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1c      	ldr	r2, [pc, #112]	; (800594c <HAL_TIM_Base_Start_IT+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <HAL_TIM_Base_Start_IT+0xd4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIM_Base_Start_IT+0x76>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a19      	ldr	r2, [pc, #100]	; (8005954 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d115      	bne.n	800591e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <HAL_TIM_Base_Start_IT+0xdc>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b06      	cmp	r3, #6
 8005902:	d015      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0xb4>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590a:	d011      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	e008      	b.n	8005930 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e000      	b.n	8005932 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010400 	.word	0x40010400
 8005954:	40001800 	.word	0x40001800
 8005958:	00010007 	.word	0x00010007

0800595c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b02      	cmp	r3, #2
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0202 	mvn.w	r2, #2
 8005988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f905 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8f7 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f908 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d122      	bne.n	8005a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d11b      	bne.n	8005a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0204 	mvn.w	r2, #4
 80059dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8db 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8cd 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f8de 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d122      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d11b      	bne.n	8005a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0208 	mvn.w	r2, #8
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2204      	movs	r2, #4
 8005a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8b1 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8a3 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8b4 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d122      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d11b      	bne.n	8005ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0210 	mvn.w	r2, #16
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f887 	bl	8005bae <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f879 	bl	8005b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f88a 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d107      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0201 	mvn.w	r2, #1
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fa fdc2 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f914 	bl	8005d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1a:	d10e      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d107      	bne.n	8005b3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f907 	bl	8005d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d10e      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d107      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f838 	bl	8005bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d10e      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d107      	bne.n	8005b92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f06f 0220 	mvn.w	r2, #32
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8c7 	bl	8005d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d00f      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3d      	ldr	r2, [pc, #244]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3c      	ldr	r2, [pc, #240]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <TIM_Base_SetConfig+0x120>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2f      	ldr	r2, [pc, #188]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01f      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d01b      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2c      	ldr	r2, [pc, #176]	; (8005d04 <TIM_Base_SetConfig+0x118>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d017      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2b      	ldr	r2, [pc, #172]	; (8005d08 <TIM_Base_SetConfig+0x11c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2a      	ldr	r2, [pc, #168]	; (8005d0c <TIM_Base_SetConfig+0x120>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00f      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a29      	ldr	r2, [pc, #164]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00b      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <TIM_Base_SetConfig+0x128>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <TIM_Base_SetConfig+0x12c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_Base_SetConfig+0x9a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <TIM_Base_SetConfig+0x130>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <TIM_Base_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00f      	beq.n	8005ce4 <TIM_Base_SetConfig+0xf8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <TIM_Base_SetConfig+0xf8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <TIM_Base_SetConfig+0x128>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <TIM_Base_SetConfig+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <TIM_Base_SetConfig+0x12c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_Base_SetConfig+0xf8>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0f      	ldr	r2, [pc, #60]	; (8005d1c <TIM_Base_SetConfig+0x130>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d103      	bne.n	8005cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	615a      	str	r2, [r3, #20]
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800

08005d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	f107 001c 	add.w	r0, r7, #28
 8005d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d120      	bne.n	8005db6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <USB_CoreInit+0xd4>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d105      	bne.n	8005daa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 fb14 	bl	80073d8 <USB_CoreReset>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e01a      	b.n	8005dec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 fb08 	bl	80073d8 <USB_CoreReset>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8005dde:	e005      	b.n	8005dec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d116      	bne.n	8005e20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <USB_CoreInit+0xd8>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f043 0206 	orr.w	r2, r3, #6
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e2c:	b004      	add	sp, #16
 8005e2e:	4770      	bx	lr
 8005e30:	ffbdffbf 	.word	0xffbdffbf
 8005e34:	03ee0000 	.word	0x03ee0000

08005e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d165      	bne.n	8005f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a41      	ldr	r2, [pc, #260]	; (8005f54 <USB_SetTurnaroundTime+0x11c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d906      	bls.n	8005e62 <USB_SetTurnaroundTime+0x2a>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a40      	ldr	r2, [pc, #256]	; (8005f58 <USB_SetTurnaroundTime+0x120>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d202      	bcs.n	8005e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e5c:	230f      	movs	r3, #15
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e062      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <USB_SetTurnaroundTime+0x120>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d306      	bcc.n	8005e78 <USB_SetTurnaroundTime+0x40>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <USB_SetTurnaroundTime+0x124>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d202      	bcs.n	8005e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e72:	230e      	movs	r3, #14
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e057      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a38      	ldr	r2, [pc, #224]	; (8005f5c <USB_SetTurnaroundTime+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d306      	bcc.n	8005e8e <USB_SetTurnaroundTime+0x56>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a37      	ldr	r2, [pc, #220]	; (8005f60 <USB_SetTurnaroundTime+0x128>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d202      	bcs.n	8005e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e88:	230d      	movs	r3, #13
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e04c      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a33      	ldr	r2, [pc, #204]	; (8005f60 <USB_SetTurnaroundTime+0x128>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d306      	bcc.n	8005ea4 <USB_SetTurnaroundTime+0x6c>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <USB_SetTurnaroundTime+0x12c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d802      	bhi.n	8005ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e041      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <USB_SetTurnaroundTime+0x12c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d906      	bls.n	8005eba <USB_SetTurnaroundTime+0x82>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a2e      	ldr	r2, [pc, #184]	; (8005f68 <USB_SetTurnaroundTime+0x130>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d802      	bhi.n	8005eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005eb4:	230b      	movs	r3, #11
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e036      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <USB_SetTurnaroundTime+0x130>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d906      	bls.n	8005ed0 <USB_SetTurnaroundTime+0x98>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <USB_SetTurnaroundTime+0x134>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005eca:	230a      	movs	r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e02b      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <USB_SetTurnaroundTime+0x134>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d906      	bls.n	8005ee6 <USB_SetTurnaroundTime+0xae>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <USB_SetTurnaroundTime+0x138>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d202      	bcs.n	8005ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ee0:	2309      	movs	r3, #9
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e020      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <USB_SetTurnaroundTime+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d306      	bcc.n	8005efc <USB_SetTurnaroundTime+0xc4>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <USB_SetTurnaroundTime+0x13c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d802      	bhi.n	8005efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e015      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <USB_SetTurnaroundTime+0x13c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d906      	bls.n	8005f12 <USB_SetTurnaroundTime+0xda>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <USB_SetTurnaroundTime+0x140>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d202      	bcs.n	8005f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f0c:	2307      	movs	r3, #7
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e00a      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f12:	2306      	movs	r3, #6
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e007      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f1e:	2309      	movs	r3, #9
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e001      	b.n	8005f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f24:	2309      	movs	r3, #9
 8005f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	00d8acbf 	.word	0x00d8acbf
 8005f58:	00e4e1c0 	.word	0x00e4e1c0
 8005f5c:	00f42400 	.word	0x00f42400
 8005f60:	01067380 	.word	0x01067380
 8005f64:	011a499f 	.word	0x011a499f
 8005f68:	01312cff 	.word	0x01312cff
 8005f6c:	014ca43f 	.word	0x014ca43f
 8005f70:	016e3600 	.word	0x016e3600
 8005f74:	01a6ab1f 	.word	0x01a6ab1f
 8005f78:	01e84800 	.word	0x01e84800

08005f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f043 0201 	orr.w	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 0201 	bic.w	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d106      	bne.n	8005fec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e00b      	b.n	8006004 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	e001      	b.n	8006004 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e003      	b.n	800600c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006004:	2032      	movs	r0, #50	; 0x32
 8006006:	f7fa fd89 	bl	8000b1c <HAL_Delay>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006014:	b084      	sub	sp, #16
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	e009      	b.n	8006048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	3340      	adds	r3, #64	; 0x40
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3301      	adds	r3, #1
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b0e      	cmp	r3, #14
 800604c:	d9f2      	bls.n	8006034 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11c      	bne.n	800608e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006062:	f043 0302 	orr.w	r3, r3, #2
 8006066:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e005      	b.n	800609a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	4619      	mov	r1, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	461a      	mov	r2, r3
 80060b6:	680b      	ldr	r3, [r1, #0]
 80060b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10c      	bne.n	80060da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060c6:	2100      	movs	r1, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f949 	bl	8006360 <USB_SetDevSpeed>
 80060ce:	e008      	b.n	80060e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060d0:	2101      	movs	r1, #1
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f944 	bl	8006360 <USB_SetDevSpeed>
 80060d8:	e003      	b.n	80060e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060da:	2103      	movs	r1, #3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f93f 	bl	8006360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060e2:	2110      	movs	r1, #16
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8f3 	bl	80062d0 <USB_FlushTxFifo>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f911 	bl	800631c <USB_FlushRxFifo>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	461a      	mov	r2, r3
 800610c:	2300      	movs	r3, #0
 800610e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	461a      	mov	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006128:	2300      	movs	r3, #0
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	e043      	b.n	80061b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006144:	d118      	bne.n	8006178 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	461a      	mov	r2, r3
 800615a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	e013      	b.n	800618a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	461a      	mov	r2, r3
 8006170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e008      	b.n	800618a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	461a      	mov	r2, r3
 8006186:	2300      	movs	r3, #0
 8006188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	3301      	adds	r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d3b7      	bcc.n	800612e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e043      	b.n	800624c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061da:	d118      	bne.n	800620e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ee:	461a      	mov	r2, r3
 80061f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e013      	b.n	8006220 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e008      	b.n	8006220 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	461a      	mov	r2, r3
 8006240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3301      	adds	r3, #1
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	429a      	cmp	r2, r3
 8006252:	d3b7      	bcc.n	80061c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006266:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006274:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f043 0210 	orr.w	r2, r3, #16
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <USB_DevInit+0x2b4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f043 0208 	orr.w	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d105      	bne.n	80062b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <USB_DevInit+0x2b8>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c4:	b004      	add	sp, #16
 80062c6:	4770      	bx	lr
 80062c8:	803c3800 	.word	0x803c3800
 80062cc:	40000004 	.word	0x40000004

080062d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	019b      	lsls	r3, r3, #6
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3301      	adds	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <USB_FlushTxFifo+0x48>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e006      	b.n	800630a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b20      	cmp	r3, #32
 8006306:	d0f0      	beq.n	80062ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	00030d40 	.word	0x00030d40

0800631c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2210      	movs	r2, #16
 800632c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <USB_FlushRxFifo+0x40>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d901      	bls.n	8006340 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b10      	cmp	r3, #16
 800634a:	d0f0      	beq.n	800632e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	00030d40 	.word	0x00030d40

08006360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006380:	4313      	orrs	r3, r2
 8006382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b087      	sub	sp, #28
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0306 	and.w	r3, r3, #6
 80063aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	e00a      	b.n	80063ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d002      	beq.n	80063c4 <USB_GetDevSpeed+0x32>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d102      	bne.n	80063ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063c4:	2302      	movs	r3, #2
 80063c6:	75fb      	strb	r3, [r7, #23]
 80063c8:	e001      	b.n	80063ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063ca:	230f      	movs	r3, #15
 80063cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d139      	bne.n	800646c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006416:	4313      	orrs	r3, r2
 8006418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d153      	bne.n	80064d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	78db      	ldrb	r3, [r3, #3]
 800644a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800644c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	059b      	lsls	r3, r3, #22
 8006452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006454:	431a      	orrs	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	0159      	lsls	r1, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	440b      	add	r3, r1
 800645e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006462:	4619      	mov	r1, r3
 8006464:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <USB_ActivateEndpoint+0x10c>)
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]
 800646a:	e035      	b.n	80064d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648a:	4313      	orrs	r3, r2
 800648c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d119      	bne.n	80064d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	78db      	ldrb	r3, [r3, #3]
 80064be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064c0:	430b      	orrs	r3, r1
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	0159      	lsls	r1, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	440b      	add	r3, r1
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	4619      	mov	r1, r3
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <USB_ActivateEndpoint+0x10c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	10008000 	.word	0x10008000

080064ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d161      	bne.n	80065cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800651e:	d11f      	bne.n	8006560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800653e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f303 	lsl.w	r3, r1, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4013      	ands	r3, r2
 8006582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	2101      	movs	r1, #1
 8006596:	fa01 f303 	lsl.w	r3, r1, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4013      	ands	r3, r2
 80065a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	0159      	lsls	r1, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	440b      	add	r3, r1
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	4619      	mov	r1, r3
 80065c4:	4b35      	ldr	r3, [pc, #212]	; (800669c <USB_DeactivateEndpoint+0x1b0>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]
 80065ca:	e060      	b.n	800668e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d11f      	bne.n	8006624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	43db      	mvns	r3, r3
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006644:	4013      	ands	r3, r2
 8006646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	2101      	movs	r1, #1
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	43db      	mvns	r3, r3
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006668:	4013      	ands	r3, r2
 800666a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	0159      	lsls	r1, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	440b      	add	r3, r1
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	4619      	mov	r1, r3
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <USB_DeactivateEndpoint+0x1b4>)
 800668a:	4013      	ands	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	ec337800 	.word	0xec337800
 80066a0:	eff37800 	.word	0xeff37800

080066a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	; 0x28
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	f040 8163 	bne.w	800698c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d132      	bne.n	8006734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	0159      	lsls	r1, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	440b      	add	r3, r1
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	4619      	mov	r1, r3
 80066ea:	4ba5      	ldr	r3, [pc, #660]	; (8006980 <USB_EPStartXfer+0x2dc>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800670e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	0159      	lsls	r1, r3, #5
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	440b      	add	r3, r1
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	4619      	mov	r1, r3
 800672c:	4b95      	ldr	r3, [pc, #596]	; (8006984 <USB_EPStartXfer+0x2e0>)
 800672e:	4013      	ands	r3, r2
 8006730:	610b      	str	r3, [r1, #16]
 8006732:	e074      	b.n	800681e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	0159      	lsls	r1, r3, #5
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	440b      	add	r3, r1
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	4619      	mov	r1, r3
 8006750:	4b8c      	ldr	r3, [pc, #560]	; (8006984 <USB_EPStartXfer+0x2e0>)
 8006752:	4013      	ands	r3, r2
 8006754:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	0159      	lsls	r1, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	440b      	add	r3, r1
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	4619      	mov	r1, r3
 8006772:	4b83      	ldr	r3, [pc, #524]	; (8006980 <USB_EPStartXfer+0x2dc>)
 8006774:	4013      	ands	r3, r2
 8006776:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6959      	ldr	r1, [r3, #20]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	440b      	add	r3, r1
 8006790:	1e59      	subs	r1, r3, #1
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	fbb1 f3f3 	udiv	r3, r1, r3
 800679a:	04d9      	lsls	r1, r3, #19
 800679c:	4b7a      	ldr	r3, [pc, #488]	; (8006988 <USB_EPStartXfer+0x2e4>)
 800679e:	400b      	ands	r3, r1
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	0148      	lsls	r0, r1, #5
 80067a4:	69f9      	ldr	r1, [r7, #28]
 80067a6:	4401      	add	r1, r0
 80067a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ac:	4313      	orrs	r3, r2
 80067ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	0148      	lsls	r0, r1, #5
 80067ca:	69f9      	ldr	r1, [r7, #28]
 80067cc:	4401      	add	r1, r0
 80067ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067d2:	4313      	orrs	r3, r2
 80067d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d11f      	bne.n	800681e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006818:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800681c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d14b      	bne.n	80068bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	78db      	ldrb	r3, [r3, #3]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d128      	bne.n	800689a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d110      	bne.n	800687a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e00f      	b.n	800689a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e133      	b.n	8006b24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	78db      	ldrb	r3, [r3, #3]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d015      	beq.n	8006910 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 811b 	beq.w	8006b24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	2101      	movs	r1, #1
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690a:	4313      	orrs	r3, r2
 800690c:	634b      	str	r3, [r1, #52]	; 0x34
 800690e:	e109      	b.n	8006b24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d110      	bne.n	8006942 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e00f      	b.n	8006962 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006960:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	68d9      	ldr	r1, [r3, #12]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	b298      	uxth	r0, r3
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	4603      	mov	r3, r0
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fa38 	bl	8006dec <USB_WritePacket>
 800697c:	e0d2      	b.n	8006b24 <USB_EPStartXfer+0x480>
 800697e:	bf00      	nop
 8006980:	e007ffff 	.word	0xe007ffff
 8006984:	fff80000 	.word	0xfff80000
 8006988:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	0159      	lsls	r1, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	4619      	mov	r1, r3
 80069a8:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <USB_EPStartXfer+0x48c>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	0159      	lsls	r1, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	440b      	add	r3, r1
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	4619      	mov	r1, r3
 80069ca:	4b5a      	ldr	r3, [pc, #360]	; (8006b34 <USB_EPStartXfer+0x490>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d123      	bne.n	8006a20 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	69b9      	ldr	r1, [r7, #24]
 80069f0:	0148      	lsls	r0, r1, #5
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	4401      	add	r1, r0
 80069f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1c:	6113      	str	r3, [r2, #16]
 8006a1e:	e033      	b.n	8006a88 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	1e5a      	subs	r2, r3, #1
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	8afb      	ldrh	r3, [r7, #22]
 8006a46:	04d9      	lsls	r1, r3, #19
 8006a48:	4b3b      	ldr	r3, [pc, #236]	; (8006b38 <USB_EPStartXfer+0x494>)
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	0148      	lsls	r0, r1, #5
 8006a50:	69f9      	ldr	r1, [r7, #28]
 8006a52:	4401      	add	r1, r0
 8006a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	8af9      	ldrh	r1, [r7, #22]
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	0148      	lsls	r0, r1, #5
 8006a7c:	69f9      	ldr	r1, [r7, #28]
 8006a7e:	4401      	add	r1, r0
 8006a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a84:	4313      	orrs	r3, r2
 8006a86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d10d      	bne.n	8006aaa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	68d9      	ldr	r1, [r3, #12]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d128      	bne.n	8006b04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e00f      	b.n	8006b04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	fff80000 	.word	0xfff80000
 8006b34:	e007ffff 	.word	0xe007ffff
 8006b38:	1ff80000 	.word	0x1ff80000

08006b3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	f040 80cd 	bne.w	8006cf8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d132      	bne.n	8006bcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	0159      	lsls	r1, r3, #5
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	440b      	add	r3, r1
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	4619      	mov	r1, r3
 8006b82:	4b98      	ldr	r3, [pc, #608]	; (8006de4 <USB_EP0StartXfer+0x2a8>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	0159      	lsls	r1, r3, #5
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	440b      	add	r3, r1
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4b88      	ldr	r3, [pc, #544]	; (8006de8 <USB_EP0StartXfer+0x2ac>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
 8006bca:	e04e      	b.n	8006c6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	0159      	lsls	r1, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	440b      	add	r3, r1
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	4619      	mov	r1, r3
 8006be8:	4b7f      	ldr	r3, [pc, #508]	; (8006de8 <USB_EP0StartXfer+0x2ac>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	0159      	lsls	r1, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	440b      	add	r3, r1
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4b76      	ldr	r3, [pc, #472]	; (8006de4 <USB_EP0StartXfer+0x2a8>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d903      	bls.n	8006c24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c5a:	6939      	ldr	r1, [r7, #16]
 8006c5c:	0148      	lsls	r0, r1, #5
 8006c5e:	6979      	ldr	r1, [r7, #20]
 8006c60:	4401      	add	r1, r0
 8006c62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c66:	4313      	orrs	r3, r2
 8006c68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11e      	bne.n	8006cae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	461a      	mov	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	e092      	b.n	8006dd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ccc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d07e      	beq.n	8006dd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	634b      	str	r3, [r1, #52]	; 0x34
 8006cf6:	e06d      	b.n	8006dd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	0159      	lsls	r1, r3, #5
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	4619      	mov	r1, r3
 8006d14:	4b34      	ldr	r3, [pc, #208]	; (8006de8 <USB_EP0StartXfer+0x2ac>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	0159      	lsls	r1, r3, #5
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	440b      	add	r3, r1
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	4619      	mov	r1, r3
 8006d36:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <USB_EP0StartXfer+0x2a8>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d82:	6939      	ldr	r1, [r7, #16]
 8006d84:	0148      	lsls	r0, r1, #5
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	4401      	add	r1, r0
 8006d8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10d      	bne.n	8006db4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	460a      	mov	r2, r1
 8006db2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	e007ffff 	.word	0xe007ffff
 8006de8:	fff80000 	.word	0xfff80000

08006dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d123      	bne.n	8006e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e12:	88bb      	ldrh	r3, [r7, #4]
 8006e14:	3303      	adds	r3, #3
 8006e16:	089b      	lsrs	r3, r3, #2
 8006e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e018      	b.n	8006e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	031a      	lsls	r2, r3, #12
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d3e2      	bcc.n	8006e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3724      	adds	r7, #36	; 0x24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b08b      	sub	sp, #44	; 0x2c
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	623b      	str	r3, [r7, #32]
 8006e92:	e014      	b.n	8006ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	3301      	adds	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3e6      	bcc.n	8006e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ec6:	8bfb      	ldrh	r3, [r7, #30]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01e      	beq.n	8006f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	3301      	adds	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006efe:	8bfb      	ldrh	r3, [r7, #30]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f04:	8bfb      	ldrh	r3, [r7, #30]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ea      	bne.n	8006ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	372c      	adds	r7, #44	; 0x2c
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d12c      	bne.n	8006f8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	db12      	blt.n	8006f6c <USB_EPSetStall+0x54>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00f      	beq.n	8006f6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e02b      	b.n	8006fe6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db12      	blt.n	8006fc6 <USB_EPSetStall+0xae>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00f      	beq.n	8006fc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fe4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d128      	bne.n	8007062 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800702e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d003      	beq.n	8007040 <USB_EPClearStall+0x4c>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	78db      	ldrb	r3, [r3, #3]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d138      	bne.n	80070b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e027      	b.n	80070b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	78db      	ldrb	r3, [r3, #3]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d003      	beq.n	8007092 <USB_EPClearStall+0x9e>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d10f      	bne.n	80070b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007126:	f023 0303 	bic.w	r3, r3, #3
 800712a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713a:	f023 0302 	bic.w	r3, r3, #2
 800713e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071a8:	68fb      	ldr	r3, [r7, #12]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4013      	ands	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0c1b      	lsrs	r3, r3, #16
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	4013      	ands	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	b29b      	uxth	r3, r3
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4013      	ands	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800724c:	68bb      	ldr	r3, [r7, #8]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	b2db      	uxtb	r3, r3
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a8:	68bb      	ldr	r3, [r7, #8]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0301 	and.w	r3, r3, #1
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	4619      	mov	r1, r3
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <USB_ActivateSetup+0x44>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	fffff800 	.word	0xfffff800

0800731c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	460b      	mov	r3, r1
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	333c      	adds	r3, #60	; 0x3c
 8007332:	3304      	adds	r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4a26      	ldr	r2, [pc, #152]	; (80073d4 <USB_EP0_OutStart+0xb8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d90a      	bls.n	8007356 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007350:	d101      	bne.n	8007356 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e037      	b.n	80073c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007384:	f043 0318 	orr.w	r3, r3, #24
 8007388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800739c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d10f      	bne.n	80073c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	4f54300a 	.word	0x4f54300a

080073d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a13      	ldr	r2, [pc, #76]	; (800743c <USB_CoreReset+0x64>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e01b      	b.n	800742e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	daf2      	bge.n	80073e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f043 0201 	orr.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3301      	adds	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <USB_CoreReset+0x64>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e006      	b.n	800742e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d0f0      	beq.n	800740e <USB_CoreReset+0x36>

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	00030d40 	.word	0x00030d40

08007440 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800744c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007450:	f004 ff86 	bl	800c360 <USBD_static_malloc>
 8007454:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d105      	bne.n	8007468 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007464:	2302      	movs	r3, #2
 8007466:	e066      	b.n	8007536 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d119      	bne.n	80074ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747c:	2202      	movs	r2, #2
 800747e:	2181      	movs	r1, #129	; 0x81
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f004 fe4a 	bl	800c11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800748c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007490:	2202      	movs	r2, #2
 8007492:	2101      	movs	r1, #1
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f004 fe40 	bl	800c11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2210      	movs	r2, #16
 80074a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80074aa:	e016      	b.n	80074da <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	2202      	movs	r2, #2
 80074b0:	2181      	movs	r1, #129	; 0x81
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f004 fe31 	bl	800c11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	2202      	movs	r2, #2
 80074c2:	2101      	movs	r1, #1
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f004 fe28 	bl	800c11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2210      	movs	r2, #16
 80074d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074da:	2308      	movs	r3, #8
 80074dc:	2203      	movs	r2, #3
 80074de:	2182      	movs	r1, #130	; 0x82
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f004 fe1a 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7c1b      	ldrb	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800751a:	2101      	movs	r1, #1
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f004 feeb 	bl	800c2f8 <USBD_LL_PrepareReceive>
 8007522:	e007      	b.n	8007534 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800752a:	2340      	movs	r3, #64	; 0x40
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f004 fee2 	bl	800c2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800754a:	2181      	movs	r1, #129	; 0x81
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f004 fe0a 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007558:	2101      	movs	r1, #1
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f004 fe03 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007568:	2182      	movs	r1, #130	; 0x82
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f004 fdfb 	bl	800c166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759a:	4618      	mov	r0, r3
 800759c:	f004 feee 	bl	800c37c <USBD_static_free>
    pdev->pClassData = NULL;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e0af      	b.n	800773c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d03f      	beq.n	8007668 <USBD_CDC_Setup+0xb4>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	f040 809f 	bne.w	800772c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d02e      	beq.n	8007654 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da16      	bge.n	800762e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800760c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	88d2      	ldrh	r2, [r2, #6]
 8007612:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	88db      	ldrh	r3, [r3, #6]
 8007618:	2b07      	cmp	r3, #7
 800761a:	bf28      	it	cs
 800761c:	2307      	movcs	r3, #7
 800761e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	89fa      	ldrh	r2, [r7, #14]
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fb19 	bl	8008c5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800762c:	e085      	b.n	800773a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785a      	ldrb	r2, [r3, #1]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	88db      	ldrh	r3, [r3, #6]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007644:	6939      	ldr	r1, [r7, #16]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	461a      	mov	r2, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fb32 	bl	8008cb6 <USBD_CtlPrepareRx>
      break;
 8007652:	e072      	b.n	800773a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	7850      	ldrb	r0, [r2, #1]
 8007660:	2200      	movs	r2, #0
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	4798      	blx	r3
      break;
 8007666:	e068      	b.n	800773a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b0b      	cmp	r3, #11
 800766e:	d852      	bhi.n	8007716 <USBD_CDC_Setup+0x162>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <USBD_CDC_Setup+0xc4>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076a9 	.word	0x080076a9
 800767c:	08007725 	.word	0x08007725
 8007680:	08007717 	.word	0x08007717
 8007684:	08007717 	.word	0x08007717
 8007688:	08007717 	.word	0x08007717
 800768c:	08007717 	.word	0x08007717
 8007690:	08007717 	.word	0x08007717
 8007694:	08007717 	.word	0x08007717
 8007698:	08007717 	.word	0x08007717
 800769c:	08007717 	.word	0x08007717
 80076a0:	080076d3 	.word	0x080076d3
 80076a4:	080076fd 	.word	0x080076fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d107      	bne.n	80076c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076b4:	f107 030a 	add.w	r3, r7, #10
 80076b8:	2202      	movs	r2, #2
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 face 	bl	8008c5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076c2:	e032      	b.n	800772a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fa58 	bl	8008b7c <USBD_CtlError>
            ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	75fb      	strb	r3, [r7, #23]
          break;
 80076d0:	e02b      	b.n	800772a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d107      	bne.n	80076ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076de:	f107 030d 	add.w	r3, r7, #13
 80076e2:	2201      	movs	r2, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 fab9 	bl	8008c5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076ec:	e01d      	b.n	800772a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fa43 	bl	8008b7c <USBD_CtlError>
            ret = USBD_FAIL;
 80076f6:	2303      	movs	r3, #3
 80076f8:	75fb      	strb	r3, [r7, #23]
          break;
 80076fa:	e016      	b.n	800772a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b03      	cmp	r3, #3
 8007706:	d00f      	beq.n	8007728 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 fa36 	bl	8008b7c <USBD_CtlError>
            ret = USBD_FAIL;
 8007710:	2303      	movs	r3, #3
 8007712:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007714:	e008      	b.n	8007728 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fa2f 	bl	8008b7c <USBD_CtlError>
          ret = USBD_FAIL;
 800771e:	2303      	movs	r3, #3
 8007720:	75fb      	strb	r3, [r7, #23]
          break;
 8007722:	e002      	b.n	800772a <USBD_CDC_Setup+0x176>
          break;
 8007724:	bf00      	nop
 8007726:	e008      	b.n	800773a <USBD_CDC_Setup+0x186>
          break;
 8007728:	bf00      	nop
      }
      break;
 800772a:	e006      	b.n	800773a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa24 	bl	8008b7c <USBD_CtlError>
      ret = USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	75fb      	strb	r3, [r7, #23]
      break;
 8007738:	bf00      	nop
  }

  return (uint8_t)ret;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007756:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	e04f      	b.n	8007806 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	3318      	adds	r3, #24
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d029      	beq.n	80077d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	3318      	adds	r3, #24
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	78f9      	ldrb	r1, [r7, #3]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	460b      	mov	r3, r1
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4403      	add	r3, r0
 80077a4:	3344      	adds	r3, #68	; 0x44
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d110      	bne.n	80077d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	3318      	adds	r3, #24
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077ca:	78f9      	ldrb	r1, [r7, #3]
 80077cc:	2300      	movs	r3, #0
 80077ce:	2200      	movs	r2, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f004 fd70 	bl	800c2b6 <USBD_LL_Transmit>
 80077d6:	e015      	b.n	8007804 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007820:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	e015      	b.n	800785c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f004 fd80 	bl	800c33a <USBD_LL_GetRxDataSize>
 800783a:	4602      	mov	r2, r0
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007856:	4611      	mov	r1, r2
 8007858:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007872:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800787a:	2303      	movs	r3, #3
 800787c:	e01b      	b.n	80078b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d015      	beq.n	80078b4 <USBD_CDC_EP0_RxReady+0x50>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800788e:	2bff      	cmp	r3, #255	; 0xff
 8007890:	d010      	beq.n	80078b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80078a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078a8:	b292      	uxth	r2, r2
 80078aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	22ff      	movs	r2, #255	; 0xff
 80078b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2243      	movs	r2, #67	; 0x43
 80078cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80078ce:	4b03      	ldr	r3, [pc, #12]	; (80078dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	24000098 	.word	0x24000098

080078e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2243      	movs	r2, #67	; 0x43
 80078ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80078ee:	4b03      	ldr	r3, [pc, #12]	; (80078fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	24000054 	.word	0x24000054

08007900 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2243      	movs	r2, #67	; 0x43
 800790c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800790e:	4b03      	ldr	r3, [pc, #12]	; (800791c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	240000dc 	.word	0x240000dc

08007920 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220a      	movs	r2, #10
 800792c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	; (800793c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	24000010 	.word	0x24000010

08007940 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	e004      	b.n	800795e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800796a:	b480      	push	{r7}
 800796c:	b087      	sub	sp, #28
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800797c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e008      	b.n	800799a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80079be:	2303      	movs	r3, #3
 80079c0:	e004      	b.n	80079cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e01a      	b.n	8007a30 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d114      	bne.n	8007a2e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a22:	2181      	movs	r1, #129	; 0x81
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f004 fc46 	bl	800c2b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e016      	b.n	8007a84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7c1b      	ldrb	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a68:	2101      	movs	r1, #1
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f004 fc44 	bl	800c2f8 <USBD_LL_PrepareReceive>
 8007a70:	e007      	b.n	8007a82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f004 fc3b 	bl	800c2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e01f      	b.n	8007ae4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	79fa      	ldrb	r2, [r7, #7]
 8007ad6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f004 fab3 	bl	800c044 <USBD_LL_Init>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e016      	b.n	8007b32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	f107 020e 	add.w	r2, r7, #14
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	4602      	mov	r2, r0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f004 face 	bl	800c0e4 <USBD_LL_Start>
 8007b48:	4603      	mov	r3, r0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b74:	2303      	movs	r3, #3
 8007b76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	78fa      	ldrb	r2, [r7, #3]
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
  }

  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 ff90 	bl	8008b08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c04:	f003 031f 	and.w	r3, r3, #31
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d01a      	beq.n	8007c42 <USBD_LL_SetupStage+0x72>
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d822      	bhi.n	8007c56 <USBD_LL_SetupStage+0x86>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <USBD_LL_SetupStage+0x4a>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d00a      	beq.n	8007c2e <USBD_LL_SetupStage+0x5e>
 8007c18:	e01d      	b.n	8007c56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa62 	bl	80080ec <USBD_StdDevReq>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2c:	e020      	b.n	8007c70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fac6 	bl	80081c8 <USBD_StdItfReq>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c40:	e016      	b.n	8007c70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb05 	bl	800825a <USBD_StdEPReq>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	e00c      	b.n	8007c70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f004 fa9d 	bl	800c1a4 <USBD_LL_StallEP>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6e:	bf00      	nop
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	460b      	mov	r3, r1
 8007c84:	607a      	str	r2, [r7, #4]
 8007c86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d138      	bne.n	8007d00 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d14a      	bne.n	8007d36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d913      	bls.n	8007cd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bf28      	it	cs
 8007cc6:	4613      	movcs	r3, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f001 f80f 	bl	8008cf0 <USBD_CtlContinueRx>
 8007cd2:	e030      	b.n	8007d36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d10b      	bne.n	8007cf8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f001 f80a 	bl	8008d12 <USBD_CtlSendStatus>
 8007cfe:	e01a      	b.n	8007d36 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d114      	bne.n	8007d36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00e      	beq.n	8007d36 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	7afa      	ldrb	r2, [r7, #11]
 8007d22:	4611      	mov	r1, r2
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	e000      	b.n	8007d38 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d16b      	bne.n	8007e2c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3314      	adds	r3, #20
 8007d58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d156      	bne.n	8007e12 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d914      	bls.n	8007d9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	1ad2      	subs	r2, r2, r3
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	461a      	mov	r2, r3
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 ff84 	bl	8008c94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f004 fab0 	bl	800c2f8 <USBD_LL_PrepareReceive>
 8007d98:	e03b      	b.n	8007e12 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d11c      	bne.n	8007de0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d316      	bcc.n	8007de0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d20f      	bcs.n	8007de0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 ff65 	bl	8008c94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f004 fa8d 	bl	800c2f8 <USBD_LL_PrepareReceive>
 8007dde:	e018      	b.n	8007e12 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d10b      	bne.n	8007e04 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e04:	2180      	movs	r1, #128	; 0x80
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f004 f9cc 	bl	800c1a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 ff93 	bl	8008d38 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d122      	bne.n	8007e62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fe98 	bl	8007b52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e2a:	e01a      	b.n	8007e62 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d114      	bne.n	8007e62 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	7afa      	ldrb	r2, [r7, #11]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	4798      	blx	r3
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	e000      	b.n	8007e64 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e02f      	b.n	8007f00 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00f      	beq.n	8007eca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6852      	ldr	r2, [r2, #4]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f004 f922 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2180      	movs	r1, #128	; 0x80
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f004 f914 	bl	800c11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2240      	movs	r2, #64	; 0x40
 8007efc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d106      	bne.n	8007f76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e012      	b.n	8007fc0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d10b      	bne.n	8007fbe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e014      	b.n	800800c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d10d      	bne.n	800800a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	e014      	b.n	8008058 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b03      	cmp	r3, #3
 8008038:	d10d      	bne.n	8008056 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6852      	ldr	r2, [r2, #4]
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	4611      	mov	r1, r2
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
  }

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b087      	sub	sp, #28
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3301      	adds	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080cc:	8a3b      	ldrh	r3, [r7, #16]
 80080ce:	021b      	lsls	r3, r3, #8
 80080d0:	b21a      	sxth	r2, r3
 80080d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b21b      	sxth	r3, r3
 80080da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080dc:	89fb      	ldrh	r3, [r7, #14]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d005      	beq.n	8008112 <USBD_StdDevReq+0x26>
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d853      	bhi.n	80081b2 <USBD_StdDevReq+0xc6>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <USBD_StdDevReq+0x3a>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d14f      	bne.n	80081b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
      break;
 8008124:	e04a      	b.n	80081bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b09      	cmp	r3, #9
 800812c:	d83b      	bhi.n	80081a6 <USBD_StdDevReq+0xba>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_StdDevReq+0x48>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008189 	.word	0x08008189
 8008138:	0800819d 	.word	0x0800819d
 800813c:	080081a7 	.word	0x080081a7
 8008140:	08008193 	.word	0x08008193
 8008144:	080081a7 	.word	0x080081a7
 8008148:	08008167 	.word	0x08008167
 800814c:	0800815d 	.word	0x0800815d
 8008150:	080081a7 	.word	0x080081a7
 8008154:	0800817f 	.word	0x0800817f
 8008158:	08008171 	.word	0x08008171
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9de 	bl	8008520 <USBD_GetDescriptor>
          break;
 8008164:	e024      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fb43 	bl	80087f4 <USBD_SetAddress>
          break;
 800816e:	e01f      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fb82 	bl	800887c <USBD_SetConfig>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]
          break;
 800817c:	e018      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fc21 	bl	80089c8 <USBD_GetConfig>
          break;
 8008186:	e013      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fc52 	bl	8008a34 <USBD_GetStatus>
          break;
 8008190:	e00e      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fc81 	bl	8008a9c <USBD_SetFeature>
          break;
 800819a:	e009      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc90 	bl	8008ac4 <USBD_ClrFeature>
          break;
 80081a4:	e004      	b.n	80081b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fce7 	bl	8008b7c <USBD_CtlError>
          break;
 80081ae:	bf00      	nop
      }
      break;
 80081b0:	e004      	b.n	80081bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fce1 	bl	8008b7c <USBD_CtlError>
      break;
 80081ba:	bf00      	nop
  }

  return ret;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop

080081c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d005      	beq.n	80081ee <USBD_StdItfReq+0x26>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d82f      	bhi.n	8008246 <USBD_StdItfReq+0x7e>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <USBD_StdItfReq+0x26>
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d12b      	bne.n	8008246 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d81d      	bhi.n	8008238 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	889b      	ldrh	r3, [r3, #4]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b01      	cmp	r3, #1
 8008204:	d813      	bhi.n	800822e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d110      	bne.n	8008242 <USBD_StdItfReq+0x7a>
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10d      	bne.n	8008242 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fd73 	bl	8008d12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800822c:	e009      	b.n	8008242 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fca3 	bl	8008b7c <USBD_CtlError>
          break;
 8008236:	e004      	b.n	8008242 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc9e 	bl	8008b7c <USBD_CtlError>
          break;
 8008240:	e000      	b.n	8008244 <USBD_StdItfReq+0x7c>
          break;
 8008242:	bf00      	nop
      }
      break;
 8008244:	e004      	b.n	8008250 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc97 	bl	8008b7c <USBD_CtlError>
      break;
 800824e:	bf00      	nop
  }

  return ret;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	889b      	ldrh	r3, [r3, #4]
 800826c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	d007      	beq.n	800828a <USBD_StdEPReq+0x30>
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	f200 8145 	bhi.w	800850a <USBD_StdEPReq+0x2b0>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <USBD_StdEPReq+0x44>
 8008284:	2b20      	cmp	r3, #32
 8008286:	f040 8140 	bne.w	800850a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e13a      	b.n	8008514 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d007      	beq.n	80082b6 <USBD_StdEPReq+0x5c>
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f300 8129 	bgt.w	80084fe <USBD_StdEPReq+0x2a4>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d07f      	beq.n	80083b0 <USBD_StdEPReq+0x156>
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d03c      	beq.n	800832e <USBD_StdEPReq+0xd4>
 80082b4:	e123      	b.n	80084fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d002      	beq.n	80082c8 <USBD_StdEPReq+0x6e>
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d016      	beq.n	80082f4 <USBD_StdEPReq+0x9a>
 80082c6:	e02c      	b.n	8008322 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00d      	beq.n	80082ea <USBD_StdEPReq+0x90>
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b80      	cmp	r3, #128	; 0x80
 80082d2:	d00a      	beq.n	80082ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f003 ff63 	bl	800c1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f003 ff5f 	bl	800c1a4 <USBD_LL_StallEP>
 80082e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082e8:	e020      	b.n	800832c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc45 	bl	8008b7c <USBD_CtlError>
              break;
 80082f2:	e01b      	b.n	800832c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <USBD_StdEPReq+0xc0>
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d008      	beq.n	800831a <USBD_StdEPReq+0xc0>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	88db      	ldrh	r3, [r3, #6]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f003 ff45 	bl	800c1a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fcf9 	bl	8008d12 <USBD_CtlSendStatus>

              break;
 8008320:	e004      	b.n	800832c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc29 	bl	8008b7c <USBD_CtlError>
              break;
 800832a:	bf00      	nop
          }
          break;
 800832c:	e0ec      	b.n	8008508 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USBD_StdEPReq+0xe6>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d016      	beq.n	800836c <USBD_StdEPReq+0x112>
 800833e:	e030      	b.n	80083a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00d      	beq.n	8008362 <USBD_StdEPReq+0x108>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b80      	cmp	r3, #128	; 0x80
 800834a:	d00a      	beq.n	8008362 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f003 ff27 	bl	800c1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f003 ff23 	bl	800c1a4 <USBD_LL_StallEP>
 800835e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008360:	e025      	b.n	80083ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc09 	bl	8008b7c <USBD_CtlError>
              break;
 800836a:	e020      	b.n	80083ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11b      	bne.n	80083ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f003 ff2d 	bl	800c1e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fcc2 	bl	8008d12 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80083a0:	e004      	b.n	80083ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fbe9 	bl	8008b7c <USBD_CtlError>
              break;
 80083aa:	e000      	b.n	80083ae <USBD_StdEPReq+0x154>
              break;
 80083ac:	bf00      	nop
          }
          break;
 80083ae:	e0ab      	b.n	8008508 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d002      	beq.n	80083c2 <USBD_StdEPReq+0x168>
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d032      	beq.n	8008426 <USBD_StdEPReq+0x1cc>
 80083c0:	e097      	b.n	80084f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <USBD_StdEPReq+0x17e>
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b80      	cmp	r3, #128	; 0x80
 80083cc:	d004      	beq.n	80083d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fbd3 	bl	8008b7c <USBD_CtlError>
                break;
 80083d6:	e091      	b.n	80084fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da0b      	bge.n	80083f8 <USBD_StdEPReq+0x19e>
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	3310      	adds	r3, #16
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	e00b      	b.n	8008410 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2202      	movs	r2, #2
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fc1d 	bl	8008c5e <USBD_CtlSendData>
              break;
 8008424:	e06a      	b.n	80084fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842a:	2b00      	cmp	r3, #0
 800842c:	da11      	bge.n	8008452 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 020f 	and.w	r2, r3, #15
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	440b      	add	r3, r1
 8008440:	3324      	adds	r3, #36	; 0x24
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d117      	bne.n	8008478 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fb96 	bl	8008b7c <USBD_CtlError>
                  break;
 8008450:	e054      	b.n	80084fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	f003 020f 	and.w	r2, r3, #15
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	440b      	add	r3, r1
 8008464:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d104      	bne.n	8008478 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb83 	bl	8008b7c <USBD_CtlError>
                  break;
 8008476:	e041      	b.n	80084fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	da0b      	bge.n	8008498 <USBD_StdEPReq+0x23e>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	3310      	adds	r3, #16
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	4413      	add	r3, r2
 8008494:	3304      	adds	r3, #4
 8008496:	e00b      	b.n	80084b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	3304      	adds	r3, #4
 80084b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <USBD_StdEPReq+0x264>
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d103      	bne.n	80084c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e00e      	b.n	80084e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f003 fea8 	bl	800c220 <USBD_LL_IsStallEP>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2201      	movs	r2, #1
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	e002      	b.n	80084e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2202      	movs	r2, #2
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fbb7 	bl	8008c5e <USBD_CtlSendData>
              break;
 80084f0:	e004      	b.n	80084fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb41 	bl	8008b7c <USBD_CtlError>
              break;
 80084fa:	bf00      	nop
          }
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fb3b 	bl	8008b7c <USBD_CtlError>
          break;
 8008506:	bf00      	nop
      }
      break;
 8008508:	e004      	b.n	8008514 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fb35 	bl	8008b7c <USBD_CtlError>
      break;
 8008512:	bf00      	nop
  }

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	2b06      	cmp	r3, #6
 8008542:	f200 8128 	bhi.w	8008796 <USBD_GetDescriptor+0x276>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <USBD_GetDescriptor+0x2c>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008569 	.word	0x08008569
 8008550:	08008581 	.word	0x08008581
 8008554:	080085c1 	.word	0x080085c1
 8008558:	08008797 	.word	0x08008797
 800855c:	08008797 	.word	0x08008797
 8008560:	08008737 	.word	0x08008737
 8008564:	08008763 	.word	0x08008763
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	7c12      	ldrb	r2, [r2, #16]
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	4610      	mov	r0, r2
 800857a:	4798      	blx	r3
 800857c:	60f8      	str	r0, [r7, #12]
      break;
 800857e:	e112      	b.n	80087a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	7c1b      	ldrb	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10d      	bne.n	80085a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	f107 0208 	add.w	r2, r7, #8
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
 8008598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3301      	adds	r3, #1
 800859e:	2202      	movs	r2, #2
 80085a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085a2:	e100      	b.n	80087a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	f107 0208 	add.w	r2, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
      break;
 80085be:	e0f2      	b.n	80087a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	885b      	ldrh	r3, [r3, #2]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	f200 80ac 	bhi.w	8008724 <USBD_GetDescriptor+0x204>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_GetDescriptor+0xb4>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085ed 	.word	0x080085ed
 80085d8:	08008621 	.word	0x08008621
 80085dc:	08008655 	.word	0x08008655
 80085e0:	08008689 	.word	0x08008689
 80085e4:	080086bd 	.word	0x080086bd
 80085e8:	080086f1 	.word	0x080086f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e091      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fab2 	bl	8008b7c <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e089      	b.n	8008734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e077      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa98 	bl	8008b7c <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e06f      	b.n	8008734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e05d      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa7e 	bl	8008b7c <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e055      	b.n	8008734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e043      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa64 	bl	8008b7c <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e03b      	b.n	8008734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	7c12      	ldrb	r2, [r2, #16]
 80086d4:	f107 0108 	add.w	r1, r7, #8
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
 80086dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086de:	e029      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa4a 	bl	8008b7c <USBD_CtlError>
            err++;
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	3301      	adds	r3, #1
 80086ec:	72fb      	strb	r3, [r7, #11]
          break;
 80086ee:	e021      	b.n	8008734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	7c12      	ldrb	r2, [r2, #16]
 8008708:	f107 0108 	add.w	r1, r7, #8
 800870c:	4610      	mov	r0, r2
 800870e:	4798      	blx	r3
 8008710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008712:	e00f      	b.n	8008734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa30 	bl	8008b7c <USBD_CtlError>
            err++;
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	3301      	adds	r3, #1
 8008720:	72fb      	strb	r3, [r7, #11]
          break;
 8008722:	e007      	b.n	8008734 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa28 	bl	8008b7c <USBD_CtlError>
          err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008732:	bf00      	nop
      }
      break;
 8008734:	e037      	b.n	80087a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7c1b      	ldrb	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008746:	f107 0208 	add.w	r2, r7, #8
 800874a:	4610      	mov	r0, r2
 800874c:	4798      	blx	r3
 800874e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008750:	e029      	b.n	80087a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa11 	bl	8008b7c <USBD_CtlError>
        err++;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	3301      	adds	r3, #1
 800875e:	72fb      	strb	r3, [r7, #11]
      break;
 8008760:	e021      	b.n	80087a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7c1b      	ldrb	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10d      	bne.n	8008786 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	f107 0208 	add.w	r2, r7, #8
 8008776:	4610      	mov	r0, r2
 8008778:	4798      	blx	r3
 800877a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	2207      	movs	r2, #7
 8008782:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008784:	e00f      	b.n	80087a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f9f7 	bl	8008b7c <USBD_CtlError>
        err++;
 800878e:	7afb      	ldrb	r3, [r7, #11]
 8008790:	3301      	adds	r3, #1
 8008792:	72fb      	strb	r3, [r7, #11]
      break;
 8008794:	e007      	b.n	80087a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f9ef 	bl	8008b7c <USBD_CtlError>
      err++;
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	3301      	adds	r3, #1
 80087a2:	72fb      	strb	r3, [r7, #11]
      break;
 80087a4:	bf00      	nop
  }

  if (err != 0U)
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d11e      	bne.n	80087ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	88db      	ldrh	r3, [r3, #6]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d016      	beq.n	80087e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00e      	beq.n	80087d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	88da      	ldrh	r2, [r3, #6]
 80087be:	893b      	ldrh	r3, [r7, #8]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	bf28      	it	cs
 80087c4:	4613      	movcs	r3, r2
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087ca:	893b      	ldrh	r3, [r7, #8]
 80087cc:	461a      	mov	r2, r3
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fa44 	bl	8008c5e <USBD_CtlSendData>
 80087d6:	e009      	b.n	80087ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f9ce 	bl	8008b7c <USBD_CtlError>
 80087e0:	e004      	b.n	80087ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa95 	bl	8008d12 <USBD_CtlSendStatus>
 80087e8:	e000      	b.n	80087ec <USBD_GetDescriptor+0x2cc>
    return;
 80087ea:	bf00      	nop
  }
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	889b      	ldrh	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d131      	bne.n	800886a <USBD_SetAddress+0x76>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d12d      	bne.n	800886a <USBD_SetAddress+0x76>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	2b7f      	cmp	r3, #127	; 0x7f
 8008814:	d829      	bhi.n	800886a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b03      	cmp	r3, #3
 800882c:	d104      	bne.n	8008838 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f9a3 	bl	8008b7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	e01d      	b.n	8008874 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7bfa      	ldrb	r2, [r7, #15]
 800883c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f003 fd17 	bl	800c278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa61 	bl	8008d12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885e:	e009      	b.n	8008874 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008868:	e004      	b.n	8008874 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f985 	bl	8008b7c <USBD_CtlError>
  }
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	b2da      	uxtb	r2, r3
 8008890:	4b4c      	ldr	r3, [pc, #304]	; (80089c4 <USBD_SetConfig+0x148>)
 8008892:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008894:	4b4b      	ldr	r3, [pc, #300]	; (80089c4 <USBD_SetConfig+0x148>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d905      	bls.n	80088a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f96c 	bl	8008b7c <USBD_CtlError>
    return USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e088      	b.n	80089ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <USBD_SetConfig+0x3e>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d025      	beq.n	8008904 <USBD_SetConfig+0x88>
 80088b8:	e071      	b.n	800899e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088ba:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <USBD_SetConfig+0x148>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01c      	beq.n	80088fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80088c2:	4b40      	ldr	r3, [pc, #256]	; (80089c4 <USBD_SetConfig+0x148>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088cc:	4b3d      	ldr	r3, [pc, #244]	; (80089c4 <USBD_SetConfig+0x148>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f948 	bl	8007b68 <USBD_SetClassConfig>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d004      	beq.n	80088ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f949 	bl	8008b7c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088ea:	e065      	b.n	80089b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fa10 	bl	8008d12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2203      	movs	r2, #3
 80088f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088fa:	e05d      	b.n	80089b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa08 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 8008902:	e059      	b.n	80089b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008904:	4b2f      	ldr	r3, [pc, #188]	; (80089c4 <USBD_SetConfig+0x148>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d112      	bne.n	8008932 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008914:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <USBD_SetConfig+0x148>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800891e:	4b29      	ldr	r3, [pc, #164]	; (80089c4 <USBD_SetConfig+0x148>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff f93b 	bl	8007ba0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9f1 	bl	8008d12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008930:	e042      	b.n	80089b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <USBD_SetConfig+0x148>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d02a      	beq.n	8008996 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff f929 	bl	8007ba0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800894e:	4b1d      	ldr	r3, [pc, #116]	; (80089c4 <USBD_SetConfig+0x148>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <USBD_SetConfig+0x148>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff f902 	bl	8007b68 <USBD_SetClassConfig>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00f      	beq.n	800898e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f903 	bl	8008b7c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff f90e 	bl	8007ba0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800898c:	e014      	b.n	80089b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9bf 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 8008994:	e010      	b.n	80089b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9bb 	bl	8008d12 <USBD_CtlSendStatus>
      break;
 800899c:	e00c      	b.n	80089b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f8eb 	bl	8008b7c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089a6:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <USBD_SetConfig+0x148>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff f8f7 	bl	8007ba0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	73fb      	strb	r3, [r7, #15]
      break;
 80089b6:	bf00      	nop
  }

  return ret;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	24000378 	.word	0x24000378

080089c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88db      	ldrh	r3, [r3, #6]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d004      	beq.n	80089e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f8cd 	bl	8008b7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089e2:	e023      	b.n	8008a2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	dc02      	bgt.n	80089f6 <USBD_GetConfig+0x2e>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dc03      	bgt.n	80089fc <USBD_GetConfig+0x34>
 80089f4:	e015      	b.n	8008a22 <USBD_GetConfig+0x5a>
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d00b      	beq.n	8008a12 <USBD_GetConfig+0x4a>
 80089fa:	e012      	b.n	8008a22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3308      	adds	r3, #8
 8008a06:	2201      	movs	r2, #1
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f927 	bl	8008c5e <USBD_CtlSendData>
        break;
 8008a10:	e00c      	b.n	8008a2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3304      	adds	r3, #4
 8008a16:	2201      	movs	r2, #1
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f91f 	bl	8008c5e <USBD_CtlSendData>
        break;
 8008a20:	e004      	b.n	8008a2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f8a9 	bl	8008b7c <USBD_CtlError>
        break;
 8008a2a:	bf00      	nop
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d81e      	bhi.n	8008a8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d004      	beq.n	8008a5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f890 	bl	8008b7c <USBD_CtlError>
        break;
 8008a5c:	e01a      	b.n	8008a94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f043 0202 	orr.w	r2, r3, #2
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	2202      	movs	r2, #2
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f8eb 	bl	8008c5e <USBD_CtlSendData>
      break;
 8008a88:	e004      	b.n	8008a94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f875 	bl	8008b7c <USBD_CtlError>
      break;
 8008a92:	bf00      	nop
  }
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d106      	bne.n	8008abc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f92b 	bl	8008d12 <USBD_CtlSendStatus>
  }
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d80b      	bhi.n	8008af4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	885b      	ldrh	r3, [r3, #2]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d10c      	bne.n	8008afe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f910 	bl	8008d12 <USBD_CtlSendStatus>
      }
      break;
 8008af2:	e004      	b.n	8008afe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f840 	bl	8008b7c <USBD_CtlError>
      break;
 8008afc:	e000      	b.n	8008b00 <USBD_ClrFeature+0x3c>
      break;
 8008afe:	bf00      	nop
  }
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3301      	adds	r3, #1
 8008b22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff fabb 	bl	80080ae <SWAPBYTE>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7ff faae 	bl	80080ae <SWAPBYTE>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff faa1 	bl	80080ae <SWAPBYTE>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	80da      	strh	r2, [r3, #6]
}
 8008b74:	bf00      	nop
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b86:	2180      	movs	r1, #128	; 0x80
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f003 fb0b 	bl	800c1a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b8e:	2100      	movs	r1, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f003 fb07 	bl	800c1a4 <USBD_LL_StallEP>
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b086      	sub	sp, #24
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d036      	beq.n	8008c22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bb8:	6938      	ldr	r0, [r7, #16]
 8008bba:	f000 f836 	bl	8008c2a <USBD_GetLen>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bd8:	7dfb      	ldrb	r3, [r7, #23]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	4413      	add	r3, r2
 8008be4:	2203      	movs	r2, #3
 8008be6:	701a      	strb	r2, [r3, #0]
  idx++;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	3301      	adds	r3, #1
 8008bec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bee:	e013      	b.n	8008c18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	613b      	str	r3, [r7, #16]
    idx++;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	3301      	adds	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	2200      	movs	r2, #0
 8008c10:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	3301      	adds	r3, #1
 8008c16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e7      	bne.n	8008bf0 <USBD_GetString+0x52>
 8008c20:	e000      	b.n	8008c24 <USBD_GetString+0x86>
    return;
 8008c22:	bf00      	nop
  }
}
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c3a:	e005      	b.n	8008c48 <USBD_GetLen+0x1e>
  {
    len++;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3301      	adds	r3, #1
 8008c46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f5      	bne.n	8008c3c <USBD_GetLen+0x12>
  }

  return len;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	2100      	movs	r1, #0
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f003 fb16 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f003 fb05 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f003 fb09 	bl	800c2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f003 faf8 	bl	800c2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d22:	2300      	movs	r3, #0
 8008d24:	2200      	movs	r2, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f003 fac4 	bl	800c2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2205      	movs	r2, #5
 8008d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 fad2 	bl	800c2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <__NVIC_SetPriority>:
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db0a      	blt.n	8008d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	490c      	ldr	r1, [pc, #48]	; (8008dac <__NVIC_SetPriority+0x4c>)
 8008d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d7e:	0112      	lsls	r2, r2, #4
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	440b      	add	r3, r1
 8008d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d88:	e00a      	b.n	8008da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	4908      	ldr	r1, [pc, #32]	; (8008db0 <__NVIC_SetPriority+0x50>)
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	3b04      	subs	r3, #4
 8008d98:	0112      	lsls	r2, r2, #4
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	761a      	strb	r2, [r3, #24]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	e000e100 	.word	0xe000e100
 8008db0:	e000ed00 	.word	0xe000ed00

08008db4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <SysTick_Handler+0x1c>)
 8008dba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008dbc:	f001 fd56 	bl	800a86c <xTaskGetSchedulerState>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d001      	beq.n	8008dca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008dc6:	f002 fb3f 	bl	800b448 <xPortSysTickHandler>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	e000e010 	.word	0xe000e010

08008dd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008dd8:	2100      	movs	r1, #0
 8008dda:	f06f 0004 	mvn.w	r0, #4
 8008dde:	f7ff ffbf 	bl	8008d60 <__NVIC_SetPriority>
#endif
}
 8008de2:	bf00      	nop
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dee:	f3ef 8305 	mrs	r3, IPSR
 8008df2:	603b      	str	r3, [r7, #0]
  return(result);
 8008df4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008dfa:	f06f 0305 	mvn.w	r3, #5
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	e00c      	b.n	8008e1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <osKernelInitialize+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e0a:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <osKernelInitialize+0x44>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e002      	b.n	8008e1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e1c:	687b      	ldr	r3, [r7, #4]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	2400037c 	.word	0x2400037c

08008e30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e36:	f3ef 8305 	mrs	r3, IPSR
 8008e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8008e3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e42:	f06f 0305 	mvn.w	r3, #5
 8008e46:	607b      	str	r3, [r7, #4]
 8008e48:	e010      	b.n	8008e6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <osKernelStart+0x48>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d109      	bne.n	8008e66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e52:	f7ff ffbf 	bl	8008dd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <osKernelStart+0x48>)
 8008e58:	2202      	movs	r2, #2
 8008e5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e5c:	f001 f8aa 	bl	8009fb4 <vTaskStartScheduler>
      stat = osOK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	607b      	str	r3, [r7, #4]
 8008e64:	e002      	b.n	8008e6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e66:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e6c:	687b      	ldr	r3, [r7, #4]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	2400037c 	.word	0x2400037c

08008e7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08e      	sub	sp, #56	; 0x38
 8008e80:	af04      	add	r7, sp, #16
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8c:	f3ef 8305 	mrs	r3, IPSR
 8008e90:	617b      	str	r3, [r7, #20]
  return(result);
 8008e92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d17e      	bne.n	8008f96 <osThreadNew+0x11a>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d07b      	beq.n	8008f96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e9e:	2380      	movs	r3, #128	; 0x80
 8008ea0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ea2:	2318      	movs	r3, #24
 8008ea4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008eae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d045      	beq.n	8008f42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <osThreadNew+0x48>
        name = attr->name;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <osThreadNew+0x6e>
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2b38      	cmp	r3, #56	; 0x38
 8008edc:	d805      	bhi.n	8008eea <osThreadNew+0x6e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <osThreadNew+0x72>
        return (NULL);
 8008eea:	2300      	movs	r3, #0
 8008eec:	e054      	b.n	8008f98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00e      	beq.n	8008f24 <osThreadNew+0xa8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	2bbb      	cmp	r3, #187	; 0xbb
 8008f0c:	d90a      	bls.n	8008f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d006      	beq.n	8008f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <osThreadNew+0xa8>
        mem = 1;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	e010      	b.n	8008f46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10c      	bne.n	8008f46 <osThreadNew+0xca>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d108      	bne.n	8008f46 <osThreadNew+0xca>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <osThreadNew+0xca>
          mem = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	e001      	b.n	8008f46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d110      	bne.n	8008f6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f54:	9202      	str	r2, [sp, #8]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6a3a      	ldr	r2, [r7, #32]
 8008f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 fdf0 	bl	8009b48 <xTaskCreateStatic>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	e013      	b.n	8008f96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d110      	bne.n	8008f96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 fe3b 	bl	8009c02 <xTaskCreate>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d001      	beq.n	8008f96 <osThreadNew+0x11a>
            hTask = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f96:	693b      	ldr	r3, [r7, #16]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	; 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4a07      	ldr	r2, [pc, #28]	; (8008fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8008fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a06      	ldr	r2, [pc, #24]	; (8008fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8008fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2280      	movs	r2, #128	; 0x80
 8008fbc:	601a      	str	r2, [r3, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	24000380 	.word	0x24000380
 8008fd0:	2400043c 	.word	0x2400043c

08008fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4a07      	ldr	r2, [pc, #28]	; (8009000 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a06      	ldr	r2, [pc, #24]	; (8009004 <vApplicationGetTimerTaskMemory+0x30>)
 8008fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	2400063c 	.word	0x2400063c
 8009004:	240006f8 	.word	0x240006f8

08009008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f103 0208 	add.w	r2, r3, #8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f103 0208 	add.w	r2, r3, #8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f103 0208 	add.w	r2, r3, #8
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009062:	b480      	push	{r7}
 8009064:	b085      	sub	sp, #20
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	601a      	str	r2, [r3, #0]
}
 800909e:	bf00      	nop
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d103      	bne.n	80090ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e00c      	b.n	80090e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3308      	adds	r3, #8
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e002      	b.n	80090d8 <vListInsert+0x2e>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d2f6      	bcs.n	80090d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6892      	ldr	r2, [r2, #8]
 8009132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6852      	ldr	r2, [r2, #4]
 800913c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d103      	bne.n	8009150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	1e5a      	subs	r2, r3, #1
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800919a:	f002 f8c3 	bl	800b324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091aa:	fb01 f303 	mul.w	r3, r1, r3
 80091ae:	441a      	add	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	3b01      	subs	r3, #1
 80091cc:	68f9      	ldr	r1, [r7, #12]
 80091ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	22ff      	movs	r2, #255	; 0xff
 80091de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	22ff      	movs	r2, #255	; 0xff
 80091e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d114      	bne.n	800921a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d01a      	beq.n	800922e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3310      	adds	r3, #16
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f973 	bl	800a4e8 <xTaskRemoveFromEventList>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d012      	beq.n	800922e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009208:	4b0c      	ldr	r3, [pc, #48]	; (800923c <xQueueGenericReset+0xcc>)
 800920a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	e009      	b.n	800922e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3310      	adds	r3, #16
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff fef2 	bl	8009008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3324      	adds	r3, #36	; 0x24
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff feed 	bl	8009008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800922e:	f002 f8a9 	bl	800b384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009232:	2301      	movs	r3, #1
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08e      	sub	sp, #56	; 0x38
 8009244:	af02      	add	r7, sp, #8
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <xQueueGenericCreateStatic+0x52>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <xQueueGenericCreateStatic+0x56>
 8009292:	2301      	movs	r3, #1
 8009294:	e000      	b.n	8009298 <xQueueGenericCreateStatic+0x58>
 8009296:	2300      	movs	r3, #0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	623b      	str	r3, [r7, #32]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <xQueueGenericCreateStatic+0x7e>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <xQueueGenericCreateStatic+0x82>
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <xQueueGenericCreateStatic+0x84>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	61fb      	str	r3, [r7, #28]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092de:	2350      	movs	r3, #80	; 0x50
 80092e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b50      	cmp	r3, #80	; 0x50
 80092e6:	d00a      	beq.n	80092fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	61bb      	str	r3, [r7, #24]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00d      	beq.n	8009326 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009312:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	4613      	mov	r3, r2
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 f805 	bl	8009330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009328:	4618      	mov	r0, r3
 800932a:	3730      	adds	r7, #48	; 0x30
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e002      	b.n	8009352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800935e:	2101      	movs	r1, #1
 8009360:	69b8      	ldr	r0, [r7, #24]
 8009362:	f7ff ff05 	bl	8009170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08e      	sub	sp, #56	; 0x38
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009386:	2300      	movs	r3, #0
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xQueueGenericSend+0x32>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <xQueueGenericSend+0x40>
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <xQueueGenericSend+0x44>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e000      	b.n	80093be <xQueueGenericSend+0x46>
 80093bc:	2300      	movs	r3, #0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <xQueueGenericSend+0x60>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d103      	bne.n	80093e6 <xQueueGenericSend+0x6e>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <xQueueGenericSend+0x72>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <xQueueGenericSend+0x74>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xQueueGenericSend+0x8e>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	623b      	str	r3, [r7, #32]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009406:	f001 fa31 	bl	800a86c <xTaskGetSchedulerState>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <xQueueGenericSend+0x9e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <xQueueGenericSend+0xa2>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericSend+0xa4>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xQueueGenericSend+0xbe>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	61fb      	str	r3, [r7, #28]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009436:	f001 ff75 	bl	800b324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	429a      	cmp	r2, r3
 8009444:	d302      	bcc.n	800944c <xQueueGenericSend+0xd4>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d129      	bne.n	80094a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009452:	f000 fa0b 	bl	800986c <prvCopyDataToQueue>
 8009456:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d010      	beq.n	8009482 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	3324      	adds	r3, #36	; 0x24
 8009464:	4618      	mov	r0, r3
 8009466:	f001 f83f 	bl	800a4e8 <xTaskRemoveFromEventList>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d013      	beq.n	8009498 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009470:	4b3f      	ldr	r3, [pc, #252]	; (8009570 <xQueueGenericSend+0x1f8>)
 8009472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	e00a      	b.n	8009498 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b39      	ldr	r3, [pc, #228]	; (8009570 <xQueueGenericSend+0x1f8>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009498:	f001 ff74 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 800949c:	2301      	movs	r3, #1
 800949e:	e063      	b.n	8009568 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094a6:	f001 ff6d 	bl	800b384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e05c      	b.n	8009568 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094b4:	f107 0314 	add.w	r3, r7, #20
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 f879 	bl	800a5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094c2:	f001 ff5f 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094c6:	f000 fde5 	bl	800a094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ca:	f001 ff2b 	bl	800b324 <vPortEnterCritical>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094d4:	b25b      	sxtb	r3, r3
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d103      	bne.n	80094e4 <xQueueGenericSend+0x16c>
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d103      	bne.n	80094fa <xQueueGenericSend+0x182>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094fa:	f001 ff43 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094fe:	1d3a      	adds	r2, r7, #4
 8009500:	f107 0314 	add.w	r3, r7, #20
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f001 f868 	bl	800a5dc <xTaskCheckForTimeOut>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d124      	bne.n	800955c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009514:	f000 faa2 	bl	8009a5c <prvIsQueueFull>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d018      	beq.n	8009550 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	3310      	adds	r3, #16
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f000 ff8e 	bl	800a448 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800952c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952e:	f000 fa2d 	bl	800998c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009532:	f000 fdbd 	bl	800a0b0 <xTaskResumeAll>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	f47f af7c 	bne.w	8009436 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <xQueueGenericSend+0x1f8>)
 8009540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	e772      	b.n	8009436 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009552:	f000 fa1b 	bl	800998c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009556:	f000 fdab 	bl	800a0b0 <xTaskResumeAll>
 800955a:	e76c      	b.n	8009436 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800955c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800955e:	f000 fa15 	bl	800998c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009562:	f000 fda5 	bl	800a0b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009568:	4618      	mov	r0, r3
 800956a:	3738      	adds	r7, #56	; 0x38
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	e000ed04 	.word	0xe000ed04

08009574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b090      	sub	sp, #64	; 0x40
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <xQueueGenericSendFromISR+0x3c>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <xQueueGenericSendFromISR+0x40>
 80095b0:	2301      	movs	r3, #1
 80095b2:	e000      	b.n	80095b6 <xQueueGenericSendFromISR+0x42>
 80095b4:	2300      	movs	r3, #0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095cc:	bf00      	nop
 80095ce:	e7fe      	b.n	80095ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d103      	bne.n	80095de <xQueueGenericSendFromISR+0x6a>
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <xQueueGenericSendFromISR+0x6e>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <xQueueGenericSendFromISR+0x70>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	623b      	str	r3, [r7, #32]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095fe:	f001 ff73 	bl	800b4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009602:	f3ef 8211 	mrs	r2, BASEPRI
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	61fa      	str	r2, [r7, #28]
 8009618:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800961a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009626:	429a      	cmp	r2, r3
 8009628:	d302      	bcc.n	8009630 <xQueueGenericSendFromISR+0xbc>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d12f      	bne.n	8009690 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009646:	f000 f911 	bl	800986c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800964a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d112      	bne.n	800967a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d016      	beq.n	800968a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	3324      	adds	r3, #36	; 0x24
 8009660:	4618      	mov	r0, r3
 8009662:	f000 ff41 	bl	800a4e8 <xTaskRemoveFromEventList>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00e      	beq.n	800968a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	e007      	b.n	800968a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800967a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800967e:	3301      	adds	r3, #1
 8009680:	b2db      	uxtb	r3, r3
 8009682:	b25a      	sxtb	r2, r3
 8009684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800968a:	2301      	movs	r3, #1
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800968e:	e001      	b.n	8009694 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009690:	2300      	movs	r3, #0
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009696:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800969e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3740      	adds	r7, #64	; 0x40
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08c      	sub	sp, #48	; 0x30
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <xQueueReceive+0x30>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	623b      	str	r3, [r7, #32]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d103      	bne.n	80096ea <xQueueReceive+0x3e>
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <xQueueReceive+0x42>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <xQueueReceive+0x44>
 80096ee:	2300      	movs	r3, #0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueReceive+0x5e>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61fb      	str	r3, [r7, #28]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800970a:	f001 f8af 	bl	800a86c <xTaskGetSchedulerState>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d102      	bne.n	800971a <xQueueReceive+0x6e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <xQueueReceive+0x72>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueReceive+0x74>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueReceive+0x8e>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	61bb      	str	r3, [r7, #24]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800973a:	f001 fdf3 	bl	800b324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009742:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	d01f      	beq.n	800978a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800974e:	f000 f8f7 	bl	8009940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	1e5a      	subs	r2, r3, #1
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00f      	beq.n	8009782 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	3310      	adds	r3, #16
 8009766:	4618      	mov	r0, r3
 8009768:	f000 febe 	bl	800a4e8 <xTaskRemoveFromEventList>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009772:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <xQueueReceive+0x1bc>)
 8009774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009782:	f001 fdff 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 8009786:	2301      	movs	r3, #1
 8009788:	e069      	b.n	800985e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009790:	f001 fdf8 	bl	800b384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009794:	2300      	movs	r3, #0
 8009796:	e062      	b.n	800985e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d106      	bne.n	80097ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800979e:	f107 0310 	add.w	r3, r7, #16
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 ff04 	bl	800a5b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097ac:	f001 fdea 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097b0:	f000 fc70 	bl	800a094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097b4:	f001 fdb6 	bl	800b324 <vPortEnterCritical>
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d103      	bne.n	80097ce <xQueueReceive+0x122>
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097d4:	b25b      	sxtb	r3, r3
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d103      	bne.n	80097e4 <xQueueReceive+0x138>
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097e4:	f001 fdce 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e8:	1d3a      	adds	r2, r7, #4
 80097ea:	f107 0310 	add.w	r3, r7, #16
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fef3 	bl	800a5dc <xTaskCheckForTimeOut>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d123      	bne.n	8009844 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097fe:	f000 f917 	bl	8009a30 <prvIsQueueEmpty>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d017      	beq.n	8009838 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	3324      	adds	r3, #36	; 0x24
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fe19 	bl	800a448 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009818:	f000 f8b8 	bl	800998c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800981c:	f000 fc48 	bl	800a0b0 <xTaskResumeAll>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d189      	bne.n	800973a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <xQueueReceive+0x1bc>)
 8009828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	e780      	b.n	800973a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800983a:	f000 f8a7 	bl	800998c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800983e:	f000 fc37 	bl	800a0b0 <xTaskResumeAll>
 8009842:	e77a      	b.n	800973a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009846:	f000 f8a1 	bl	800998c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800984a:	f000 fc31 	bl	800a0b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800984e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009850:	f000 f8ee 	bl	8009a30 <prvIsQueueEmpty>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	f43f af6f 	beq.w	800973a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800985c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800985e:	4618      	mov	r0, r3
 8009860:	3730      	adds	r7, #48	; 0x30
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10d      	bne.n	80098a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d14d      	bne.n	800992e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	4618      	mov	r0, r3
 8009898:	f001 f806 	bl	800a8a8 <xTaskPriorityDisinherit>
 800989c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	609a      	str	r2, [r3, #8]
 80098a4:	e043      	b.n	800992e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d119      	bne.n	80098e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6858      	ldr	r0, [r3, #4]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	461a      	mov	r2, r3
 80098b6:	68b9      	ldr	r1, [r7, #8]
 80098b8:	f002 fdbc 	bl	800c434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d32b      	bcc.n	800992e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	e026      	b.n	800992e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68d8      	ldr	r0, [r3, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	461a      	mov	r2, r3
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	f002 fda2 	bl	800c434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	425b      	negs	r3, r3
 80098fa:	441a      	add	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d207      	bcs.n	800991c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009914:	425b      	negs	r3, r3
 8009916:	441a      	add	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d105      	bne.n	800992e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3b01      	subs	r3, #1
 800992c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009936:	697b      	ldr	r3, [r7, #20]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d018      	beq.n	8009984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	441a      	add	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	429a      	cmp	r2, r3
 800996a:	d303      	bcc.n	8009974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68d9      	ldr	r1, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	461a      	mov	r2, r3
 800997e:	6838      	ldr	r0, [r7, #0]
 8009980:	f002 fd58 	bl	800c434 <memcpy>
	}
}
 8009984:	bf00      	nop
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009994:	f001 fcc6 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800999e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099a0:	e011      	b.n	80099c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d012      	beq.n	80099d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3324      	adds	r3, #36	; 0x24
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fd9a 	bl	800a4e8 <xTaskRemoveFromEventList>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099ba:	f000 fe71 	bl	800a6a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dce9      	bgt.n	80099a2 <prvUnlockQueue+0x16>
 80099ce:	e000      	b.n	80099d2 <prvUnlockQueue+0x46>
					break;
 80099d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	22ff      	movs	r2, #255	; 0xff
 80099d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099da:	f001 fcd3 	bl	800b384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099de:	f001 fca1 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099ea:	e011      	b.n	8009a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d012      	beq.n	8009a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3310      	adds	r3, #16
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fd75 	bl	800a4e8 <xTaskRemoveFromEventList>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a04:	f000 fe4c 	bl	800a6a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dce9      	bgt.n	80099ec <prvUnlockQueue+0x60>
 8009a18:	e000      	b.n	8009a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	22ff      	movs	r2, #255	; 0xff
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a24:	f001 fcae 	bl	800b384 <vPortExitCritical>
}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a38:	f001 fc74 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e001      	b.n	8009a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a4e:	f001 fc99 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a64:	f001 fc5e 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d102      	bne.n	8009a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	e001      	b.n	8009a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a7e:	f001 fc81 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009a82:	68fb      	ldr	r3, [r7, #12]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	e014      	b.n	8009ac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a9c:	4a0f      	ldr	r2, [pc, #60]	; (8009adc <vQueueAddToRegistry+0x50>)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009aa8:	490c      	ldr	r1, [pc, #48]	; (8009adc <vQueueAddToRegistry+0x50>)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ab2:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <vQueueAddToRegistry+0x50>)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	4413      	add	r3, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009abe:	e006      	b.n	8009ace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b07      	cmp	r3, #7
 8009aca:	d9e7      	bls.n	8009a9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	24000af8 	.word	0x24000af8

08009ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009af0:	f001 fc18 	bl	800b324 <vPortEnterCritical>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009afa:	b25b      	sxtb	r3, r3
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d103      	bne.n	8009b0a <vQueueWaitForMessageRestricted+0x2a>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b16:	d103      	bne.n	8009b20 <vQueueWaitForMessageRestricted+0x40>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b20:	f001 fc30 	bl	800b384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d106      	bne.n	8009b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3324      	adds	r3, #36	; 0x24
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 fcab 	bl	800a490 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f7ff ff26 	bl	800998c <prvUnlockQueue>
	}
 8009b40:	bf00      	nop
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08e      	sub	sp, #56	; 0x38
 8009b4c:	af04      	add	r7, sp, #16
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	623b      	str	r3, [r7, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xTaskCreateStatic+0x46>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	61fb      	str	r3, [r7, #28]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b8e:	23bc      	movs	r3, #188	; 0xbc
 8009b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2bbc      	cmp	r3, #188	; 0xbc
 8009b96:	d00a      	beq.n	8009bae <xTaskCreateStatic+0x66>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61bb      	str	r3, [r7, #24]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d01e      	beq.n	8009bf4 <xTaskCreateStatic+0xac>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01b      	beq.n	8009bf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	2202      	movs	r2, #2
 8009bca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9303      	str	r3, [sp, #12]
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	9302      	str	r3, [sp, #8]
 8009bd6:	f107 0314 	add.w	r3, r7, #20
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f850 	bl	8009c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bee:	f000 f8f3 	bl	8009dd8 <prvAddNewTaskToReadyList>
 8009bf2:	e001      	b.n	8009bf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bf8:	697b      	ldr	r3, [r7, #20]
	}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3728      	adds	r7, #40	; 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b08c      	sub	sp, #48	; 0x30
 8009c06:	af04      	add	r7, sp, #16
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c12:	88fb      	ldrh	r3, [r7, #6]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fca6 	bl	800b568 <pvPortMalloc>
 8009c1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00e      	beq.n	8009c42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c24:	20bc      	movs	r0, #188	; 0xbc
 8009c26:	f001 fc9f 	bl	800b568 <pvPortMalloc>
 8009c2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30
 8009c38:	e005      	b.n	8009c46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f001 fd60 	bl	800b700 <vPortFree>
 8009c40:	e001      	b.n	8009c46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d017      	beq.n	8009c7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c54:	88fa      	ldrh	r2, [r7, #6]
 8009c56:	2300      	movs	r3, #0
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	9302      	str	r3, [sp, #8]
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f80e 	bl	8009c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c70:	69f8      	ldr	r0, [r7, #28]
 8009c72:	f000 f8b1 	bl	8009dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c76:	2301      	movs	r3, #1
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	e002      	b.n	8009c82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c82:	69bb      	ldr	r3, [r7, #24]
	}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	21a5      	movs	r1, #165	; 0xa5
 8009ca6:	f002 fbd3 	bl	800c450 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009cb4:	440b      	add	r3, r1
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f023 0307 	bic.w	r3, r3, #7
 8009cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	617b      	str	r3, [r7, #20]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d01f      	beq.n	8009d2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
 8009cee:	e012      	b.n	8009d16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	7819      	ldrb	r1, [r3, #0]
 8009cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3334      	adds	r3, #52	; 0x34
 8009d00:	460a      	mov	r2, r1
 8009d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	4413      	add	r3, r2
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	3301      	adds	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	2b0f      	cmp	r3, #15
 8009d1a:	d9e9      	bls.n	8009cf0 <prvInitialiseNewTask+0x64>
 8009d1c:	e000      	b.n	8009d20 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d28:	e003      	b.n	8009d32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d34:	2b37      	cmp	r3, #55	; 0x37
 8009d36:	d901      	bls.n	8009d3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d38:	2337      	movs	r3, #55	; 0x37
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	3304      	adds	r3, #4
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff f978 	bl	8009048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	3318      	adds	r3, #24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff f973 	bl	8009048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	3354      	adds	r3, #84	; 0x54
 8009d8c:	2260      	movs	r2, #96	; 0x60
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 fb5d 	bl	800c450 <memset>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <prvInitialiseNewTask+0x140>)
 8009d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <prvInitialiseNewTask+0x144>)
 8009da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	4a0b      	ldr	r2, [pc, #44]	; (8009dd4 <prvInitialiseNewTask+0x148>)
 8009da6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	68f9      	ldr	r1, [r7, #12]
 8009dac:	69b8      	ldr	r0, [r7, #24]
 8009dae:	f001 f98b 	bl	800b0c8 <pxPortInitialiseStack>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc4:	bf00      	nop
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	0800c718 	.word	0x0800c718
 8009dd0:	0800c738 	.word	0x0800c738
 8009dd4:	0800c6f8 	.word	0x0800c6f8

08009dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009de0:	f001 faa0 	bl	800b324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009de4:	4b2d      	ldr	r3, [pc, #180]	; (8009e9c <prvAddNewTaskToReadyList+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	4a2c      	ldr	r2, [pc, #176]	; (8009e9c <prvAddNewTaskToReadyList+0xc4>)
 8009dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dee:	4b2c      	ldr	r3, [pc, #176]	; (8009ea0 <prvAddNewTaskToReadyList+0xc8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d109      	bne.n	8009e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009df6:	4a2a      	ldr	r2, [pc, #168]	; (8009ea0 <prvAddNewTaskToReadyList+0xc8>)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dfc:	4b27      	ldr	r3, [pc, #156]	; (8009e9c <prvAddNewTaskToReadyList+0xc4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d110      	bne.n	8009e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e04:	f000 fc70 	bl	800a6e8 <prvInitialiseTaskLists>
 8009e08:	e00d      	b.n	8009e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e0a:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <prvAddNewTaskToReadyList+0xcc>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d109      	bne.n	8009e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e12:	4b23      	ldr	r3, [pc, #140]	; (8009ea0 <prvAddNewTaskToReadyList+0xc8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d802      	bhi.n	8009e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e20:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <prvAddNewTaskToReadyList+0xc8>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e26:	4b20      	ldr	r3, [pc, #128]	; (8009ea8 <prvAddNewTaskToReadyList+0xd0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <prvAddNewTaskToReadyList+0xd0>)
 8009e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e30:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <prvAddNewTaskToReadyList+0xd0>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <prvAddNewTaskToReadyList+0xd4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d903      	bls.n	8009e4c <prvAddNewTaskToReadyList+0x74>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	4a18      	ldr	r2, [pc, #96]	; (8009eac <prvAddNewTaskToReadyList+0xd4>)
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e50:	4613      	mov	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4a15      	ldr	r2, [pc, #84]	; (8009eb0 <prvAddNewTaskToReadyList+0xd8>)
 8009e5a:	441a      	add	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7ff f8fd 	bl	8009062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e68:	f001 fa8c 	bl	800b384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <prvAddNewTaskToReadyList+0xcc>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00e      	beq.n	8009e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e74:	4b0a      	ldr	r3, [pc, #40]	; (8009ea0 <prvAddNewTaskToReadyList+0xc8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d207      	bcs.n	8009e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <prvAddNewTaskToReadyList+0xdc>)
 8009e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	2400100c 	.word	0x2400100c
 8009ea0:	24000b38 	.word	0x24000b38
 8009ea4:	24001018 	.word	0x24001018
 8009ea8:	24001028 	.word	0x24001028
 8009eac:	24001014 	.word	0x24001014
 8009eb0:	24000b3c 	.word	0x24000b3c
 8009eb4:	e000ed04 	.word	0xe000ed04

08009eb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08a      	sub	sp, #40	; 0x28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	617b      	str	r3, [r7, #20]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <vTaskDelayUntil+0x46>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	613b      	str	r3, [r7, #16]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009efe:	4b2a      	ldr	r3, [pc, #168]	; (8009fa8 <vTaskDelayUntil+0xf0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <vTaskDelayUntil+0x64>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	60fb      	str	r3, [r7, #12]
}
 8009f18:	bf00      	nop
 8009f1a:	e7fe      	b.n	8009f1a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009f1c:	f000 f8ba 	bl	800a094 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009f20:	4b22      	ldr	r3, [pc, #136]	; (8009fac <vTaskDelayUntil+0xf4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6a3a      	ldr	r2, [r7, #32]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d20b      	bcs.n	8009f52 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d211      	bcs.n	8009f68 <vTaskDelayUntil+0xb0>
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d90d      	bls.n	8009f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f50:	e00a      	b.n	8009f68 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d303      	bcc.n	8009f64 <vTaskDelayUntil+0xac>
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d901      	bls.n	8009f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d006      	beq.n	8009f82 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fd01 	bl	800a984 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009f82:	f000 f895 	bl	800a0b0 <xTaskResumeAll>
 8009f86:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d107      	bne.n	8009f9e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009f8e:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <vTaskDelayUntil+0xf8>)
 8009f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f9e:	bf00      	nop
 8009fa0:	3728      	adds	r7, #40	; 0x28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	24001034 	.word	0x24001034
 8009fac:	24001010 	.word	0x24001010
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fc2:	463a      	mov	r2, r7
 8009fc4:	1d39      	adds	r1, r7, #4
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ffe8 	bl	8008fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	9202      	str	r2, [sp, #8]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	460a      	mov	r2, r1
 8009fe2:	4924      	ldr	r1, [pc, #144]	; (800a074 <vTaskStartScheduler+0xc0>)
 8009fe4:	4824      	ldr	r0, [pc, #144]	; (800a078 <vTaskStartScheduler+0xc4>)
 8009fe6:	f7ff fdaf 	bl	8009b48 <xTaskCreateStatic>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4a23      	ldr	r2, [pc, #140]	; (800a07c <vTaskStartScheduler+0xc8>)
 8009fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ff0:	4b22      	ldr	r3, [pc, #136]	; (800a07c <vTaskStartScheduler+0xc8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e001      	b.n	800a002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d102      	bne.n	800a00e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a008:	f000 fd10 	bl	800aa2c <xTimerCreateTimerTask>
 800a00c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d11b      	bne.n	800a04c <vTaskStartScheduler+0x98>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	613b      	str	r3, [r7, #16]
}
 800a026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <vTaskStartScheduler+0xcc>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3354      	adds	r3, #84	; 0x54
 800a02e:	4a15      	ldr	r2, [pc, #84]	; (800a084 <vTaskStartScheduler+0xd0>)
 800a030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a032:	4b15      	ldr	r3, [pc, #84]	; (800a088 <vTaskStartScheduler+0xd4>)
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a03a:	4b14      	ldr	r3, [pc, #80]	; (800a08c <vTaskStartScheduler+0xd8>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a040:	4b13      	ldr	r3, [pc, #76]	; (800a090 <vTaskStartScheduler+0xdc>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a046:	f001 f8cb 	bl	800b1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a04a:	e00e      	b.n	800a06a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d10a      	bne.n	800a06a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <vTaskStartScheduler+0xb4>
}
 800a06a:	bf00      	nop
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	0800c654 	.word	0x0800c654
 800a078:	0800a6b9 	.word	0x0800a6b9
 800a07c:	24001030 	.word	0x24001030
 800a080:	24000b38 	.word	0x24000b38
 800a084:	24000188 	.word	0x24000188
 800a088:	2400102c 	.word	0x2400102c
 800a08c:	24001018 	.word	0x24001018
 800a090:	24001010 	.word	0x24001010

0800a094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a098:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <vTaskSuspendAll+0x18>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	4a03      	ldr	r2, [pc, #12]	; (800a0ac <vTaskSuspendAll+0x18>)
 800a0a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0a2:	bf00      	nop
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	24001034 	.word	0x24001034

0800a0b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0be:	4b42      	ldr	r3, [pc, #264]	; (800a1c8 <xTaskResumeAll+0x118>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10a      	bne.n	800a0dc <xTaskResumeAll+0x2c>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	603b      	str	r3, [r7, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	e7fe      	b.n	800a0da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0dc:	f001 f922 	bl	800b324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0e0:	4b39      	ldr	r3, [pc, #228]	; (800a1c8 <xTaskResumeAll+0x118>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	4a38      	ldr	r2, [pc, #224]	; (800a1c8 <xTaskResumeAll+0x118>)
 800a0e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ea:	4b37      	ldr	r3, [pc, #220]	; (800a1c8 <xTaskResumeAll+0x118>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d162      	bne.n	800a1b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0f2:	4b36      	ldr	r3, [pc, #216]	; (800a1cc <xTaskResumeAll+0x11c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d05e      	beq.n	800a1b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0fa:	e02f      	b.n	800a15c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fc:	4b34      	ldr	r3, [pc, #208]	; (800a1d0 <xTaskResumeAll+0x120>)
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3318      	adds	r3, #24
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff f807 	bl	800911c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3304      	adds	r3, #4
 800a112:	4618      	mov	r0, r3
 800a114:	f7ff f802 	bl	800911c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11c:	4b2d      	ldr	r3, [pc, #180]	; (800a1d4 <xTaskResumeAll+0x124>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <xTaskResumeAll+0x7c>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a2a      	ldr	r2, [pc, #168]	; (800a1d4 <xTaskResumeAll+0x124>)
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4a27      	ldr	r2, [pc, #156]	; (800a1d8 <xTaskResumeAll+0x128>)
 800a13a:	441a      	add	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f7fe ff8d 	bl	8009062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14c:	4b23      	ldr	r3, [pc, #140]	; (800a1dc <xTaskResumeAll+0x12c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	429a      	cmp	r2, r3
 800a154:	d302      	bcc.n	800a15c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a156:	4b22      	ldr	r3, [pc, #136]	; (800a1e0 <xTaskResumeAll+0x130>)
 800a158:	2201      	movs	r2, #1
 800a15a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a15c:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <xTaskResumeAll+0x120>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1cb      	bne.n	800a0fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a16a:	f000 fb5f 	bl	800a82c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <xTaskResumeAll+0x134>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d010      	beq.n	800a19c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a17a:	f000 f847 	bl	800a20c <xTaskIncrementTick>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a184:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <xTaskResumeAll+0x130>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1f1      	bne.n	800a17a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a196:	4b13      	ldr	r3, [pc, #76]	; (800a1e4 <xTaskResumeAll+0x134>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <xTaskResumeAll+0x130>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d009      	beq.n	800a1b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1a8:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <xTaskResumeAll+0x138>)
 800a1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1b8:	f001 f8e4 	bl	800b384 <vPortExitCritical>

	return xAlreadyYielded;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	24001034 	.word	0x24001034
 800a1cc:	2400100c 	.word	0x2400100c
 800a1d0:	24000fcc 	.word	0x24000fcc
 800a1d4:	24001014 	.word	0x24001014
 800a1d8:	24000b3c 	.word	0x24000b3c
 800a1dc:	24000b38 	.word	0x24000b38
 800a1e0:	24001020 	.word	0x24001020
 800a1e4:	2400101c 	.word	0x2400101c
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <xTaskGetTickCount+0x1c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1f8:	687b      	ldr	r3, [r7, #4]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	24001010 	.word	0x24001010

0800a20c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a216:	4b4f      	ldr	r3, [pc, #316]	; (800a354 <xTaskIncrementTick+0x148>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f040 808f 	bne.w	800a33e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a220:	4b4d      	ldr	r3, [pc, #308]	; (800a358 <xTaskIncrementTick+0x14c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a228:	4a4b      	ldr	r2, [pc, #300]	; (800a358 <xTaskIncrementTick+0x14c>)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d120      	bne.n	800a276 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a234:	4b49      	ldr	r3, [pc, #292]	; (800a35c <xTaskIncrementTick+0x150>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <xTaskIncrementTick+0x48>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	603b      	str	r3, [r7, #0]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <xTaskIncrementTick+0x46>
 800a254:	4b41      	ldr	r3, [pc, #260]	; (800a35c <xTaskIncrementTick+0x150>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	4b41      	ldr	r3, [pc, #260]	; (800a360 <xTaskIncrementTick+0x154>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a3f      	ldr	r2, [pc, #252]	; (800a35c <xTaskIncrementTick+0x150>)
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	4a3f      	ldr	r2, [pc, #252]	; (800a360 <xTaskIncrementTick+0x154>)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	4b3e      	ldr	r3, [pc, #248]	; (800a364 <xTaskIncrementTick+0x158>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	4a3d      	ldr	r2, [pc, #244]	; (800a364 <xTaskIncrementTick+0x158>)
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	f000 fadb 	bl	800a82c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a276:	4b3c      	ldr	r3, [pc, #240]	; (800a368 <xTaskIncrementTick+0x15c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d349      	bcc.n	800a314 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a280:	4b36      	ldr	r3, [pc, #216]	; (800a35c <xTaskIncrementTick+0x150>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28a:	4b37      	ldr	r3, [pc, #220]	; (800a368 <xTaskIncrementTick+0x15c>)
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	601a      	str	r2, [r3, #0]
					break;
 800a292:	e03f      	b.n	800a314 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a294:	4b31      	ldr	r3, [pc, #196]	; (800a35c <xTaskIncrementTick+0x150>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d203      	bcs.n	800a2b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2ac:	4a2e      	ldr	r2, [pc, #184]	; (800a368 <xTaskIncrementTick+0x15c>)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2b2:	e02f      	b.n	800a314 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe ff2f 	bl	800911c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe ff26 	bl	800911c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d4:	4b25      	ldr	r3, [pc, #148]	; (800a36c <xTaskIncrementTick+0x160>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d903      	bls.n	800a2e4 <xTaskIncrementTick+0xd8>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	4a22      	ldr	r2, [pc, #136]	; (800a36c <xTaskIncrementTick+0x160>)
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <xTaskIncrementTick+0x164>)
 800a2f2:	441a      	add	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	f7fe feb1 	bl	8009062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a304:	4b1b      	ldr	r3, [pc, #108]	; (800a374 <xTaskIncrementTick+0x168>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d3b8      	bcc.n	800a280 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a30e:	2301      	movs	r3, #1
 800a310:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a312:	e7b5      	b.n	800a280 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a314:	4b17      	ldr	r3, [pc, #92]	; (800a374 <xTaskIncrementTick+0x168>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	4915      	ldr	r1, [pc, #84]	; (800a370 <xTaskIncrementTick+0x164>)
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d901      	bls.n	800a330 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a330:	4b11      	ldr	r3, [pc, #68]	; (800a378 <xTaskIncrementTick+0x16c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e004      	b.n	800a348 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a33e:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <xTaskIncrementTick+0x170>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a0d      	ldr	r2, [pc, #52]	; (800a37c <xTaskIncrementTick+0x170>)
 800a346:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a348:	697b      	ldr	r3, [r7, #20]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	24001034 	.word	0x24001034
 800a358:	24001010 	.word	0x24001010
 800a35c:	24000fc4 	.word	0x24000fc4
 800a360:	24000fc8 	.word	0x24000fc8
 800a364:	24001024 	.word	0x24001024
 800a368:	2400102c 	.word	0x2400102c
 800a36c:	24001014 	.word	0x24001014
 800a370:	24000b3c 	.word	0x24000b3c
 800a374:	24000b38 	.word	0x24000b38
 800a378:	24001020 	.word	0x24001020
 800a37c:	2400101c 	.word	0x2400101c

0800a380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a386:	4b2a      	ldr	r3, [pc, #168]	; (800a430 <vTaskSwitchContext+0xb0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a38e:	4b29      	ldr	r3, [pc, #164]	; (800a434 <vTaskSwitchContext+0xb4>)
 800a390:	2201      	movs	r2, #1
 800a392:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a394:	e046      	b.n	800a424 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a396:	4b27      	ldr	r3, [pc, #156]	; (800a434 <vTaskSwitchContext+0xb4>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39c:	4b26      	ldr	r3, [pc, #152]	; (800a438 <vTaskSwitchContext+0xb8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	e010      	b.n	800a3c6 <vTaskSwitchContext+0x46>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	607b      	str	r3, [r7, #4]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <vTaskSwitchContext+0x3e>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
 800a3c6:	491d      	ldr	r1, [pc, #116]	; (800a43c <vTaskSwitchContext+0xbc>)
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0e4      	beq.n	800a3a4 <vTaskSwitchContext+0x24>
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4a15      	ldr	r2, [pc, #84]	; (800a43c <vTaskSwitchContext+0xbc>)
 800a3e6:	4413      	add	r3, r2
 800a3e8:	60bb      	str	r3, [r7, #8]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d104      	bne.n	800a40a <vTaskSwitchContext+0x8a>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	4a0b      	ldr	r2, [pc, #44]	; (800a440 <vTaskSwitchContext+0xc0>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4a08      	ldr	r2, [pc, #32]	; (800a438 <vTaskSwitchContext+0xb8>)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <vTaskSwitchContext+0xc0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3354      	adds	r3, #84	; 0x54
 800a420:	4a08      	ldr	r2, [pc, #32]	; (800a444 <vTaskSwitchContext+0xc4>)
 800a422:	6013      	str	r3, [r2, #0]
}
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	24001034 	.word	0x24001034
 800a434:	24001020 	.word	0x24001020
 800a438:	24001014 	.word	0x24001014
 800a43c:	24000b3c 	.word	0x24000b3c
 800a440:	24000b38 	.word	0x24000b38
 800a444:	24000188 	.word	0x24000188

0800a448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	60fb      	str	r3, [r7, #12]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <vTaskPlaceOnEventList+0x44>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3318      	adds	r3, #24
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe fe17 	bl	80090aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a47c:	2101      	movs	r1, #1
 800a47e:	6838      	ldr	r0, [r7, #0]
 800a480:	f000 fa80 	bl	800a984 <prvAddCurrentTaskToDelayedList>
}
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	24000b38 	.word	0x24000b38

0800a490 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	617b      	str	r3, [r7, #20]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4b8:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3318      	adds	r3, #24
 800a4be:	4619      	mov	r1, r3
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f7fe fdce 	bl	8009062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	68b8      	ldr	r0, [r7, #8]
 800a4d6:	f000 fa55 	bl	800a984 <prvAddCurrentTaskToDelayedList>
	}
 800a4da:	bf00      	nop
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	24000b38 	.word	0x24000b38

0800a4e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	60fb      	str	r3, [r7, #12]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3318      	adds	r3, #24
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fdff 	bl	800911c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a51e:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <xTaskRemoveFromEventList+0xb0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11d      	bne.n	800a562 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fdf6 	bl	800911c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a534:	4b19      	ldr	r3, [pc, #100]	; (800a59c <xTaskRemoveFromEventList+0xb4>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d903      	bls.n	800a544 <xTaskRemoveFromEventList+0x5c>
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a16      	ldr	r2, [pc, #88]	; (800a59c <xTaskRemoveFromEventList+0xb4>)
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4a13      	ldr	r2, [pc, #76]	; (800a5a0 <xTaskRemoveFromEventList+0xb8>)
 800a552:	441a      	add	r2, r3
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7fe fd81 	bl	8009062 <vListInsertEnd>
 800a560:	e005      	b.n	800a56e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	3318      	adds	r3, #24
 800a566:	4619      	mov	r1, r3
 800a568:	480e      	ldr	r0, [pc, #56]	; (800a5a4 <xTaskRemoveFromEventList+0xbc>)
 800a56a:	f7fe fd7a 	bl	8009062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4b0d      	ldr	r3, [pc, #52]	; (800a5a8 <xTaskRemoveFromEventList+0xc0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	429a      	cmp	r2, r3
 800a57a:	d905      	bls.n	800a588 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <xTaskRemoveFromEventList+0xc4>)
 800a582:	2201      	movs	r2, #1
 800a584:	601a      	str	r2, [r3, #0]
 800a586:	e001      	b.n	800a58c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a588:	2300      	movs	r3, #0
 800a58a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a58c:	697b      	ldr	r3, [r7, #20]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	24001034 	.word	0x24001034
 800a59c:	24001014 	.word	0x24001014
 800a5a0:	24000b3c 	.word	0x24000b3c
 800a5a4:	24000fcc 	.word	0x24000fcc
 800a5a8:	24000b38 	.word	0x24000b38
 800a5ac:	24001020 	.word	0x24001020

0800a5b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5b8:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <vTaskInternalSetTimeOutState+0x24>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <vTaskInternalSetTimeOutState+0x28>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	605a      	str	r2, [r3, #4]
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	24001024 	.word	0x24001024
 800a5d8:	24001010 	.word	0x24001010

0800a5dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	613b      	str	r3, [r7, #16]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60fb      	str	r3, [r7, #12]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a61e:	f000 fe81 	bl	800b324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <xTaskCheckForTimeOut+0xbc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d102      	bne.n	800a642 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	e023      	b.n	800a68a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	4b15      	ldr	r3, [pc, #84]	; (800a69c <xTaskCheckForTimeOut+0xc0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d007      	beq.n	800a65e <xTaskCheckForTimeOut+0x82>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d302      	bcc.n	800a65e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	61fb      	str	r3, [r7, #28]
 800a65c:	e015      	b.n	800a68a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	429a      	cmp	r2, r3
 800a666:	d20b      	bcs.n	800a680 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff ff9b 	bl	800a5b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
 800a67e:	e004      	b.n	800a68a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a68a:	f000 fe7b 	bl	800b384 <vPortExitCritical>

	return xReturn;
 800a68e:	69fb      	ldr	r3, [r7, #28]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	24001010 	.word	0x24001010
 800a69c:	24001024 	.word	0x24001024

0800a6a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6a4:	4b03      	ldr	r3, [pc, #12]	; (800a6b4 <vTaskMissedYield+0x14>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]
}
 800a6aa:	bf00      	nop
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	24001020 	.word	0x24001020

0800a6b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6c0:	f000 f852 	bl	800a768 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6c4:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <prvIdleTask+0x28>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d9f9      	bls.n	800a6c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <prvIdleTask+0x2c>)
 800a6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6dc:	e7f0      	b.n	800a6c0 <prvIdleTask+0x8>
 800a6de:	bf00      	nop
 800a6e0:	24000b3c 	.word	0x24000b3c
 800a6e4:	e000ed04 	.word	0xe000ed04

0800a6e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	607b      	str	r3, [r7, #4]
 800a6f2:	e00c      	b.n	800a70e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4a12      	ldr	r2, [pc, #72]	; (800a748 <prvInitialiseTaskLists+0x60>)
 800a700:	4413      	add	r3, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fc80 	bl	8009008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3301      	adds	r3, #1
 800a70c:	607b      	str	r3, [r7, #4]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b37      	cmp	r3, #55	; 0x37
 800a712:	d9ef      	bls.n	800a6f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a714:	480d      	ldr	r0, [pc, #52]	; (800a74c <prvInitialiseTaskLists+0x64>)
 800a716:	f7fe fc77 	bl	8009008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a71a:	480d      	ldr	r0, [pc, #52]	; (800a750 <prvInitialiseTaskLists+0x68>)
 800a71c:	f7fe fc74 	bl	8009008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a720:	480c      	ldr	r0, [pc, #48]	; (800a754 <prvInitialiseTaskLists+0x6c>)
 800a722:	f7fe fc71 	bl	8009008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a726:	480c      	ldr	r0, [pc, #48]	; (800a758 <prvInitialiseTaskLists+0x70>)
 800a728:	f7fe fc6e 	bl	8009008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a72c:	480b      	ldr	r0, [pc, #44]	; (800a75c <prvInitialiseTaskLists+0x74>)
 800a72e:	f7fe fc6b 	bl	8009008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a732:	4b0b      	ldr	r3, [pc, #44]	; (800a760 <prvInitialiseTaskLists+0x78>)
 800a734:	4a05      	ldr	r2, [pc, #20]	; (800a74c <prvInitialiseTaskLists+0x64>)
 800a736:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a738:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <prvInitialiseTaskLists+0x7c>)
 800a73a:	4a05      	ldr	r2, [pc, #20]	; (800a750 <prvInitialiseTaskLists+0x68>)
 800a73c:	601a      	str	r2, [r3, #0]
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	24000b3c 	.word	0x24000b3c
 800a74c:	24000f9c 	.word	0x24000f9c
 800a750:	24000fb0 	.word	0x24000fb0
 800a754:	24000fcc 	.word	0x24000fcc
 800a758:	24000fe0 	.word	0x24000fe0
 800a75c:	24000ff8 	.word	0x24000ff8
 800a760:	24000fc4 	.word	0x24000fc4
 800a764:	24000fc8 	.word	0x24000fc8

0800a768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a76e:	e019      	b.n	800a7a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a770:	f000 fdd8 	bl	800b324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <prvCheckTasksWaitingTermination+0x50>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3304      	adds	r3, #4
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe fccb 	bl	800911c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a786:	4b0d      	ldr	r3, [pc, #52]	; (800a7bc <prvCheckTasksWaitingTermination+0x54>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	4a0b      	ldr	r2, [pc, #44]	; (800a7bc <prvCheckTasksWaitingTermination+0x54>)
 800a78e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <prvCheckTasksWaitingTermination+0x58>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3b01      	subs	r3, #1
 800a796:	4a0a      	ldr	r2, [pc, #40]	; (800a7c0 <prvCheckTasksWaitingTermination+0x58>)
 800a798:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a79a:	f000 fdf3 	bl	800b384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f810 	bl	800a7c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <prvCheckTasksWaitingTermination+0x58>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e1      	bne.n	800a770 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	24000fe0 	.word	0x24000fe0
 800a7bc:	2400100c 	.word	0x2400100c
 800a7c0:	24000ff4 	.word	0x24000ff4

0800a7c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3354      	adds	r3, #84	; 0x54
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fe53 	bl	800c47c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d108      	bne.n	800a7f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 ff8b 	bl	800b700 <vPortFree>
				vPortFree( pxTCB );
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 ff88 	bl	800b700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7f0:	e018      	b.n	800a824 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d103      	bne.n	800a804 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 ff7f 	bl	800b700 <vPortFree>
	}
 800a802:	e00f      	b.n	800a824 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d00a      	beq.n	800a824 <prvDeleteTCB+0x60>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <prvDeleteTCB+0x5e>
	}
 800a824:	bf00      	nop
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a832:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <prvResetNextTaskUnblockTime+0x38>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <prvResetNextTaskUnblockTime+0x3c>)
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295
 800a842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a844:	e008      	b.n	800a858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a846:	4b07      	ldr	r3, [pc, #28]	; (800a864 <prvResetNextTaskUnblockTime+0x38>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <prvResetNextTaskUnblockTime+0x3c>)
 800a856:	6013      	str	r3, [r2, #0]
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	24000fc4 	.word	0x24000fc4
 800a868:	2400102c 	.word	0x2400102c

0800a86c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <xTaskGetSchedulerState+0x34>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d102      	bne.n	800a880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a87a:	2301      	movs	r3, #1
 800a87c:	607b      	str	r3, [r7, #4]
 800a87e:	e008      	b.n	800a892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a880:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <xTaskGetSchedulerState+0x38>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a888:	2302      	movs	r3, #2
 800a88a:	607b      	str	r3, [r7, #4]
 800a88c:	e001      	b.n	800a892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a892:	687b      	ldr	r3, [r7, #4]
	}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	24001018 	.word	0x24001018
 800a8a4:	24001034 	.word	0x24001034

0800a8a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d056      	beq.n	800a96c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8be:	4b2e      	ldr	r3, [pc, #184]	; (800a978 <xTaskPriorityDisinherit+0xd0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d00a      	beq.n	800a8de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	60fb      	str	r3, [r7, #12]
}
 800a8da:	bf00      	nop
 800a8dc:	e7fe      	b.n	800a8dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60bb      	str	r3, [r7, #8]
}
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a900:	1e5a      	subs	r2, r3, #1
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90e:	429a      	cmp	r2, r3
 800a910:	d02c      	beq.n	800a96c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a916:	2b00      	cmp	r3, #0
 800a918:	d128      	bne.n	800a96c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fbfc 	bl	800911c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a930:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <xTaskPriorityDisinherit+0xd4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	429a      	cmp	r2, r3
 800a942:	d903      	bls.n	800a94c <xTaskPriorityDisinherit+0xa4>
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	4a0c      	ldr	r2, [pc, #48]	; (800a97c <xTaskPriorityDisinherit+0xd4>)
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4a09      	ldr	r2, [pc, #36]	; (800a980 <xTaskPriorityDisinherit+0xd8>)
 800a95a:	441a      	add	r2, r3
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	3304      	adds	r3, #4
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7fe fb7d 	bl	8009062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a96c:	697b      	ldr	r3, [r7, #20]
	}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	24000b38 	.word	0x24000b38
 800a97c:	24001014 	.word	0x24001014
 800a980:	24000b3c 	.word	0x24000b3c

0800a984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a98e:	4b21      	ldr	r3, [pc, #132]	; (800aa14 <prvAddCurrentTaskToDelayedList+0x90>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a994:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3304      	adds	r3, #4
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe fbbe 	bl	800911c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a6:	d10a      	bne.n	800a9be <prvAddCurrentTaskToDelayedList+0x3a>
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ae:	4b1a      	ldr	r3, [pc, #104]	; (800aa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	4819      	ldr	r0, [pc, #100]	; (800aa1c <prvAddCurrentTaskToDelayedList+0x98>)
 800a9b8:	f7fe fb53 	bl	8009062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9bc:	e026      	b.n	800aa0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9c6:	4b14      	ldr	r3, [pc, #80]	; (800aa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d209      	bcs.n	800a9ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9d6:	4b12      	ldr	r3, [pc, #72]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	f7fe fb61 	bl	80090aa <vListInsert>
}
 800a9e8:	e010      	b.n	800aa0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ea:	4b0e      	ldr	r3, [pc, #56]	; (800aa24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f7fe fb57 	bl	80090aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d202      	bcs.n	800aa0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa06:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	6013      	str	r3, [r2, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	24001010 	.word	0x24001010
 800aa18:	24000b38 	.word	0x24000b38
 800aa1c:	24000ff8 	.word	0x24000ff8
 800aa20:	24000fc8 	.word	0x24000fc8
 800aa24:	24000fc4 	.word	0x24000fc4
 800aa28:	2400102c 	.word	0x2400102c

0800aa2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08a      	sub	sp, #40	; 0x28
 800aa30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa36:	f000 fb07 	bl	800b048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa3a:	4b1c      	ldr	r3, [pc, #112]	; (800aaac <xTimerCreateTimerTask+0x80>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d021      	beq.n	800aa86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa4a:	1d3a      	adds	r2, r7, #4
 800aa4c:	f107 0108 	add.w	r1, r7, #8
 800aa50:	f107 030c 	add.w	r3, r7, #12
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe fabd 	bl	8008fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa5a:	6879      	ldr	r1, [r7, #4]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	9202      	str	r2, [sp, #8]
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	2302      	movs	r3, #2
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	460a      	mov	r2, r1
 800aa6c:	4910      	ldr	r1, [pc, #64]	; (800aab0 <xTimerCreateTimerTask+0x84>)
 800aa6e:	4811      	ldr	r0, [pc, #68]	; (800aab4 <xTimerCreateTimerTask+0x88>)
 800aa70:	f7ff f86a 	bl	8009b48 <xTaskCreateStatic>
 800aa74:	4603      	mov	r3, r0
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <xTimerCreateTimerTask+0x8c>)
 800aa78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa7a:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <xTimerCreateTimerTask+0x8c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa82:	2301      	movs	r3, #1
 800aa84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	613b      	str	r3, [r7, #16]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaa2:	697b      	ldr	r3, [r7, #20]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	24001068 	.word	0x24001068
 800aab0:	0800c65c 	.word	0x0800c65c
 800aab4:	0800abf1 	.word	0x0800abf1
 800aab8:	2400106c 	.word	0x2400106c

0800aabc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08a      	sub	sp, #40	; 0x28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xTimerGenericCommand+0x2e>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	623b      	str	r3, [r7, #32]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aaea:	4b1a      	ldr	r3, [pc, #104]	; (800ab54 <xTimerGenericCommand+0x98>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d02a      	beq.n	800ab48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b05      	cmp	r3, #5
 800ab02:	dc18      	bgt.n	800ab36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab04:	f7ff feb2 	bl	800a86c <xTaskGetSchedulerState>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d109      	bne.n	800ab22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab0e:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <xTimerGenericCommand+0x98>)
 800ab10:	6818      	ldr	r0, [r3, #0]
 800ab12:	f107 0110 	add.w	r1, r7, #16
 800ab16:	2300      	movs	r3, #0
 800ab18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab1a:	f7fe fc2d 	bl	8009378 <xQueueGenericSend>
 800ab1e:	6278      	str	r0, [r7, #36]	; 0x24
 800ab20:	e012      	b.n	800ab48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab22:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <xTimerGenericCommand+0x98>)
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	f107 0110 	add.w	r1, r7, #16
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f7fe fc23 	bl	8009378 <xQueueGenericSend>
 800ab32:	6278      	str	r0, [r7, #36]	; 0x24
 800ab34:	e008      	b.n	800ab48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab36:	4b07      	ldr	r3, [pc, #28]	; (800ab54 <xTimerGenericCommand+0x98>)
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	f107 0110 	add.w	r1, r7, #16
 800ab3e:	2300      	movs	r3, #0
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	f7fe fd17 	bl	8009574 <xQueueGenericSendFromISR>
 800ab46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3728      	adds	r7, #40	; 0x28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	24001068 	.word	0x24001068

0800ab58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab62:	4b22      	ldr	r3, [pc, #136]	; (800abec <prvProcessExpiredTimer+0x94>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fad3 	bl	800911c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d022      	beq.n	800abca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	18d1      	adds	r1, r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	6978      	ldr	r0, [r7, #20]
 800ab92:	f000 f8d1 	bl	800ad38 <prvInsertTimerInActiveList>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01f      	beq.n	800abdc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	2300      	movs	r3, #0
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	2100      	movs	r1, #0
 800aba6:	6978      	ldr	r0, [r7, #20]
 800aba8:	f7ff ff88 	bl	800aabc <xTimerGenericCommand>
 800abac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d113      	bne.n	800abdc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	60fb      	str	r3, [r7, #12]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd0:	f023 0301 	bic.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	6978      	ldr	r0, [r7, #20]
 800abe2:	4798      	blx	r3
}
 800abe4:	bf00      	nop
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	24001060 	.word	0x24001060

0800abf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 f857 	bl	800acb0 <prvGetNextExpireTime>
 800ac02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	4619      	mov	r1, r3
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 f803 	bl	800ac14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac0e:	f000 f8d5 	bl	800adbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac12:	e7f1      	b.n	800abf8 <prvTimerTask+0x8>

0800ac14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac1e:	f7ff fa39 	bl	800a094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 f866 	bl	800acf8 <prvSampleTimeNow>
 800ac2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d130      	bne.n	800ac96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <prvProcessTimerOrBlockTask+0x3c>
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d806      	bhi.n	800ac50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac42:	f7ff fa35 	bl	800a0b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff ff85 	bl	800ab58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac4e:	e024      	b.n	800ac9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d008      	beq.n	800ac68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac56:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <prvProcessTimerOrBlockTask+0x90>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <prvProcessTimerOrBlockTask+0x50>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <prvProcessTimerOrBlockTask+0x52>
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac68:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <prvProcessTimerOrBlockTask+0x94>)
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4619      	mov	r1, r3
 800ac76:	f7fe ff33 	bl	8009ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac7a:	f7ff fa19 	bl	800a0b0 <xTaskResumeAll>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac84:	4b09      	ldr	r3, [pc, #36]	; (800acac <prvProcessTimerOrBlockTask+0x98>)
 800ac86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac8a:	601a      	str	r2, [r3, #0]
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	f3bf 8f6f 	isb	sy
}
 800ac94:	e001      	b.n	800ac9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac96:	f7ff fa0b 	bl	800a0b0 <xTaskResumeAll>
}
 800ac9a:	bf00      	nop
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	24001064 	.word	0x24001064
 800aca8:	24001068 	.word	0x24001068
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acb8:	4b0e      	ldr	r3, [pc, #56]	; (800acf4 <prvGetNextExpireTime+0x44>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <prvGetNextExpireTime+0x16>
 800acc2:	2201      	movs	r2, #1
 800acc4:	e000      	b.n	800acc8 <prvGetNextExpireTime+0x18>
 800acc6:	2200      	movs	r2, #0
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acd4:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <prvGetNextExpireTime+0x44>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	e001      	b.n	800ace4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ace4:	68fb      	ldr	r3, [r7, #12]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	24001060 	.word	0x24001060

0800acf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad00:	f7ff fa74 	bl	800a1ec <xTaskGetTickCount>
 800ad04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad06:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <prvSampleTimeNow+0x3c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d205      	bcs.n	800ad1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad10:	f000 f936 	bl	800af80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e002      	b.n	800ad22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad22:	4a04      	ldr	r2, [pc, #16]	; (800ad34 <prvSampleTimeNow+0x3c>)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad28:	68fb      	ldr	r3, [r7, #12]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	24001070 	.word	0x24001070

0800ad38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d812      	bhi.n	800ad84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	1ad2      	subs	r2, r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d302      	bcc.n	800ad72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	617b      	str	r3, [r7, #20]
 800ad70:	e01b      	b.n	800adaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad72:	4b10      	ldr	r3, [pc, #64]	; (800adb4 <prvInsertTimerInActiveList+0x7c>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	f7fe f994 	bl	80090aa <vListInsert>
 800ad82:	e012      	b.n	800adaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d206      	bcs.n	800ad9a <prvInsertTimerInActiveList+0x62>
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d302      	bcc.n	800ad9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	e007      	b.n	800adaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad9a:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <prvInsertTimerInActiveList+0x80>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3304      	adds	r3, #4
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7fe f980 	bl	80090aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adaa:	697b      	ldr	r3, [r7, #20]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	24001064 	.word	0x24001064
 800adb8:	24001060 	.word	0x24001060

0800adbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08e      	sub	sp, #56	; 0x38
 800adc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adc2:	e0ca      	b.n	800af5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da18      	bge.n	800adfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adca:	1d3b      	adds	r3, r7, #4
 800adcc:	3304      	adds	r3, #4
 800adce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	61fb      	str	r3, [r7, #28]
}
 800ade8:	bf00      	nop
 800adea:	e7fe      	b.n	800adea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adf2:	6850      	ldr	r0, [r2, #4]
 800adf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adf6:	6892      	ldr	r2, [r2, #8]
 800adf8:	4611      	mov	r1, r2
 800adfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f2c0 80aa 	blt.w	800af58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	3304      	adds	r3, #4
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7fe f981 	bl	800911c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff ff6b 	bl	800acf8 <prvSampleTimeNow>
 800ae22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b09      	cmp	r3, #9
 800ae28:	f200 8097 	bhi.w	800af5a <prvProcessReceivedCommands+0x19e>
 800ae2c:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <prvProcessReceivedCommands+0x78>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800ae5d 	.word	0x0800ae5d
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae5d 	.word	0x0800ae5d
 800ae40:	0800aed1 	.word	0x0800aed1
 800ae44:	0800aee5 	.word	0x0800aee5
 800ae48:	0800af2f 	.word	0x0800af2f
 800ae4c:	0800ae5d 	.word	0x0800ae5d
 800ae50:	0800ae5d 	.word	0x0800ae5d
 800ae54:	0800aed1 	.word	0x0800aed1
 800ae58:	0800aee5 	.word	0x0800aee5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	18d1      	adds	r1, r2, r3
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae7c:	f7ff ff5c 	bl	800ad38 <prvInsertTimerInActiveList>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d069      	beq.n	800af5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d05e      	beq.n	800af5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	441a      	add	r2, r3
 800aea4:	2300      	movs	r3, #0
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2100      	movs	r1, #0
 800aeac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeae:	f7ff fe05 	bl	800aabc <xTimerGenericCommand>
 800aeb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d14f      	bne.n	800af5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	61bb      	str	r3, [r7, #24]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aee2:	e03a      	b.n	800af5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	617b      	str	r3, [r7, #20]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	18d1      	adds	r1, r2, r3
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af28:	f7ff ff06 	bl	800ad38 <prvInsertTimerInActiveList>
					break;
 800af2c:	e015      	b.n	800af5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d103      	bne.n	800af44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3e:	f000 fbdf 	bl	800b700 <vPortFree>
 800af42:	e00a      	b.n	800af5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af4a:	f023 0301 	bic.w	r3, r3, #1
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af56:	e000      	b.n	800af5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <prvProcessReceivedCommands+0x1c0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	1d39      	adds	r1, r7, #4
 800af60:	2200      	movs	r2, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f7fe fba2 	bl	80096ac <xQueueReceive>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f47f af2a 	bne.w	800adc4 <prvProcessReceivedCommands+0x8>
	}
}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	3730      	adds	r7, #48	; 0x30
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	24001068 	.word	0x24001068

0800af80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af86:	e048      	b.n	800b01a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af88:	4b2d      	ldr	r3, [pc, #180]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af92:	4b2b      	ldr	r3, [pc, #172]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe f8bb 	bl	800911c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb4:	f003 0304 	and.w	r3, r3, #4
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d02e      	beq.n	800b01a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	4413      	add	r3, r2
 800afc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d90e      	bls.n	800afec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afda:	4b19      	ldr	r3, [pc, #100]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f7fe f860 	bl	80090aa <vListInsert>
 800afea:	e016      	b.n	800b01a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afec:	2300      	movs	r3, #0
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	2300      	movs	r3, #0
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	2100      	movs	r1, #0
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7ff fd60 	bl	800aabc <xTimerGenericCommand>
 800affc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	603b      	str	r3, [r7, #0]
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1b1      	bne.n	800af88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b024:	4b06      	ldr	r3, [pc, #24]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b02a:	4b06      	ldr	r3, [pc, #24]	; (800b044 <prvSwitchTimerLists+0xc4>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a04      	ldr	r2, [pc, #16]	; (800b040 <prvSwitchTimerLists+0xc0>)
 800b030:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b032:	4a04      	ldr	r2, [pc, #16]	; (800b044 <prvSwitchTimerLists+0xc4>)
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	6013      	str	r3, [r2, #0]
}
 800b038:	bf00      	nop
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	24001060 	.word	0x24001060
 800b044:	24001064 	.word	0x24001064

0800b048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b04e:	f000 f969 	bl	800b324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <prvCheckForValidListAndQueue+0x60>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d120      	bne.n	800b09c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b05a:	4814      	ldr	r0, [pc, #80]	; (800b0ac <prvCheckForValidListAndQueue+0x64>)
 800b05c:	f7fd ffd4 	bl	8009008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b060:	4813      	ldr	r0, [pc, #76]	; (800b0b0 <prvCheckForValidListAndQueue+0x68>)
 800b062:	f7fd ffd1 	bl	8009008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b066:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <prvCheckForValidListAndQueue+0x6c>)
 800b068:	4a10      	ldr	r2, [pc, #64]	; (800b0ac <prvCheckForValidListAndQueue+0x64>)
 800b06a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b06c:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <prvCheckForValidListAndQueue+0x70>)
 800b06e:	4a10      	ldr	r2, [pc, #64]	; (800b0b0 <prvCheckForValidListAndQueue+0x68>)
 800b070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b072:	2300      	movs	r3, #0
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	4b11      	ldr	r3, [pc, #68]	; (800b0bc <prvCheckForValidListAndQueue+0x74>)
 800b078:	4a11      	ldr	r2, [pc, #68]	; (800b0c0 <prvCheckForValidListAndQueue+0x78>)
 800b07a:	2110      	movs	r1, #16
 800b07c:	200a      	movs	r0, #10
 800b07e:	f7fe f8df 	bl	8009240 <xQueueGenericCreateStatic>
 800b082:	4603      	mov	r3, r0
 800b084:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <prvCheckForValidListAndQueue+0x60>)
 800b086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b088:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <prvCheckForValidListAndQueue+0x60>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d005      	beq.n	800b09c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b090:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <prvCheckForValidListAndQueue+0x60>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	490b      	ldr	r1, [pc, #44]	; (800b0c4 <prvCheckForValidListAndQueue+0x7c>)
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fcf8 	bl	8009a8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b09c:	f000 f972 	bl	800b384 <vPortExitCritical>
}
 800b0a0:	bf00      	nop
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	24001068 	.word	0x24001068
 800b0ac:	24001038 	.word	0x24001038
 800b0b0:	2400104c 	.word	0x2400104c
 800b0b4:	24001060 	.word	0x24001060
 800b0b8:	24001064 	.word	0x24001064
 800b0bc:	24001114 	.word	0x24001114
 800b0c0:	24001074 	.word	0x24001074
 800b0c4:	0800c664 	.word	0x0800c664

0800b0c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3b04      	subs	r3, #4
 800b0d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f023 0201 	bic.w	r2, r3, #1
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3b04      	subs	r3, #4
 800b0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0f8:	4a0c      	ldr	r2, [pc, #48]	; (800b12c <pxPortInitialiseStack+0x64>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b14      	subs	r3, #20
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3b04      	subs	r3, #4
 800b10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f06f 0202 	mvn.w	r2, #2
 800b116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3b20      	subs	r3, #32
 800b11c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b11e:	68fb      	ldr	r3, [r7, #12]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	0800b131 	.word	0x0800b131

0800b130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <prvTaskExitError+0x54>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b142:	d00a      	beq.n	800b15a <prvTaskExitError+0x2a>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60fb      	str	r3, [r7, #12]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <prvTaskExitError+0x28>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	60bb      	str	r3, [r7, #8]
}
 800b16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b16e:	bf00      	nop
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0fc      	beq.n	800b170 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	24000120 	.word	0x24000120
	...

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	24000b38 	.word	0x24000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <prvPortStartFirstTask+0x24>)
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f380 8808 	msr	MSP, r0
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8814 	msr	CONTROL, r0
 800b1ca:	b662      	cpsie	i
 800b1cc:	b661      	cpsie	f
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	df00      	svc	0
 800b1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1da:	bf00      	nop
 800b1dc:	e000ed08 	.word	0xe000ed08

0800b1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1e6:	4b46      	ldr	r3, [pc, #280]	; (800b300 <xPortStartScheduler+0x120>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a46      	ldr	r2, [pc, #280]	; (800b304 <xPortStartScheduler+0x124>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10a      	bne.n	800b206 <xPortStartScheduler+0x26>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	613b      	str	r3, [r7, #16]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b206:	4b3e      	ldr	r3, [pc, #248]	; (800b300 <xPortStartScheduler+0x120>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xPortStartScheduler+0x128>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10a      	bne.n	800b226 <xPortStartScheduler+0x46>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b226:	4b39      	ldr	r3, [pc, #228]	; (800b30c <xPortStartScheduler+0x12c>)
 800b228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	4b31      	ldr	r3, [pc, #196]	; (800b310 <xPortStartScheduler+0x130>)
 800b24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b24e:	4b31      	ldr	r3, [pc, #196]	; (800b314 <xPortStartScheduler+0x134>)
 800b250:	2207      	movs	r2, #7
 800b252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b254:	e009      	b.n	800b26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b256:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <xPortStartScheduler+0x134>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <xPortStartScheduler+0x134>)
 800b25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d0ef      	beq.n	800b256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <xPortStartScheduler+0x134>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f1c3 0307 	rsb	r3, r3, #7
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d00a      	beq.n	800b298 <xPortStartScheduler+0xb8>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60bb      	str	r3, [r7, #8]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <xPortStartScheduler+0x134>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	4a1d      	ldr	r2, [pc, #116]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2a2:	4b1c      	ldr	r3, [pc, #112]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	; (800b314 <xPortStartScheduler+0x134>)
 800b2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <xPortStartScheduler+0x138>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <xPortStartScheduler+0x138>)
 800b2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a14      	ldr	r2, [pc, #80]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2ce:	f000 f8dd 	bl	800b48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <xPortStartScheduler+0x13c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2d8:	f000 f8fc 	bl	800b4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2dc:	4b10      	ldr	r3, [pc, #64]	; (800b320 <xPortStartScheduler+0x140>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <xPortStartScheduler+0x140>)
 800b2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2e8:	f7ff ff66 	bl	800b1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2ec:	f7ff f848 	bl	800a380 <vTaskSwitchContext>
	prvTaskExitError();
 800b2f0:	f7ff ff1e 	bl	800b130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	e000ed00 	.word	0xe000ed00
 800b304:	410fc271 	.word	0x410fc271
 800b308:	410fc270 	.word	0x410fc270
 800b30c:	e000e400 	.word	0xe000e400
 800b310:	24001164 	.word	0x24001164
 800b314:	24001168 	.word	0x24001168
 800b318:	e000ed20 	.word	0xe000ed20
 800b31c:	24000120 	.word	0x24000120
 800b320:	e000ef34 	.word	0xe000ef34

0800b324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	607b      	str	r3, [r7, #4]
}
 800b33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <vPortEnterCritical+0x58>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a0d      	ldr	r2, [pc, #52]	; (800b37c <vPortEnterCritical+0x58>)
 800b346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <vPortEnterCritical+0x58>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <vPortEnterCritical+0x5c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <vPortEnterCritical+0x4c>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	603b      	str	r3, [r7, #0]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <vPortEnterCritical+0x4a>
	}
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	24000120 	.word	0x24000120
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <vPortExitCritical+0x50>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <vPortExitCritical+0x24>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	607b      	str	r3, [r7, #4]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4a09      	ldr	r2, [pc, #36]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <vPortExitCritical+0x42>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	f383 8811 	msr	BASEPRI, r3
}
 800b3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	24000120 	.word	0x24000120
	...

0800b3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3e0:	f3ef 8009 	mrs	r0, PSP
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4b15      	ldr	r3, [pc, #84]	; (800b440 <pxCurrentTCBConst>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	f01e 0f10 	tst.w	lr, #16
 800b3f0:	bf08      	it	eq
 800b3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b404:	f380 8811 	msr	BASEPRI, r0
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f7fe ffb6 	bl	800a380 <vTaskSwitchContext>
 800b414:	f04f 0000 	mov.w	r0, #0
 800b418:	f380 8811 	msr	BASEPRI, r0
 800b41c:	bc09      	pop	{r0, r3}
 800b41e:	6819      	ldr	r1, [r3, #0]
 800b420:	6808      	ldr	r0, [r1, #0]
 800b422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b426:	f01e 0f10 	tst.w	lr, #16
 800b42a:	bf08      	it	eq
 800b42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b430:	f380 8809 	msr	PSP, r0
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst>:
 800b440:	24000b38 	.word	0x24000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b462:	f7fe fed3 	bl	800a20c <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <xPortSysTickHandler+0x40>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f383 8811 	msr	BASEPRI, r3
}
 800b47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <vPortSetupTimerInterrupt+0x38>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <vPortSetupTimerInterrupt+0x3c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <vPortSetupTimerInterrupt+0x40>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	099b      	lsrs	r3, r3, #6
 800b4a8:	4a09      	ldr	r2, [pc, #36]	; (800b4d0 <vPortSetupTimerInterrupt+0x44>)
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ae:	4b04      	ldr	r3, [pc, #16]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b4b0:	2207      	movs	r2, #7
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	e000e010 	.word	0xe000e010
 800b4c4:	e000e018 	.word	0xe000e018
 800b4c8:	24000000 	.word	0x24000000
 800b4cc:	10624dd3 	.word	0x10624dd3
 800b4d0:	e000e014 	.word	0xe000e014

0800b4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4e4 <vPortEnableVFP+0x10>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4de:	6001      	str	r1, [r0, #0]
 800b4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4e2:	bf00      	nop
 800b4e4:	e000ed88 	.word	0xe000ed88

0800b4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ee:	f3ef 8305 	mrs	r3, IPSR
 800b4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d914      	bls.n	800b524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <vPortValidateInterruptPriority+0x70>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b504:	4b15      	ldr	r3, [pc, #84]	; (800b55c <vPortValidateInterruptPriority+0x74>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d20a      	bcs.n	800b524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <vPortValidateInterruptPriority+0x78>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <vPortValidateInterruptPriority+0x7c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d90a      	bls.n	800b54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	603b      	str	r3, [r7, #0]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <vPortValidateInterruptPriority+0x60>
	}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	e000e3f0 	.word	0xe000e3f0
 800b55c:	24001164 	.word	0x24001164
 800b560:	e000ed0c 	.word	0xe000ed0c
 800b564:	24001168 	.word	0x24001168

0800b568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b574:	f7fe fd8e 	bl	800a094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b578:	4b5b      	ldr	r3, [pc, #364]	; (800b6e8 <pvPortMalloc+0x180>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b580:	f000 f920 	bl	800b7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b584:	4b59      	ldr	r3, [pc, #356]	; (800b6ec <pvPortMalloc+0x184>)
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f040 8093 	bne.w	800b6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01d      	beq.n	800b5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b598:	2208      	movs	r2, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4413      	add	r3, r2
 800b59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d014      	beq.n	800b5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d06e      	beq.n	800b6b8 <pvPortMalloc+0x150>
 800b5da:	4b45      	ldr	r3, [pc, #276]	; (800b6f0 <pvPortMalloc+0x188>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d869      	bhi.n	800b6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5e4:	4b43      	ldr	r3, [pc, #268]	; (800b6f4 <pvPortMalloc+0x18c>)
 800b5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5e8:	4b42      	ldr	r3, [pc, #264]	; (800b6f4 <pvPortMalloc+0x18c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ee:	e004      	b.n	800b5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d903      	bls.n	800b60c <pvPortMalloc+0xa4>
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f1      	bne.n	800b5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b60c:	4b36      	ldr	r3, [pc, #216]	; (800b6e8 <pvPortMalloc+0x180>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b612:	429a      	cmp	r2, r3
 800b614:	d050      	beq.n	800b6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2208      	movs	r2, #8
 800b61c:	4413      	add	r3, r2
 800b61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	2308      	movs	r3, #8
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	429a      	cmp	r2, r3
 800b636:	d91f      	bls.n	800b678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4413      	add	r3, r2
 800b63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <pvPortMalloc+0xf8>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	613b      	str	r3, [r7, #16]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b672:	69b8      	ldr	r0, [r7, #24]
 800b674:	f000 f908 	bl	800b888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b678:	4b1d      	ldr	r3, [pc, #116]	; (800b6f0 <pvPortMalloc+0x188>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1b      	ldr	r2, [pc, #108]	; (800b6f0 <pvPortMalloc+0x188>)
 800b684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b686:	4b1a      	ldr	r3, [pc, #104]	; (800b6f0 <pvPortMalloc+0x188>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b1b      	ldr	r3, [pc, #108]	; (800b6f8 <pvPortMalloc+0x190>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d203      	bcs.n	800b69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b692:	4b17      	ldr	r3, [pc, #92]	; (800b6f0 <pvPortMalloc+0x188>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a18      	ldr	r2, [pc, #96]	; (800b6f8 <pvPortMalloc+0x190>)
 800b698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <pvPortMalloc+0x184>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <pvPortMalloc+0x194>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <pvPortMalloc+0x194>)
 800b6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6b8:	f7fe fcfa 	bl	800a0b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <pvPortMalloc+0x174>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	60fb      	str	r3, [r7, #12]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <pvPortMalloc+0x172>
	return pvReturn;
 800b6dc:	69fb      	ldr	r3, [r7, #28]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	24004d74 	.word	0x24004d74
 800b6ec:	24004d88 	.word	0x24004d88
 800b6f0:	24004d78 	.word	0x24004d78
 800b6f4:	24004d6c 	.word	0x24004d6c
 800b6f8:	24004d7c 	.word	0x24004d7c
 800b6fc:	24004d80 	.word	0x24004d80

0800b700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d04d      	beq.n	800b7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b712:	2308      	movs	r3, #8
 800b714:	425b      	negs	r3, r3
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	4b24      	ldr	r3, [pc, #144]	; (800b7b8 <vPortFree+0xb8>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4013      	ands	r3, r2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <vPortFree+0x44>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60fb      	str	r3, [r7, #12]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <vPortFree+0x62>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	60bb      	str	r3, [r7, #8]
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	4b14      	ldr	r3, [pc, #80]	; (800b7b8 <vPortFree+0xb8>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d01e      	beq.n	800b7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d11a      	bne.n	800b7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <vPortFree+0xb8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	43db      	mvns	r3, r3
 800b782:	401a      	ands	r2, r3
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b788:	f7fe fc84 	bl	800a094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <vPortFree+0xbc>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4413      	add	r3, r2
 800b796:	4a09      	ldr	r2, [pc, #36]	; (800b7bc <vPortFree+0xbc>)
 800b798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b79a:	6938      	ldr	r0, [r7, #16]
 800b79c:	f000 f874 	bl	800b888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7a0:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <vPortFree+0xc0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	4a06      	ldr	r2, [pc, #24]	; (800b7c0 <vPortFree+0xc0>)
 800b7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7aa:	f7fe fc81 	bl	800a0b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ae:	bf00      	nop
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	24004d88 	.word	0x24004d88
 800b7bc:	24004d78 	.word	0x24004d78
 800b7c0:	24004d84 	.word	0x24004d84

0800b7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7d0:	4b27      	ldr	r3, [pc, #156]	; (800b870 <prvHeapInit+0xac>)
 800b7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f003 0307 	and.w	r3, r3, #7
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3307      	adds	r3, #7
 800b7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0307 	bic.w	r3, r3, #7
 800b7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	4a1f      	ldr	r2, [pc, #124]	; (800b870 <prvHeapInit+0xac>)
 800b7f4:	4413      	add	r3, r2
 800b7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7fc:	4a1d      	ldr	r2, [pc, #116]	; (800b874 <prvHeapInit+0xb0>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b802:	4b1c      	ldr	r3, [pc, #112]	; (800b874 <prvHeapInit+0xb0>)
 800b804:	2200      	movs	r2, #0
 800b806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	4413      	add	r3, r2
 800b80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b810:	2208      	movs	r2, #8
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f023 0307 	bic.w	r3, r3, #7
 800b81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4a15      	ldr	r2, [pc, #84]	; (800b878 <prvHeapInit+0xb4>)
 800b824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <prvHeapInit+0xb4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b82e:	4b12      	ldr	r3, [pc, #72]	; (800b878 <prvHeapInit+0xb4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b844:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <prvHeapInit+0xb4>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <prvHeapInit+0xb8>)
 800b852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	4a09      	ldr	r2, [pc, #36]	; (800b880 <prvHeapInit+0xbc>)
 800b85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b85c:	4b09      	ldr	r3, [pc, #36]	; (800b884 <prvHeapInit+0xc0>)
 800b85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b862:	601a      	str	r2, [r3, #0]
}
 800b864:	bf00      	nop
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	2400116c 	.word	0x2400116c
 800b874:	24004d6c 	.word	0x24004d6c
 800b878:	24004d74 	.word	0x24004d74
 800b87c:	24004d7c 	.word	0x24004d7c
 800b880:	24004d78 	.word	0x24004d78
 800b884:	24004d88 	.word	0x24004d88

0800b888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b890:	4b28      	ldr	r3, [pc, #160]	; (800b934 <prvInsertBlockIntoFreeList+0xac>)
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e002      	b.n	800b89c <prvInsertBlockIntoFreeList+0x14>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d8f7      	bhi.n	800b896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d108      	bne.n	800b8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	441a      	add	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d118      	bne.n	800b910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <prvInsertBlockIntoFreeList+0xb0>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d00d      	beq.n	800b906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	441a      	add	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	e008      	b.n	800b918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b906:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <prvInsertBlockIntoFreeList+0xb0>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	e003      	b.n	800b918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d002      	beq.n	800b926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b926:	bf00      	nop
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	24004d6c 	.word	0x24004d6c
 800b938:	24004d74 	.word	0x24004d74

0800b93c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b940:	2200      	movs	r2, #0
 800b942:	4913      	ldr	r1, [pc, #76]	; (800b990 <MX_USB_DEVICE_Init+0x54>)
 800b944:	4813      	ldr	r0, [pc, #76]	; (800b994 <MX_USB_DEVICE_Init+0x58>)
 800b946:	f7fc f8a1 	bl	8007a8c <USBD_Init>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b950:	f7f4 fe9a 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b954:	4910      	ldr	r1, [pc, #64]	; (800b998 <MX_USB_DEVICE_Init+0x5c>)
 800b956:	480f      	ldr	r0, [pc, #60]	; (800b994 <MX_USB_DEVICE_Init+0x58>)
 800b958:	f7fc f8c8 	bl	8007aec <USBD_RegisterClass>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b962:	f7f4 fe91 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b966:	490d      	ldr	r1, [pc, #52]	; (800b99c <MX_USB_DEVICE_Init+0x60>)
 800b968:	480a      	ldr	r0, [pc, #40]	; (800b994 <MX_USB_DEVICE_Init+0x58>)
 800b96a:	f7fb ffe9 	bl	8007940 <USBD_CDC_RegisterInterface>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b974:	f7f4 fe88 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b978:	4806      	ldr	r0, [pc, #24]	; (800b994 <MX_USB_DEVICE_Init+0x58>)
 800b97a:	f7fc f8de 	bl	8007b3a <USBD_Start>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b984:	f7f4 fe80 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800b988:	f7f7 fe96 	bl	80036b8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b98c:	bf00      	nop
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	24000138 	.word	0x24000138
 800b994:	24004d8c 	.word	0x24004d8c
 800b998:	2400001c 	.word	0x2400001c
 800b99c:	24000124 	.word	0x24000124

0800b9a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4905      	ldr	r1, [pc, #20]	; (800b9bc <CDC_Init_FS+0x1c>)
 800b9a8:	4805      	ldr	r0, [pc, #20]	; (800b9c0 <CDC_Init_FS+0x20>)
 800b9aa:	f7fb ffde 	bl	800796a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b9ae:	4905      	ldr	r1, [pc, #20]	; (800b9c4 <CDC_Init_FS+0x24>)
 800b9b0:	4803      	ldr	r0, [pc, #12]	; (800b9c0 <CDC_Init_FS+0x20>)
 800b9b2:	f7fb fff8 	bl	80079a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	2400585c 	.word	0x2400585c
 800b9c0:	24004d8c 	.word	0x24004d8c
 800b9c4:	2400505c 	.word	0x2400505c

0800b9c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b9cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	4603      	mov	r3, r0
 800b9e0:	6039      	str	r1, [r7, #0]
 800b9e2:	71fb      	strb	r3, [r7, #7]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b9e8:	79fb      	ldrb	r3, [r7, #7]
 800b9ea:	2b23      	cmp	r3, #35	; 0x23
 800b9ec:	d84a      	bhi.n	800ba84 <CDC_Control_FS+0xac>
 800b9ee:	a201      	add	r2, pc, #4	; (adr r2, 800b9f4 <CDC_Control_FS+0x1c>)
 800b9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f4:	0800ba85 	.word	0x0800ba85
 800b9f8:	0800ba85 	.word	0x0800ba85
 800b9fc:	0800ba85 	.word	0x0800ba85
 800ba00:	0800ba85 	.word	0x0800ba85
 800ba04:	0800ba85 	.word	0x0800ba85
 800ba08:	0800ba85 	.word	0x0800ba85
 800ba0c:	0800ba85 	.word	0x0800ba85
 800ba10:	0800ba85 	.word	0x0800ba85
 800ba14:	0800ba85 	.word	0x0800ba85
 800ba18:	0800ba85 	.word	0x0800ba85
 800ba1c:	0800ba85 	.word	0x0800ba85
 800ba20:	0800ba85 	.word	0x0800ba85
 800ba24:	0800ba85 	.word	0x0800ba85
 800ba28:	0800ba85 	.word	0x0800ba85
 800ba2c:	0800ba85 	.word	0x0800ba85
 800ba30:	0800ba85 	.word	0x0800ba85
 800ba34:	0800ba85 	.word	0x0800ba85
 800ba38:	0800ba85 	.word	0x0800ba85
 800ba3c:	0800ba85 	.word	0x0800ba85
 800ba40:	0800ba85 	.word	0x0800ba85
 800ba44:	0800ba85 	.word	0x0800ba85
 800ba48:	0800ba85 	.word	0x0800ba85
 800ba4c:	0800ba85 	.word	0x0800ba85
 800ba50:	0800ba85 	.word	0x0800ba85
 800ba54:	0800ba85 	.word	0x0800ba85
 800ba58:	0800ba85 	.word	0x0800ba85
 800ba5c:	0800ba85 	.word	0x0800ba85
 800ba60:	0800ba85 	.word	0x0800ba85
 800ba64:	0800ba85 	.word	0x0800ba85
 800ba68:	0800ba85 	.word	0x0800ba85
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba85 	.word	0x0800ba85
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba85 	.word	0x0800ba85
 800ba7c:	0800ba85 	.word	0x0800ba85
 800ba80:	0800ba85 	.word	0x0800ba85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba84:	bf00      	nop
  }

  return (USBD_OK);
 800ba86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4808      	ldr	r0, [pc, #32]	; (800bac4 <CDC_Receive_FS+0x30>)
 800baa2:	f7fb ff80 	bl	80079a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800baa6:	4807      	ldr	r0, [pc, #28]	; (800bac4 <CDC_Receive_FS+0x30>)
 800baa8:	f7fb ffc6 	bl	8007a38 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(UserRxBufferFS, *Len);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4619      	mov	r1, r3
 800bab2:	4805      	ldr	r0, [pc, #20]	; (800bac8 <CDC_Receive_FS+0x34>)
 800bab4:	f7f4 fd8e 	bl	80005d4 <CDC_ReceiveCallback>
  return (USBD_OK);
 800bab8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	24004d8c 	.word	0x24004d8c
 800bac8:	2400505c 	.word	0x2400505c

0800bacc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	460b      	mov	r3, r1
 800bad6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800badc:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <CDC_Transmit_FS+0x48>)
 800bade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bae2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800baee:	2301      	movs	r3, #1
 800baf0:	e00b      	b.n	800bb0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800baf2:	887b      	ldrh	r3, [r7, #2]
 800baf4:	461a      	mov	r2, r3
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4806      	ldr	r0, [pc, #24]	; (800bb14 <CDC_Transmit_FS+0x48>)
 800bafa:	f7fb ff36 	bl	800796a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bafe:	4805      	ldr	r0, [pc, #20]	; (800bb14 <CDC_Transmit_FS+0x48>)
 800bb00:	f7fb ff6a 	bl	80079d8 <USBD_CDC_TransmitPacket>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	24004d8c 	.word	0x24004d8c

0800bb18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	4613      	mov	r3, r2
 800bb24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
	...

0800bb3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2212      	movs	r2, #18
 800bb4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb4e:	4b03      	ldr	r3, [pc, #12]	; (800bb5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	24000154 	.word	0x24000154

0800bb60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2204      	movs	r2, #4
 800bb70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb72:	4b03      	ldr	r3, [pc, #12]	; (800bb80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	24000168 	.word	0x24000168

0800bb84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb90:	79fb      	ldrb	r3, [r7, #7]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d105      	bne.n	800bba2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	4907      	ldr	r1, [pc, #28]	; (800bbb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb9a:	4808      	ldr	r0, [pc, #32]	; (800bbbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bb9c:	f7fc ffff 	bl	8008b9e <USBD_GetString>
 800bba0:	e004      	b.n	800bbac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	4904      	ldr	r1, [pc, #16]	; (800bbb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bba6:	4805      	ldr	r0, [pc, #20]	; (800bbbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bba8:	f7fc fff9 	bl	8008b9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbac:	4b02      	ldr	r3, [pc, #8]	; (800bbb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	2400605c 	.word	0x2400605c
 800bbbc:	0800c66c 	.word	0x0800c66c

0800bbc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	6039      	str	r1, [r7, #0]
 800bbca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	4904      	ldr	r1, [pc, #16]	; (800bbe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bbd0:	4804      	ldr	r0, [pc, #16]	; (800bbe4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bbd2:	f7fc ffe4 	bl	8008b9e <USBD_GetString>
  return USBD_StrDesc;
 800bbd6:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	2400605c 	.word	0x2400605c
 800bbe4:	0800c684 	.word	0x0800c684

0800bbe8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	221a      	movs	r2, #26
 800bbf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbfa:	f000 f843 	bl	800bc84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbfe:	4b02      	ldr	r3, [pc, #8]	; (800bc08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	2400016c 	.word	0x2400016c

0800bc0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	6039      	str	r1, [r7, #0]
 800bc16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc18:	79fb      	ldrb	r3, [r7, #7]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d105      	bne.n	800bc2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	4907      	ldr	r1, [pc, #28]	; (800bc40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc22:	4808      	ldr	r0, [pc, #32]	; (800bc44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc24:	f7fc ffbb 	bl	8008b9e <USBD_GetString>
 800bc28:	e004      	b.n	800bc34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	4904      	ldr	r1, [pc, #16]	; (800bc40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc2e:	4805      	ldr	r0, [pc, #20]	; (800bc44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc30:	f7fc ffb5 	bl	8008b9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc34:	4b02      	ldr	r3, [pc, #8]	; (800bc40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	2400605c 	.word	0x2400605c
 800bc44:	0800c698 	.word	0x0800c698

0800bc48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	6039      	str	r1, [r7, #0]
 800bc52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc54:	79fb      	ldrb	r3, [r7, #7]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d105      	bne.n	800bc66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	4907      	ldr	r1, [pc, #28]	; (800bc7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc5e:	4808      	ldr	r0, [pc, #32]	; (800bc80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc60:	f7fc ff9d 	bl	8008b9e <USBD_GetString>
 800bc64:	e004      	b.n	800bc70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	4904      	ldr	r1, [pc, #16]	; (800bc7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc6a:	4805      	ldr	r0, [pc, #20]	; (800bc80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc6c:	f7fc ff97 	bl	8008b9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc70:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	2400605c 	.word	0x2400605c
 800bc80:	0800c6a4 	.word	0x0800c6a4

0800bc84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	; (800bcc8 <Get_SerialNum+0x44>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc90:	4b0e      	ldr	r3, [pc, #56]	; (800bccc <Get_SerialNum+0x48>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc96:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <Get_SerialNum+0x4c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d009      	beq.n	800bcbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bcaa:	2208      	movs	r2, #8
 800bcac:	4909      	ldr	r1, [pc, #36]	; (800bcd4 <Get_SerialNum+0x50>)
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f814 	bl	800bcdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	4908      	ldr	r1, [pc, #32]	; (800bcd8 <Get_SerialNum+0x54>)
 800bcb8:	68b8      	ldr	r0, [r7, #8]
 800bcba:	f000 f80f 	bl	800bcdc <IntToUnicode>
  }
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	1ff1e800 	.word	0x1ff1e800
 800bccc:	1ff1e804 	.word	0x1ff1e804
 800bcd0:	1ff1e808 	.word	0x1ff1e808
 800bcd4:	2400016e 	.word	0x2400016e
 800bcd8:	2400017e 	.word	0x2400017e

0800bcdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	4613      	mov	r3, r2
 800bce8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]
 800bcf2:	e027      	b.n	800bd44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	0f1b      	lsrs	r3, r3, #28
 800bcf8:	2b09      	cmp	r3, #9
 800bcfa:	d80b      	bhi.n	800bd14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	0f1b      	lsrs	r3, r3, #28
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	4619      	mov	r1, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	440b      	add	r3, r1
 800bd0c:	3230      	adds	r2, #48	; 0x30
 800bd0e:	b2d2      	uxtb	r2, r2
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	e00a      	b.n	800bd2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	0f1b      	lsrs	r3, r3, #28
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	4619      	mov	r1, r3
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	440b      	add	r3, r1
 800bd24:	3237      	adds	r2, #55	; 0x37
 800bd26:	b2d2      	uxtb	r2, r2
 800bd28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	011b      	lsls	r3, r3, #4
 800bd2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	3301      	adds	r3, #1
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	3301      	adds	r3, #1
 800bd42:	75fb      	strb	r3, [r7, #23]
 800bd44:	7dfa      	ldrb	r2, [r7, #23]
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d3d3      	bcc.n	800bcf4 <IntToUnicode+0x18>
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
	...

0800bd5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b0b8      	sub	sp, #224	; 0xe0
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	609a      	str	r2, [r3, #8]
 800bd70:	60da      	str	r2, [r3, #12]
 800bd72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd74:	f107 0310 	add.w	r3, r7, #16
 800bd78:	22bc      	movs	r2, #188	; 0xbc
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fb67 	bl	800c450 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a33      	ldr	r2, [pc, #204]	; (800be54 <HAL_PCD_MspInit+0xf8>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d15e      	bne.n	800be4a <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bd8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bd90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bd92:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800bd96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd9a:	f107 0310 	add.w	r3, r7, #16
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f8 fc60 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800bdaa:	f7f4 fc6d 	bl	8000688 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800bdae:	f7f7 fc83 	bl	80036b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdb2:	4b29      	ldr	r3, [pc, #164]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800bdb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdb8:	4a27      	ldr	r2, [pc, #156]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bdc2:	4b25      	ldr	r3, [pc, #148]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800bdc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800bdd0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800bdd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdd8:	2302      	movs	r3, #2
 800bdda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800bdea:	230a      	movs	r3, #10
 800bdec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4819      	ldr	r0, [pc, #100]	; (800be5c <HAL_PCD_MspInit+0x100>)
 800bdf8:	f7f6 f898 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800bdfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be04:	2300      	movs	r3, #0
 800be06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800be14:	4619      	mov	r1, r3
 800be16:	4811      	ldr	r0, [pc, #68]	; (800be5c <HAL_PCD_MspInit+0x100>)
 800be18:	f7f6 f888 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be1c:	4b0e      	ldr	r3, [pc, #56]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800be1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be22:	4a0d      	ldr	r2, [pc, #52]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800be24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <HAL_PCD_MspInit+0xfc>)
 800be2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800be32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be36:	60bb      	str	r3, [r7, #8]
 800be38:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800be3a:	2200      	movs	r2, #0
 800be3c:	2105      	movs	r1, #5
 800be3e:	2065      	movs	r0, #101	; 0x65
 800be40:	f7f4 ff54 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800be44:	2065      	movs	r0, #101	; 0x65
 800be46:	f7f4 ff6b 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800be4a:	bf00      	nop
 800be4c:	37e0      	adds	r7, #224	; 0xe0
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	40080000 	.word	0x40080000
 800be58:	58024400 	.word	0x58024400
 800be5c:	58020000 	.word	0x58020000

0800be60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fb feaa 	bl	8007bd0 <USBD_LL_SetupStage>
}
 800be7c:	bf00      	nop
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800be96:	78fa      	ldrb	r2, [r7, #3]
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	4613      	mov	r3, r2
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	440b      	add	r3, r1
 800bea4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	78fb      	ldrb	r3, [r7, #3]
 800beac:	4619      	mov	r1, r3
 800beae:	f7fb fee4 	bl	8007c7a <USBD_LL_DataOutStage>
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	4613      	mov	r3, r2
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	440b      	add	r3, r1
 800beda:	3348      	adds	r3, #72	; 0x48
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	78fb      	ldrb	r3, [r7, #3]
 800bee0:	4619      	mov	r1, r3
 800bee2:	f7fb ff2d 	bl	8007d40 <USBD_LL_DataInStage>
}
 800bee6:	bf00      	nop
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800befc:	4618      	mov	r0, r3
 800befe:	f7fc f841 	bl	8007f84 <USBD_LL_SOF>
}
 800bf02:	bf00      	nop
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf12:	2301      	movs	r3, #1
 800bf14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]
 800bf22:	e008      	b.n	800bf36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d102      	bne.n	800bf32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
 800bf30:	e001      	b.n	800bf36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bf32:	f7f4 fba9 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fb ffe1 	bl	8007f08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fb ff8d 	bl	8007e6c <USBD_LL_Reset>
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fb ffdc 	bl	8007f28 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf82:	f043 0301 	orr.w	r3, r3, #1
 800bf86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <HAL_PCD_SuspendCallback+0x48>)
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	4a03      	ldr	r2, [pc, #12]	; (800bfa4 <HAL_PCD_SuspendCallback+0x48>)
 800bf96:	f043 0306 	orr.w	r3, r3, #6
 800bf9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	e000ed00 	.word	0xe000ed00

0800bfa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fb ffcc 	bl	8007f54 <USBD_LL_Resume>
}
 800bfbc:	bf00      	nop
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bfd6:	78fa      	ldrb	r2, [r7, #3]
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fc f81a 	bl	8008014 <USBD_LL_IsoOUTIncomplete>
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bffa:	78fa      	ldrb	r2, [r7, #3]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fb ffe2 	bl	8007fc8 <USBD_LL_IsoINIncomplete>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fc f820 	bl	8008060 <USBD_LL_DevConnected>
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c036:	4618      	mov	r0, r3
 800c038:	f7fc f81d 	bl	8008076 <USBD_LL_DevDisconnected>
}
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d13e      	bne.n	800c0d2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c054:	4a21      	ldr	r2, [pc, #132]	; (800c0dc <USBD_LL_Init+0x98>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a1f      	ldr	r2, [pc, #124]	; (800c0dc <USBD_LL_Init+0x98>)
 800c060:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c064:	4b1d      	ldr	r3, [pc, #116]	; (800c0dc <USBD_LL_Init+0x98>)
 800c066:	4a1e      	ldr	r2, [pc, #120]	; (800c0e0 <USBD_LL_Init+0x9c>)
 800c068:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c06a:	4b1c      	ldr	r3, [pc, #112]	; (800c0dc <USBD_LL_Init+0x98>)
 800c06c:	2209      	movs	r2, #9
 800c06e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c070:	4b1a      	ldr	r3, [pc, #104]	; (800c0dc <USBD_LL_Init+0x98>)
 800c072:	2202      	movs	r2, #2
 800c074:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c076:	4b19      	ldr	r3, [pc, #100]	; (800c0dc <USBD_LL_Init+0x98>)
 800c078:	2200      	movs	r2, #0
 800c07a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c07c:	4b17      	ldr	r3, [pc, #92]	; (800c0dc <USBD_LL_Init+0x98>)
 800c07e:	2202      	movs	r2, #2
 800c080:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c082:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <USBD_LL_Init+0x98>)
 800c084:	2201      	movs	r2, #1
 800c086:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c088:	4b14      	ldr	r3, [pc, #80]	; (800c0dc <USBD_LL_Init+0x98>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c08e:	4b13      	ldr	r3, [pc, #76]	; (800c0dc <USBD_LL_Init+0x98>)
 800c090:	2200      	movs	r2, #0
 800c092:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800c094:	4b11      	ldr	r3, [pc, #68]	; (800c0dc <USBD_LL_Init+0x98>)
 800c096:	2201      	movs	r2, #1
 800c098:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c09a:	4b10      	ldr	r3, [pc, #64]	; (800c0dc <USBD_LL_Init+0x98>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c0a0:	4b0e      	ldr	r3, [pc, #56]	; (800c0dc <USBD_LL_Init+0x98>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c0a6:	480d      	ldr	r0, [pc, #52]	; (800c0dc <USBD_LL_Init+0x98>)
 800c0a8:	f7f6 f8f0 	bl	800228c <HAL_PCD_Init>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c0b2:	f7f4 fae9 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c0b6:	2180      	movs	r1, #128	; 0x80
 800c0b8:	4808      	ldr	r0, [pc, #32]	; (800c0dc <USBD_LL_Init+0x98>)
 800c0ba:	f7f7 fa82 	bl	80035c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c0be:	2240      	movs	r2, #64	; 0x40
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	4806      	ldr	r0, [pc, #24]	; (800c0dc <USBD_LL_Init+0x98>)
 800c0c4:	f7f7 fa36 	bl	8003534 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c0c8:	2280      	movs	r2, #128	; 0x80
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4803      	ldr	r0, [pc, #12]	; (800c0dc <USBD_LL_Init+0x98>)
 800c0ce:	f7f7 fa31 	bl	8003534 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	2400625c 	.word	0x2400625c
 800c0e0:	40080000 	.word	0x40080000

0800c0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7f6 f9ea 	bl	80024d4 <HAL_PCD_Start>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f942 	bl	800c390 <USBD_Get_USB_Status>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c110:	7bbb      	ldrb	r3, [r7, #14]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	4608      	mov	r0, r1
 800c124:	4611      	mov	r1, r2
 800c126:	461a      	mov	r2, r3
 800c128:	4603      	mov	r3, r0
 800c12a:	70fb      	strb	r3, [r7, #3]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70bb      	strb	r3, [r7, #2]
 800c130:	4613      	mov	r3, r2
 800c132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c138:	2300      	movs	r3, #0
 800c13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c142:	78bb      	ldrb	r3, [r7, #2]
 800c144:	883a      	ldrh	r2, [r7, #0]
 800c146:	78f9      	ldrb	r1, [r7, #3]
 800c148:	f7f6 fdfb 	bl	8002d42 <HAL_PCD_EP_Open>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f91c 	bl	800c390 <USBD_Get_USB_Status>
 800c158:	4603      	mov	r3, r0
 800c15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f7f6 fe44 	bl	8002e12 <HAL_PCD_EP_Close>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f8fd 	bl	800c390 <USBD_Get_USB_Status>
 800c196:	4603      	mov	r3, r0
 800c198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1be:	78fa      	ldrb	r2, [r7, #3]
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f6 ff1c 	bl	8003000 <HAL_PCD_EP_SetStall>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f8de 	bl	800c390 <USBD_Get_USB_Status>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1fc:	78fa      	ldrb	r2, [r7, #3]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f7f6 ff61 	bl	80030c8 <HAL_PCD_EP_ClrStall>
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f8bf 	bl	800c390 <USBD_Get_USB_Status>
 800c212:	4603      	mov	r3, r0
 800c214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c216:	7bbb      	ldrb	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	da0b      	bge.n	800c254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c242:	68f9      	ldr	r1, [r7, #12]
 800c244:	4613      	mov	r3, r2
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	1a9b      	subs	r3, r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	333e      	adds	r3, #62	; 0x3e
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	e00b      	b.n	800c26c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	4613      	mov	r3, r2
 800c25e:	00db      	lsls	r3, r3, #3
 800c260:	1a9b      	subs	r3, r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	440b      	add	r3, r1
 800c266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7f6 fd2e 	bl	8002cf8 <HAL_PCD_SetAddress>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f874 	bl	800c390 <USBD_Get_USB_Status>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2d4:	7af9      	ldrb	r1, [r7, #11]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	f7f6 fe47 	bl	8002f6c <HAL_PCD_EP_Transmit>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 f853 	bl	800c390 <USBD_Get_USB_Status>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	460b      	mov	r3, r1
 800c306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c316:	7af9      	ldrb	r1, [r7, #11]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	f7f6 fdc3 	bl	8002ea6 <HAL_PCD_EP_Receive>
 800c320:	4603      	mov	r3, r0
 800c322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f832 	bl	800c390 <USBD_Get_USB_Status>
 800c32c:	4603      	mov	r3, r0
 800c32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c330:	7dbb      	ldrb	r3, [r7, #22]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	460b      	mov	r3, r1
 800c344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c34c:	78fa      	ldrb	r2, [r7, #3]
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7f6 fdf3 	bl	8002f3c <HAL_PCD_EP_GetRxCount>
 800c356:	4603      	mov	r3, r0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c368:	4b03      	ldr	r3, [pc, #12]	; (800c378 <USBD_static_malloc+0x18>)
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	24006664 	.word	0x24006664

0800c37c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]

}
 800c384:	bf00      	nop
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d817      	bhi.n	800c3d4 <USBD_Get_USB_Status+0x44>
 800c3a4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <USBD_Get_USB_Status+0x1c>)
 800c3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3aa:	bf00      	nop
 800c3ac:	0800c3bd 	.word	0x0800c3bd
 800c3b0:	0800c3c3 	.word	0x0800c3c3
 800c3b4:	0800c3c9 	.word	0x0800c3c9
 800c3b8:	0800c3cf 	.word	0x0800c3cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c0:	e00b      	b.n	800c3da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c3c6:	e008      	b.n	800c3da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c3cc:	e005      	b.n	800c3da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d2:	e002      	b.n	800c3da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	bf00      	nop
  }
  return usb_status;
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <__libc_init_array>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	4d0d      	ldr	r5, [pc, #52]	; (800c420 <__libc_init_array+0x38>)
 800c3ec:	4c0d      	ldr	r4, [pc, #52]	; (800c424 <__libc_init_array+0x3c>)
 800c3ee:	1b64      	subs	r4, r4, r5
 800c3f0:	10a4      	asrs	r4, r4, #2
 800c3f2:	2600      	movs	r6, #0
 800c3f4:	42a6      	cmp	r6, r4
 800c3f6:	d109      	bne.n	800c40c <__libc_init_array+0x24>
 800c3f8:	4d0b      	ldr	r5, [pc, #44]	; (800c428 <__libc_init_array+0x40>)
 800c3fa:	4c0c      	ldr	r4, [pc, #48]	; (800c42c <__libc_init_array+0x44>)
 800c3fc:	f000 f8f2 	bl	800c5e4 <_init>
 800c400:	1b64      	subs	r4, r4, r5
 800c402:	10a4      	asrs	r4, r4, #2
 800c404:	2600      	movs	r6, #0
 800c406:	42a6      	cmp	r6, r4
 800c408:	d105      	bne.n	800c416 <__libc_init_array+0x2e>
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c410:	4798      	blx	r3
 800c412:	3601      	adds	r6, #1
 800c414:	e7ee      	b.n	800c3f4 <__libc_init_array+0xc>
 800c416:	f855 3b04 	ldr.w	r3, [r5], #4
 800c41a:	4798      	blx	r3
 800c41c:	3601      	adds	r6, #1
 800c41e:	e7f2      	b.n	800c406 <__libc_init_array+0x1e>
 800c420:	0800c758 	.word	0x0800c758
 800c424:	0800c758 	.word	0x0800c758
 800c428:	0800c758 	.word	0x0800c758
 800c42c:	0800c75c 	.word	0x0800c75c

0800c430 <__retarget_lock_acquire_recursive>:
 800c430:	4770      	bx	lr

0800c432 <__retarget_lock_release_recursive>:
 800c432:	4770      	bx	lr

0800c434 <memcpy>:
 800c434:	440a      	add	r2, r1
 800c436:	4291      	cmp	r1, r2
 800c438:	f100 33ff 	add.w	r3, r0, #4294967295
 800c43c:	d100      	bne.n	800c440 <memcpy+0xc>
 800c43e:	4770      	bx	lr
 800c440:	b510      	push	{r4, lr}
 800c442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c44a:	4291      	cmp	r1, r2
 800c44c:	d1f9      	bne.n	800c442 <memcpy+0xe>
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <memset>:
 800c450:	4402      	add	r2, r0
 800c452:	4603      	mov	r3, r0
 800c454:	4293      	cmp	r3, r2
 800c456:	d100      	bne.n	800c45a <memset+0xa>
 800c458:	4770      	bx	lr
 800c45a:	f803 1b01 	strb.w	r1, [r3], #1
 800c45e:	e7f9      	b.n	800c454 <memset+0x4>

0800c460 <cleanup_glue>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	460c      	mov	r4, r1
 800c464:	6809      	ldr	r1, [r1, #0]
 800c466:	4605      	mov	r5, r0
 800c468:	b109      	cbz	r1, 800c46e <cleanup_glue+0xe>
 800c46a:	f7ff fff9 	bl	800c460 <cleanup_glue>
 800c46e:	4621      	mov	r1, r4
 800c470:	4628      	mov	r0, r5
 800c472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c476:	f000 b869 	b.w	800c54c <_free_r>
	...

0800c47c <_reclaim_reent>:
 800c47c:	4b2c      	ldr	r3, [pc, #176]	; (800c530 <_reclaim_reent+0xb4>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4283      	cmp	r3, r0
 800c482:	b570      	push	{r4, r5, r6, lr}
 800c484:	4604      	mov	r4, r0
 800c486:	d051      	beq.n	800c52c <_reclaim_reent+0xb0>
 800c488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c48a:	b143      	cbz	r3, 800c49e <_reclaim_reent+0x22>
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d14a      	bne.n	800c528 <_reclaim_reent+0xac>
 800c492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c494:	6819      	ldr	r1, [r3, #0]
 800c496:	b111      	cbz	r1, 800c49e <_reclaim_reent+0x22>
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 f857 	bl	800c54c <_free_r>
 800c49e:	6961      	ldr	r1, [r4, #20]
 800c4a0:	b111      	cbz	r1, 800c4a8 <_reclaim_reent+0x2c>
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f852 	bl	800c54c <_free_r>
 800c4a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c4aa:	b111      	cbz	r1, 800c4b2 <_reclaim_reent+0x36>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f000 f84d 	bl	800c54c <_free_r>
 800c4b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c4b4:	b111      	cbz	r1, 800c4bc <_reclaim_reent+0x40>
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 f848 	bl	800c54c <_free_r>
 800c4bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c4be:	b111      	cbz	r1, 800c4c6 <_reclaim_reent+0x4a>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 f843 	bl	800c54c <_free_r>
 800c4c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c4c8:	b111      	cbz	r1, 800c4d0 <_reclaim_reent+0x54>
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 f83e 	bl	800c54c <_free_r>
 800c4d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c4d2:	b111      	cbz	r1, 800c4da <_reclaim_reent+0x5e>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f000 f839 	bl	800c54c <_free_r>
 800c4da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c4dc:	b111      	cbz	r1, 800c4e4 <_reclaim_reent+0x68>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 f834 	bl	800c54c <_free_r>
 800c4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e6:	b111      	cbz	r1, 800c4ee <_reclaim_reent+0x72>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 f82f 	bl	800c54c <_free_r>
 800c4ee:	69a3      	ldr	r3, [r4, #24]
 800c4f0:	b1e3      	cbz	r3, 800c52c <_reclaim_reent+0xb0>
 800c4f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	4798      	blx	r3
 800c4f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c4fa:	b1b9      	cbz	r1, 800c52c <_reclaim_reent+0xb0>
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c502:	f7ff bfad 	b.w	800c460 <cleanup_glue>
 800c506:	5949      	ldr	r1, [r1, r5]
 800c508:	b941      	cbnz	r1, 800c51c <_reclaim_reent+0xa0>
 800c50a:	3504      	adds	r5, #4
 800c50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c50e:	2d80      	cmp	r5, #128	; 0x80
 800c510:	68d9      	ldr	r1, [r3, #12]
 800c512:	d1f8      	bne.n	800c506 <_reclaim_reent+0x8a>
 800c514:	4620      	mov	r0, r4
 800c516:	f000 f819 	bl	800c54c <_free_r>
 800c51a:	e7ba      	b.n	800c492 <_reclaim_reent+0x16>
 800c51c:	680e      	ldr	r6, [r1, #0]
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 f814 	bl	800c54c <_free_r>
 800c524:	4631      	mov	r1, r6
 800c526:	e7ef      	b.n	800c508 <_reclaim_reent+0x8c>
 800c528:	2500      	movs	r5, #0
 800c52a:	e7ef      	b.n	800c50c <_reclaim_reent+0x90>
 800c52c:	bd70      	pop	{r4, r5, r6, pc}
 800c52e:	bf00      	nop
 800c530:	24000188 	.word	0x24000188

0800c534 <__malloc_lock>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__malloc_lock+0x8>)
 800c536:	f7ff bf7b 	b.w	800c430 <__retarget_lock_acquire_recursive>
 800c53a:	bf00      	nop
 800c53c:	24006884 	.word	0x24006884

0800c540 <__malloc_unlock>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__malloc_unlock+0x8>)
 800c542:	f7ff bf76 	b.w	800c432 <__retarget_lock_release_recursive>
 800c546:	bf00      	nop
 800c548:	24006884 	.word	0x24006884

0800c54c <_free_r>:
 800c54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c54e:	2900      	cmp	r1, #0
 800c550:	d044      	beq.n	800c5dc <_free_r+0x90>
 800c552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c556:	9001      	str	r0, [sp, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f1a1 0404 	sub.w	r4, r1, #4
 800c55e:	bfb8      	it	lt
 800c560:	18e4      	addlt	r4, r4, r3
 800c562:	f7ff ffe7 	bl	800c534 <__malloc_lock>
 800c566:	4a1e      	ldr	r2, [pc, #120]	; (800c5e0 <_free_r+0x94>)
 800c568:	9801      	ldr	r0, [sp, #4]
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	b933      	cbnz	r3, 800c57c <_free_r+0x30>
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	6014      	str	r4, [r2, #0]
 800c572:	b003      	add	sp, #12
 800c574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c578:	f7ff bfe2 	b.w	800c540 <__malloc_unlock>
 800c57c:	42a3      	cmp	r3, r4
 800c57e:	d908      	bls.n	800c592 <_free_r+0x46>
 800c580:	6825      	ldr	r5, [r4, #0]
 800c582:	1961      	adds	r1, r4, r5
 800c584:	428b      	cmp	r3, r1
 800c586:	bf01      	itttt	eq
 800c588:	6819      	ldreq	r1, [r3, #0]
 800c58a:	685b      	ldreq	r3, [r3, #4]
 800c58c:	1949      	addeq	r1, r1, r5
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	e7ed      	b.n	800c56e <_free_r+0x22>
 800c592:	461a      	mov	r2, r3
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	b10b      	cbz	r3, 800c59c <_free_r+0x50>
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d9fa      	bls.n	800c592 <_free_r+0x46>
 800c59c:	6811      	ldr	r1, [r2, #0]
 800c59e:	1855      	adds	r5, r2, r1
 800c5a0:	42a5      	cmp	r5, r4
 800c5a2:	d10b      	bne.n	800c5bc <_free_r+0x70>
 800c5a4:	6824      	ldr	r4, [r4, #0]
 800c5a6:	4421      	add	r1, r4
 800c5a8:	1854      	adds	r4, r2, r1
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	d1e0      	bne.n	800c572 <_free_r+0x26>
 800c5b0:	681c      	ldr	r4, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	6053      	str	r3, [r2, #4]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	e7da      	b.n	800c572 <_free_r+0x26>
 800c5bc:	d902      	bls.n	800c5c4 <_free_r+0x78>
 800c5be:	230c      	movs	r3, #12
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	e7d6      	b.n	800c572 <_free_r+0x26>
 800c5c4:	6825      	ldr	r5, [r4, #0]
 800c5c6:	1961      	adds	r1, r4, r5
 800c5c8:	428b      	cmp	r3, r1
 800c5ca:	bf04      	itt	eq
 800c5cc:	6819      	ldreq	r1, [r3, #0]
 800c5ce:	685b      	ldreq	r3, [r3, #4]
 800c5d0:	6063      	str	r3, [r4, #4]
 800c5d2:	bf04      	itt	eq
 800c5d4:	1949      	addeq	r1, r1, r5
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	6054      	str	r4, [r2, #4]
 800c5da:	e7ca      	b.n	800c572 <_free_r+0x26>
 800c5dc:	b003      	add	sp, #12
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	24006888 	.word	0x24006888

0800c5e4 <_init>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	bf00      	nop
 800c5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ea:	bc08      	pop	{r3}
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	4770      	bx	lr

0800c5f0 <_fini>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	bf00      	nop
 800c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f6:	bc08      	pop	{r3}
 800c5f8:	469e      	mov	lr, r3
 800c5fa:	4770      	bx	lr
